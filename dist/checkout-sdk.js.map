{"version":3,"sources":["webpack://checkoutKit/webpack/bootstrap","webpack://checkoutKit/external \"tslib\"","webpack://checkoutKit/external \"@bigcommerce/data-store\"","webpack://checkoutKit/external \"lodash\"","webpack://checkoutKit/./src/common/error/errors/standard-error.ts","webpack://checkoutKit/./src/common/utility/set-prototype-of.ts","webpack://checkoutKit/./src/shipping/consignment-actions.ts","webpack://checkoutKit/./src/customer/customer-strategy-actions.ts","webpack://checkoutKit/./src/payment/payment-strategy-actions.ts","webpack://checkoutKit/./src/shipping/shipping-strategy-actions.ts","webpack://checkoutKit/external \"rxjs/Observable\"","webpack://checkoutKit/./src/coupon/coupon-actions.ts","webpack://checkoutKit/./src/coupon/gift-certificate-actions.ts","webpack://checkoutKit/./src/checkout/checkout-actions.ts","webpack://checkoutKit/./src/payment/payment-method-actions.ts","webpack://checkoutKit/./src/billing/billing-address-actions.ts","webpack://checkoutKit/external \"rxjs/operators\"","webpack://checkoutKit/external \"rxjs/observable/concat\"","webpack://checkoutKit/external \"rxjs/observable/of\"","webpack://checkoutKit/./src/order/order-actions.ts","webpack://checkoutKit/./src/common/error/errors/request-error.ts","webpack://checkoutKit/./src/checkout-buttons/checkout-button-selector.ts","webpack://checkoutKit/./src/checkout-buttons/checkout-button-reducer.ts","webpack://checkoutKit/./src/common/utility/is-equal.ts","webpack://checkoutKit/./src/common/selector/selector-decorator.ts","webpack://checkoutKit/./src/payment/instrument/instrument-action-types.ts","webpack://checkoutKit/./src/checkout-buttons/checkout-button-actions.ts","webpack://checkoutKit/./src/cart/map-to-internal-cart.ts","webpack://checkoutKit/./src/promotion/map-to-discount-notifications.ts","webpack://checkoutKit/./src/remote-checkout/remote-checkout-action-types.ts","webpack://checkoutKit/./src/embedded-checkout/embedded-checkout-events.ts","webpack://checkoutKit/./src/config/config-actions.ts","webpack://checkoutKit/./src/billing/billing-address-action-creator.ts","webpack://checkoutKit/./src/billing/billing-address-request-sender.ts","webpack://checkoutKit/./src/geography/country-action-creator.ts","webpack://checkoutKit/./src/geography/country-request-sender.ts","webpack://checkoutKit/./src/order/errors/order-finalization-not-required-error.ts","webpack://checkoutKit/./src/payment/payment-strategy-action-creator.ts","webpack://checkoutKit/./src/cart/errors/cart-changed-error.ts","webpack://checkoutKit/./src/checkout/checkout-validator.ts","webpack://checkoutKit/./src/payment/is-vaulted-instrument.ts","webpack://checkoutKit/./src/payment/strategies/square/square-form.ts","webpack://checkoutKit/./src/payment/payment-action-creator.ts","webpack://checkoutKit/./src/payment/payment-request-sender.ts","webpack://checkoutKit/./src/payment/payment-strategy-registry.ts","webpack://checkoutKit/./src/payment/errors/payment-argument-invalid-error.ts","webpack://checkoutKit/./src/payment/strategies/payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/afterpay/afterpay-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/amazon-pay/amazon-pay-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/credit-card-payment-strategy.ts","webpack://checkoutKit/./src/payment/errors/payment-method-cancelled-error.ts","webpack://checkoutKit/./src/payment/strategies/klarna/klarna-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/legacy-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/offline-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/offsite-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/paypal/paypal-pro-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/paypal/paypal-express-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/sage-pay-payment-strategy.ts","webpack://checkoutKit/./src/common/error/errors/unsupported-browser-error.ts","webpack://checkoutKit/./src/payment/strategies/square/square-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/no-payment-data-required-strategy.ts","webpack://checkoutKit/./src/payment/strategies/braintree/braintree-credit-card-payment-strategy.ts","webpack://checkoutKit/./src/payment/is-credit-card-like.ts","webpack://checkoutKit/./src/payment/strategies/braintree/braintree-paypal-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/braintree/braintree-visacheckout-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/wepay/wepay-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/afterpay/afterpay-script-loader.ts","webpack://checkoutKit/./src/common/utility/cancellable-promise.ts","webpack://checkoutKit/./src/payment/strategies/braintree/braintree-payment-processor.ts","webpack://checkoutKit/./src/payment/strategies/chasepay/chasepay.ts","webpack://checkoutKit/./src/payment/strategies/chasepay/chasepay-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/klarna/klarna-script-loader.ts","webpack://checkoutKit/./src/payment/strategies/square/square-script-loader.ts","webpack://checkoutKit/./src/payment/strategies/wepay/wepay-risk-client.ts","webpack://checkoutKit/./src/payment/create-payment-strategy-registry.ts","webpack://checkoutKit/./src/payment/strategies/braintree/create-braintree-payment-processor.ts","webpack://checkoutKit/./src/payment/instrument/instrument-action-creator.ts","webpack://checkoutKit/./src/common/date-time/is-future.ts","webpack://checkoutKit/./src/common/date-time/add-minutes.ts","webpack://checkoutKit/./src/payment/instrument/instrument-response-transformer.ts","webpack://checkoutKit/./src/payment/instrument/instrument-request-sender.ts","webpack://checkoutKit/./src/checkout/checkout-store-selector.ts","webpack://checkoutKit/./src/checkout/checkout-store-error-selector.ts","webpack://checkoutKit/./src/checkout/checkout-store-status-selector.ts","webpack://checkoutKit/./src/checkout/create-checkout-selectors.ts","webpack://checkoutKit/./src/common/error/error-message-transformer.ts","webpack://checkoutKit/./src/common/utility/to-single-line.ts","webpack://checkoutKit/./src/checkout/checkout-service.ts","webpack://checkoutKit/./src/checkout/create-checkout-service-error-transformer.ts","webpack://checkoutKit/./src/checkout/create-checkout-service.ts","webpack://checkoutKit/./src/payment/create-payment-client.ts","webpack://checkoutKit/./src/geography/country-action-types.ts","webpack://checkoutKit/./src/shipping/shipping-country-action-types.ts","webpack://checkoutKit/external \"rxjs/observable/defer\"","webpack://checkoutKit/./src/payment/payment-status-types.ts","webpack://checkoutKit/external \"rxjs/observable/from\"","webpack://checkoutKit/./src/payment/payment-strategy-state.ts","webpack://checkoutKit/./src/checkout/checkout-default-includes.ts","webpack://checkoutKit/external \"@bigcommerce/script-loader\"","webpack://checkoutKit/./src/customer/customer-actions.ts","webpack://checkoutKit/./src/payment/payment-actions.ts","webpack://checkoutKit/external \"@bigcommerce/request-sender\"","webpack://checkoutKit/./src/payment/payment-method-types.ts","webpack://checkoutKit/external \"@bigcommerce/form-poster\"","webpack://checkoutKit/./src/embedded-checkout/is-iframe-event.ts","webpack://checkoutKit/./src/common/selector/cache-key-resolver.ts","webpack://checkoutKit/./src/checkout-buttons/checkout-button-error-selector.ts","webpack://checkoutKit/./src/checkout-buttons/checkout-button-status-selector.ts","webpack://checkoutKit/./src/checkout-buttons/create-checkout-button-selectors.ts","webpack://checkoutKit/./src/checkout-buttons/checkout-button-initializer.ts","webpack://checkoutKit/./src/checkout-buttons/checkout-button-strategy-action-creator.ts","webpack://checkoutKit/./src/checkout-buttons/strategies/braintree-paypal-button-strategy.ts","webpack://checkoutKit/./src/checkout-buttons/strategies/checkout-button-strategy.ts","webpack://checkoutKit/./src/checkout-buttons/create-checkout-button-initializer.ts","webpack://checkoutKit/./src/checkout-buttons/create-checkout-button-registry.ts","webpack://checkoutKit/./src/cart/map-to-internal-line-items.ts","webpack://checkoutKit/./src/checkout/create-action-transformer.ts","webpack://checkoutKit/./src/checkout/checkout-selector.ts","webpack://checkoutKit/./src/checkout/checkout-reducer.ts","webpack://checkoutKit/./src/cart/map-gift-certificate-to-internal-line-item.ts","webpack://checkoutKit/./src/cart/map-to-internal-line-item.ts","webpack://checkoutKit/./src/billing/billing-address-selector.ts","webpack://checkoutKit/./src/common/utility/create-freeze-proxy.ts","webpack://checkoutKit/./src/config/config-selector.ts","webpack://checkoutKit/./src/form/form-selector.ts","webpack://checkoutKit/./src/geography/country-selector.ts","webpack://checkoutKit/./src/payment/payment-selector.ts","webpack://checkoutKit/./src/payment/payment-method-selector.ts","webpack://checkoutKit/./src/payment/payment-strategy-selector.ts","webpack://checkoutKit/./src/payment/instrument/instrument-selector.ts","webpack://checkoutKit/./src/remote-checkout/remote-checkout-selector.ts","webpack://checkoutKit/./src/checkout/create-internal-checkout-selectors.ts","webpack://checkoutKit/./src/checkout/checkout-request-sender.ts","webpack://checkoutKit/./src/checkout/checkout-action-creator.ts","webpack://checkoutKit/./src/shipping/map-to-internal-shipping-option.ts","webpack://checkoutKit/./src/embedded-checkout/iframe-content/embedded-content-events.ts","webpack://checkoutKit/./src/embedded-checkout/iframe-event-listener.ts","webpack://checkoutKit/./src/embedded-checkout/iframe-event-poster.ts","webpack://checkoutKit/./src/common/error/errors/unrecoverable-error.ts","webpack://checkoutKit/./src/common/error/request-error-factory.ts","webpack://checkoutKit/./src/billing/billing-address-reducer.ts","webpack://checkoutKit/./src/config/config-reducer.ts","webpack://checkoutKit/./src/geography/country-reducer.ts","webpack://checkoutKit/./src/payment/payment-reducer.ts","webpack://checkoutKit/./src/payment/payment-method-reducer.ts","webpack://checkoutKit/./src/common/utility/merge-or-push.ts","webpack://checkoutKit/./src/payment/payment-strategy-reducer.ts","webpack://checkoutKit/./src/payment/instrument/instrument-reducer.ts","webpack://checkoutKit/./src/remote-checkout/remote-checkout-reducer.ts","webpack://checkoutKit/./src/checkout/create-checkout-store.ts","webpack://checkoutKit/./src/common/error/create-request-error-factory.ts","webpack://checkoutKit/./src/checkout/create-checkout-store-reducer.ts","webpack://checkoutKit/./src/embedded-checkout/embedded-checkout.ts","webpack://checkoutKit/./src/embedded-checkout/loading-indicator.ts","webpack://checkoutKit/./src/embedded-checkout/parse-origin.ts","webpack://checkoutKit/./src/embedded-checkout/errors/not-embeddable-error.ts","webpack://checkoutKit/./src/embedded-checkout/resizable-iframe-creator.ts","webpack://checkoutKit/./src/embedded-checkout/embed-checkout.ts","webpack://checkoutKit/./src/cart/cart-selector.ts","webpack://checkoutKit/./src/coupon/coupon-selector.ts","webpack://checkoutKit/./src/customer/customer-selector.ts","webpack://checkoutKit/./src/customer/customer-strategy-selector.ts","webpack://checkoutKit/./src/coupon/gift-certificate-selector.ts","webpack://checkoutKit/./src/shipping/shipping-address-selector.ts","webpack://checkoutKit/./src/shipping/shipping-country-selector.ts","webpack://checkoutKit/./src/shipping/shipping-strategy-selector.ts","webpack://checkoutKit/./src/shipping/consignment-selector.ts","webpack://checkoutKit/./src/order/order-selector.ts","webpack://checkoutKit/./src/cart/cart-reducer.ts","webpack://checkoutKit/./src/shipping/consignment-reducer.ts","webpack://checkoutKit/./src/coupon/coupon-reducer.ts","webpack://checkoutKit/./src/customer/customer-reducer.ts","webpack://checkoutKit/./src/coupon/gift-certificate-reducer.ts","webpack://checkoutKit/./src/order/order-reducer.ts","webpack://checkoutKit/./src/shipping/shipping-country-reducer.ts","webpack://checkoutKit/external \"rxjs/observable/throw\"","webpack://checkoutKit/./src/address/is-address-equal.ts","webpack://checkoutKit/external \"rxjs/observable/merge\"","webpack://checkoutKit/./src/shipping/consignment-action-creator.ts","webpack://checkoutKit/./src/shipping/consignment-request-sender.ts","webpack://checkoutKit/./src/customer/customer-strategy-action-creator.ts","webpack://checkoutKit/./src/payment/strategies/braintree/braintree-script-loader.ts","webpack://checkoutKit/./src/payment/strategies/braintree/braintree-sdk-creator.ts","webpack://checkoutKit/./src/customer/customer-action-creator.ts","webpack://checkoutKit/./src/customer/customer-request-sender.ts","webpack://checkoutKit/./src/customer/map-to-internal-customer.ts","webpack://checkoutKit/./src/cart/amount-transformer.ts","webpack://checkoutKit/./src/coupon/map-to-internal-coupon.ts","webpack://checkoutKit/./src/coupon/map-to-internal-gift-certificate.ts","webpack://checkoutKit/./src/order/map-to-internal-order.ts","webpack://checkoutKit/external \"iframe-resizer\"","webpack://checkoutKit/./src/shipping/shipping-strategy-state.ts","webpack://checkoutKit/./src/shipping/shipping-strategy-reducer.ts","webpack://checkoutKit/./src/customer/customer-strategy-state.ts","webpack://checkoutKit/./src/customer/customer-strategy-reducer.ts","webpack://checkoutKit/./src/address/map-to-internal-address.ts","webpack://checkoutKit/./src/billing/is-billing-address-like.ts","webpack://checkoutKit/./src/payment/errors/payment-method-invalid-error.ts","webpack://checkoutKit/./src/common/utility/bind-decorator.ts","webpack://checkoutKit/./src/common/utility/is-private.ts","webpack://checkoutKit/./src/order/order-request-sender.ts","webpack://checkoutKit/./src/order/order-action-creator.ts","webpack://checkoutKit/./src/cart/cart-comparator.ts","webpack://checkoutKit/./src/coupon/coupon-action-creator.ts","webpack://checkoutKit/./src/coupon/coupon-request-sender.ts","webpack://checkoutKit/./src/common/error/errors/invalid-argument-error.ts","webpack://checkoutKit/./src/payment/payment-method-action-creator.ts","webpack://checkoutKit/./src/payment/payment-method-request-sender.ts","webpack://checkoutKit/./src/coupon/gift-certificate-action-creator.ts","webpack://checkoutKit/./src/coupon/gift-certificate-request-sender.ts","webpack://checkoutKit/./src/address/map-from-internal-address.ts","webpack://checkoutKit/./src/shipping/shipping-country-action-creator.ts","webpack://checkoutKit/./src/shipping/shipping-country-request-sender.ts","webpack://checkoutKit/./src/shipping/shipping-strategy-action-creator.ts","webpack://checkoutKit/./src/payment/strategies/masterpass/masterpass-script-loader.ts","webpack://checkoutKit/./src/common/error/errors/not-implemented-error.ts","webpack://checkoutKit/./src/customer/strategies/customer-strategy.ts","webpack://checkoutKit/./src/customer/strategies/amazon-pay-customer-strategy.ts","webpack://checkoutKit/./src/customer/strategies/braintree-visacheckout-customer-strategy.ts","webpack://checkoutKit/./src/customer/strategies/chasepay-customer-strategy.ts","webpack://checkoutKit/./src/customer/strategies/masterpass-customer-strategy.ts","webpack://checkoutKit/./src/customer/strategies/default-customer-strategy.ts","webpack://checkoutKit/./src/customer/strategies/square-customer-strategy.ts","webpack://checkoutKit/./src/customer/create-customer-strategy-registry.ts","webpack://checkoutKit/./src/shipping/strategies/shipping-strategy.ts","webpack://checkoutKit/./src/shipping/strategies/amazon-pay-shipping-strategy.ts","webpack://checkoutKit/./src/shipping/strategies/default-shipping-strategy.ts","webpack://checkoutKit/./src/shipping/create-shipping-strategy-registry.ts","webpack://checkoutKit/./src/common/utility/omit-private.ts","webpack://checkoutKit/./src/common/utility/omit-deep.ts","webpack://checkoutKit/./src/address/is-internal-address-equal.ts","webpack://checkoutKit/./src/common/http-request/internal-api-headers.ts","webpack://checkoutKit/external \"@bigcommerce/bigpay-client\"","webpack://checkoutKit/external \"rxjs/observable/empty\"","webpack://checkoutKit/external \"rxjs\"","webpack://checkoutKit/external \"messageformat\"","webpack://checkoutKit/./src/common/error/errors/timeout-error.ts","webpack://checkoutKit/./src/common/http-request/content-type.ts","webpack://checkoutKit/./src/config/config-action-creator.ts","webpack://checkoutKit/./src/config/config-request-sender.ts","webpack://checkoutKit/./src/common/error/errors/missing-data-error.ts","webpack://checkoutKit/./src/common/error/throw-error-action.ts","webpack://checkoutKit/./src/common/error/errors/not-initialized-error.ts","webpack://checkoutKit/./src/common/registry/registry.ts","webpack://checkoutKit/./src/payment/strategies/paypal/paypal-script-loader.ts","webpack://checkoutKit/external \"iframe-resizer/js/iframeResizer.contentWindow\"","webpack://checkoutKit/./src/common/error/errors/custom-error.ts","webpack://checkoutKit/./src/embedded-checkout/iframe-content/iframe-embedded-checkout-messenger.ts","webpack://checkoutKit/./src/embedded-checkout/iframe-content/noop-embedded-checkout-messenger.ts","webpack://checkoutKit/./src/embedded-checkout/iframe-content/create-embedded-checkout-messenger.ts","webpack://checkoutKit/./src/locale/language-service.ts","webpack://checkoutKit/./src/locale/create-language-service.ts","webpack://checkoutKit/./src/currency/currency-formatter.ts","webpack://checkoutKit/./src/currency/currency-service.ts","webpack://checkoutKit/./src/currency/create-currency-service.ts","webpack://checkoutKit/./src/common/utility/get-environment.ts","webpack://checkoutKit/./src/remote-checkout/remote-checkout-request-sender.ts","webpack://checkoutKit/./src/remote-checkout/remote-checkout-action-creator.ts","webpack://checkoutKit/./src/payment/strategies/amazon-pay/amazon-pay-script-loader.ts","webpack://checkoutKit/./src/common/http-request/to-form-url-encoded.ts","webpack://checkoutKit/./src/payment/strategies/braintree/visacheckout-script-loader.ts","webpack://checkoutKit/./src/payment/strategies/chasepay/chasepay-script-loader.ts","webpack://checkoutKit/./src/remote-checkout/errors/remote-checkout-synchronization-error.ts","webpack://checkoutKit/./src/common/log/console-logger.ts","webpack://checkoutKit/./src/common/log/noop-logger.ts","webpack://checkoutKit/./src/common/log/get-default-logger.ts","webpack://checkoutKit/./src/common/log/create-logger.ts","webpack://checkoutKit/./src/payment/strategies/braintree/braintree-visacheckout-payment-processor.ts","webpack://checkoutKit/./src/payment/strategies/braintree/create-braintree-visacheckout-payment-processor.ts"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","require","standard_error_StandardError","_super","StandardError","message","_this","this","type","setPrototypeOf","__proto__","_newTarget","Error","captureStackTrace","stack","external_tslib_","ConsignmentActionType","CustomerStrategyActionType","PaymentStrategyActionType","ShippingStrategyActionType","CouponActionType","GiftCertificateActionType","CheckoutActionType","PaymentMethodActionType","BillingAddressActionType","OrderActionType","DEFAULT_RESPONSE","body","headers","status","statusText","RequestError","_a","_b","_c","errors","Array","isArray","reduce","result","error","concat","join","joinErrors","detail","title","tslib__WEBPACK_IMPORTED_MODULE_0__","CheckoutButtonSelector","_checkoutButton","getState","isInitializing","methodId","method","statuses","lodash__WEBPACK_IMPORTED_MODULE_1__","isDeinitializing","getInitializeError","initializeError","getDeinitializeError","deinitializeError","_common_selector__WEBPACK_IMPORTED_MODULE_2__","DEFAULT_STATE","checkoutButtonReducer","state","action","meta","_bigcommerce_data_store__WEBPACK_IMPORTED_MODULE_1__","errorsReducer","statusesReducer","reducer","_checkout_button_actions__WEBPACK_IMPORTED_MODULE_2__","InitializeButtonRequested","InitializeButtonSucceeded","undefined","InitializeButtonFailed","payload","DeinitializeButtonRequested","DeinitializeButtonSucceeded","DeinitializeButtonFailed","isEqual","objectA","objectB","options","length","index","length_1","isArrayEqual","Date","getTime","isDateEqual","RegExp","toString","isRegExpEqual","filter","keyFilter","keysA","keys","keysB","length_2","isObjectEqual","selectorDecorator","target","decoratedTarget","class_1","getOwnPropertyNames","forEach","descriptor","getOwnPropertyDescriptor","resolver","cache_key_resolver","memoizedMethod","external_lodash_","args","_i","arguments","getKey","apply","bind_decorator","cachedValue","getUsedCount","newValue","is_private","cache","set","selectorMethodDecorator","LOAD_INSTRUMENTS_REQUESTED","LOAD_INSTRUMENTS_SUCCEEDED","LOAD_INSTRUMENTS_FAILED","DELETE_INSTRUMENT_REQUESTED","DELETE_INSTRUMENT_SUCCEEDED","DELETE_INSTRUMENT_FAILED","CheckoutButtonActionType","mapToInternalCart","checkout","decimalPlaces","cart","currency","amountTransformer","amount_transformer","id","items","map_to_internal_line_items","lineItems","code","coupon","discountedAmount","coupons","sum","map","map_to_internal_coupon","discount","amount","discountAmount","integerAmount","toInteger","discountNotifications","promotions","notifications","promotion","banners","banner","push","placeholders","discountType","messageHtml","text","mapToDiscountNotifications","giftCertificate","totalDiscountedAmount","giftCertificates","certificate","used","appliedGiftCertificates","map_to_internal_gift_certificate","shipping","shippingCostTotal","amountBeforeDiscount","shippingCostBeforeDiscount","integerAmountBeforeDiscount","required","physicalItems","lineItem","isShippingRequired","subtotal","storeCredit","customer","taxSubtotal","taxTotal","taxes","handling","handlingCostTotal","grandTotal","INITIALIZE_REMOTE_BILLING_REQUESTED","INITIALIZE_REMOTE_BILLING_SUCCEEDED","INITIALIZE_REMOTE_BILLING_FAILED","INITIALIZE_REMOTE_SHIPPING_REQUESTED","INITIALIZE_REMOTE_SHIPPING_SUCCEEDED","INITIALIZE_REMOTE_SHIPPING_FAILED","INITIALIZE_REMOTE_PAYMENT_REQUESTED","INITIALIZE_REMOTE_PAYMENT_SUCCEEDED","INITIALIZE_REMOTE_PAYMENT_FAILED","LOAD_REMOTE_SETTINGS_REQUESTED","LOAD_REMOTE_SETTINGS_SUCCEEDED","LOAD_REMOTE_SETTINGS_FAILED","SIGN_OUT_REMOTE_CUSTOMER_REQUESTED","SIGN_OUT_REMOTE_CUSTOMER_SUCCEEDED","SIGN_OUT_REMOTE_CUSTOMER_FAILED","UPDATE_REMOTE_CHECKOUT","EmbeddedCheckoutEventType","ConfigActionType","BillingAddressActionCreator","_requestSender","continueAsGuest","credentials","store","Observable_","observer","getCheckout","missing_data_error","MissingCheckout","getCustomer","isGuest","standard_error","billingAddressRequestBody","billingAddress","getBillingAddress","country","existingBillingAddressRequestBody","next","data_store_","billing_address_actions","ContinueAsGuestRequested","_createOrUpdateBillingAddress","then","ContinueAsGuestSucceeded","complete","catch","response","ContinueAsGuestFailed","updateAddress","address","UpdateBillingAddressRequested","email","UpdateBillingAddressSucceeded","UpdateBillingAddressFailed","checkoutId","createAddress","DEFAULT_PARAMS","include","BillingAddressRequestSender","timeout","url","Accept","content_type","JsonV1","post","params","put","CountryActionCreator","_countryRequestSender","loadCountries","country_action_types","data","CountryRequestSender","_config","Accept-Language","locale","OrderFinalizationNotRequiredError","PaymentStrategyActionCreator","_strategyRegistry","_orderActionCreator","execute","strategy","payment","useStoreCredit","isPaymentDataRequired","paymentMethods","getPaymentMethod","gatewayId","MissingPaymentMethod","getByMethod","payment_strategy_actions","ExecuteRequested","ExecuteSucceeded","ExecuteFailed","finalize","concat_","of_","FinalizeRequested","_loadOrderPaymentsIfNeeded","defer_","getPaymentId","order_finalization_not_required_error","providerId","gateway","FinalizeSucceeded","pipe","operators_","throw_error_action","FinalizeFailed","initialize","InitializeRequested","InitializeSucceeded","InitializeFailed","deinitialize","DeinitializeRequested","DeinitializeSucceeded","DeinitializeFailed","widgetInteraction","WidgetInteractionStarted","WidgetInteractionFinished","WidgetInteractionFailed","orderId","loadOrderPayments","empty_","CartChangedError","CheckoutValidator","_checkoutRequestSender","validate","loadCheckout","comparator","cart_comparator","_compareCoupons","_compareGiftCertificates","cart_changed_error","couponsA","couponsB","giftCertificatesA","giftCertificatesB","isVaultedInstrument","instrument","Boolean","instrumentId","CardBrand","DigitalWalletType","PaymentActionCreator","_paymentRequestSender","submitPayment","payment_actions","SubmitPaymentRequested","from_","_getPaymentRequestBody","loadCurrentOrder","SubmitPaymentSucceeded","SubmitPaymentFailed","initializeOffsitePayment","InitializeOffsitePaymentRequested","InitializeOffsitePaymentSucceeded","InitializeOffsitePaymentFailed","paymentData","invalid_argument_error","order","getOrder","paymentMethod","_getPaymentMethod","shippingAddress","getShippingAddress","consignments","getConsignments","shippingOption","getShippingOption","storeConfig","config","getStoreConfig","contextConfig","getContextConfig","instrumentMeta","instruments","getInstrumentsMeta","paymentMeta","getPaymentMethodsMeta","orderMeta","getOrderMeta","internalCustomer","map_to_internal_customer","authToken","getPaymentToken","vaultAccessToken","map_to_internal_address","map_to_internal_shipping_option","map_to_internal_cart","map_to_internal_order","quoteMeta","request","geoCountryCode","source","storeProfile","paymentMethodSelector","initializationData","PaymentRequestSender","_client","Promise","resolve","reject","_transformResponse","PaymentStrategyRegistry","_store","token","_getToken","cacheToken","hasFactory","payment_method_types","_isLegacyMethod","MissingCheckoutConfig","clientSidePaymentProviders","paymentSettings","registry_registry","PaymentArgumentInvalidError","invalidFields","PaymentStrategy","_isInitialized","AfterpayPaymentStrategy","_checkoutValidator","_paymentActionCreator","_paymentMethodActionCreator","_remoteCheckoutActionCreator","_afterpayScriptLoader","storeCountryName","storeCountry","load","_mapCountryToISO2","afterpaySdk","_afterpaySdk","paymentId","payment_argument_invalid_error","dispatch","initializePayment","loadPaymentMethod","_displayModal","loadSettings","afterpay","remoteCheckout","settings","not_initialized_error","PaymentNotInitialized","orderPayload","paymentPayload","nonce","submitOrder","countryName","clientToken","countryCode","display","payment_strategy","AmazonPayPaymentStrategy","_billingAddressActionCreator","_scriptLoader","_window","window","amazonOptions","amazon","_walletOptions","_paymentMethod","loadWidget","_createWallet","referenceId","_getOrderReferenceId","request_error","_getMerchantId","merchantId","container","onError","onPaymentSelect","onReady","document","getElementById","OffAmazonPayments","walletOptions","amazonOrderReferenceId","design","designMode","scope","sellerId","orderReference","_synchronizeBillingAddress","_updateOrderReference","widget","Widgets","Wallet","remote_checkout_synchronization_error","initializeBilling","remoteAddress","billing","internalBillingAddress","is_internal_address_equal","map_from_internal_address","updateCheckout","getAmazonOrderReferenceId","CreditCardPaymentStrategy","PaymentMethodCancelledError","KlarnaPaymentStrategy","_klarnaScriptLoader","klarnaCredit","_klarnaCredit","_unsubscribe","subscribe","_loadWidget","_authorize","authorizationToken","authorization_token","klarna","onLoad","init","client_token","show_form","payment_method_invalid_error","authorize","res","approved","payment_method_cancelled_error","LegacyPaymentStrategy","OfflinePaymentStrategy","OffsitePaymentStrategy","_shouldSubmitFullPayload","getPaymentStatus","payment_status_types","finalizeOrder","PaypalProPaymentStrategy","_isPaymentAcknowledged","PaypalExpressPaymentStrategy","_isInContextEnabled","loadPaypal","paypal","_paypalSdk","setup","button","environment","testMode","closeFlow","_isAcknowledgedOrFinalized","redirectUrl","getPaymentRedirectUrl","location","assign","initXO","startFlow","SagePayPaymentStrategy","_formPoster","postForm","three_ds_result","acs_url","PaReq","payer_auth_request","TermUrl","callback_url","MD","merchant_data","UnsupportedBrowserError","SquarePaymentStrategy","_checkoutActionCreator","_paymentStrategyActionCreator","_syncPaymentMethod","createSquareForm","_paymentForm","_getFormOptions","build","orderRequest","_getNonceInstrument","_getCountryCode","toUpperCase","_deferredRequestNonce","timeout_error","requestCardNonce","deferred","squareOptions","square","_squareOptions","callbacks","cardNonceResponseReceived","cardData","billingContact","shippingContact","digital_wallet_type","none","_handleWalletNonceResponse","_handleCardNonceResponse","createPaymentRequest","_paymentRequestPayload","methodsSupported","methods","masterpass","_showPaymentMethods","paymentFormLoaded","_setPostalCode","unsupportedBrowserDetected","unsupported_browser_error","_paymentInstrumentSelected","_setExternalCheckoutData","all","loadCurrentCheckout","queueId","requestShippingAddress","requestBillingInfo","currencyCode","total","label","storeName","String","pending","Content-Type","to_form_url_encoded","provider","JSON","stringify","postalCode","setPostalCode","element","masterpassBtn","elementId","style","NoPaymentDataRequiredPaymentStrategy","BraintreeCreditCardPaymentStrategy","_braintreePaymentProcessor","braintree","_is3dsEnabled","is3dsEnabled","_handleError","_preparePaymentData","_isUsingVaulting","card","ccName","ccNumber","ccType","ccExpiry","month","year","isCreditCardLike","shouldSaveInstrument","tokenizedCard","verifyCard","tokenizeCard","appendSessionId","BraintreePaypalPaymentStrategy","_credit","braintreeOptions","preloadPaypal","storeLanguage","BraintreeVisaCheckoutPaymentStrategy","_braintreeVisaCheckoutPaymentProcessor","_visaCheckoutScriptLoader","visaCheckoutOptions","braintreevisacheckout","initOptions","collectShipping","visaCheckout","visaInitOptions","on","paymentSuccessPayload","handleSuccess","WepayPaymentStrategy","orderActionCreator","paymentActionCreator","_wepayRiskClient","getRiskToken","payloadWithToken","deviceSessionId","credit_card_payment_strategy","SCRIPTS_DEFAULT","SCRIPTS_US","AfterpayScriptLoader","scriptURI","_getScriptURI","loadScript","AfterPay","promise","cancellable","cancel","race","BraintreePaymentProcessor","_braintreeSDKCreator","_threeDSecureOptions","threeDSecure","getPaypal","requestData","_mapToCreditCard","getClient","client","creditCards","offerCredit","tokenize","enableShippingAddress","flow","useraction","addFrame","removeFrame","get3DS","cancelVerifyCard","verification","cancellable_promise","iframe","processedPayment","getDataCollector","deviceData","teardown","creditCard","streetAddress","address1","address2","cardholderName","number","cvv","ccCvv","expirationDate","endpoint","ChasePayEventType","ChasePayPaymentStrategy","_chasePayScriptLoader","_walletEvent$","external_rxjs_","_methodId","chasepay","walletButton","_walletButton","addEventListener","_handleWalletButtonClick","_configureWallet","removeEventListener","_chasePayClient","_getPayment","subtype","MissingPayment","_displayWallet","_createOrder","ChasePay","logoContainer","insertBrandings","color","containers","configure","language","CancelCheckout","onCancel","CompleteCheckout","_setSessionToken","sessionToken","showLoadingAnimation","startCheckout","digitalSessionId","take","event","merchantRequestId","riskToken","paymentCryptogram","cryptogramId","eci","transactionId","btoa","reqTokenId","expDate","substr","accountNum","accountMask","extraData","preventDefault","KlarnaScriptLoader","Klarna","Credit","SquareScriptLoader","SqPaymentForm","WepayRiskClient","_riskClient","WePay","risk","generate_risk_token","get_risk_token","createPaymentStrategyRegistry","paymentClient","requestSender","registry","payment_strategy_registry","defaultToken","scriptLoader","script_loader_","braintreePaymentProcessor","braintreeScriptLoader","braintree_script_loader","braintreeSDKCreator","braintree_sdk_creator","braintree_payment_processor","createBraintreePaymentProcessor","checkoutRequestSender","checkout_request_sender","checkoutValidator","checkout_validator","order_action_creator","order_request_sender","payment_action_creator","payment_request_sender","paymentMethodActionCreator","payment_method_action_creator","payment_method_request_sender","remoteCheckoutActionCreator","remote_checkout_action_creator","remote_checkout_request_sender","configRequestSender","config_request_sender","configActionCreator","config_action_creator","checkoutActionCreator","checkout_action_creator","paymentStrategyActionCreator","payment_strategy_action_creator","register","afterpay_payment_strategy","afterpay_script_loader","amazon_pay_payment_strategy","billing_address_action_creator","billing_address_request_sender","amazon_pay_script_loader","klarna_payment_strategy","klarna_script_loader","legacy_payment_strategy","offline_payment_strategy","offsite_payment_strategy","paypal_pro_payment_strategy","paypal_express_payment_strategy","paypal_script_loader","sage_pay_payment_strategy","form_poster_","square_payment_strategy","square_script_loader","no_payment_data_required_strategy","braintree_credit_card_payment_strategy","braintree_paypal_payment_strategy","braintree_visacheckout_payment_strategy","create_braintree_visacheckout_payment_processor","visacheckout_script_loader","chasepay_payment_strategy","chasepay_script_loader","wepay_risk_client","wepay_payment_strategy","InstrumentActionCreator","_instrumentRequestSender","loadInstruments","instrument_action_types","session","_getSessionContext","_getCurrentAccessToken","_getShippingAddress","_getValidAccessToken","currentToken","deleteInstrument","_isValidVaultAccessToken","date","valueOf","now","isFuture","newDate","setMinutes","getMinutes","addMinutes","vaultAccessExpiry","getVaultAccessToken","expires_at","getCart","MissingCart","customerId","storeId","InstrumentResponseTransformer","transformResponse","vaulted_instruments","vaultedInstruments","_transformVaultedInstruments","transformErrorResponse","bigpayToken","bigpay_token","iin","last4","last_4","expiryMonth","expiry_month","expiryYear","expiry_year","brand","trustedShippingAddress","trusted_shipping_address","InstrumentRequestSender","_transformer","instrument_response_transformer","requestContext","_loadInstrumentsWithAddress","_loadInstruments","deleteShopperInstrument","loadInstrumentsWithAddress","CheckoutStoreSelector","selectors","_billingAddress","_cart","_checkout","_consignments","_countries","countries","_coupons","_customer","_form","form","_giftCertificates","_instruments","_order","_payment","_paymentMethods","_shippingAddress","_shippingCountries","shippingCountries","getConfig","context","firstName","lastName","company","city","stateOrProvince","stateOrProvinceCode","phone","customFields","getShippingOptions","availableShippingOptions","getSelectedShippingOption","selectedShippingOption","getShippingCountries","getBillingCountries","getCountries","getPaymentMethods","getSelectedPaymentMethod","getCoupons","getGiftCertificates","isPaymentDataSubmitted","getInstruments","getBillingAddressFields","getShippingAddressFields","selector_decorator","CheckoutStoreErrorSelector","_customerStrategies","customerStrategies","_paymentStrategies","paymentStrategies","_shippingStrategies","shippingStrategies","getError","getLoadCheckoutError","getSubmitOrderError","getFinalizeOrderError","getLoadOrderError","getLoadCartError","getLoadBillingCountriesError","getLoadShippingCountriesError","getLoadPaymentMethodsError","getLoadPaymentMethodError","getInitializePaymentError","getLoadShippingOptionsError","getSelectShippingOptionError","getSignInError","getSignOutError","getInitializeCustomerError","getUpdateShippingAddressError","getUpdateBillingAddressError","getContinueAsGuestError","getUpdateConsignmentError","getCreateConsignmentsError","getDeleteConsignmentError","getInitializeShippingError","getApplyCouponError","getRemoveCouponError","getApplyGiftCertificateError","getRemoveGiftCertificateError","getLoadInstrumentsError","getDeleteInstrumentError","getLoadConfigError","getLoadError","getUpdateCheckoutError","getUpdateError","getExecuteError","getFinalizeError","getLoadMethodError","consignmentId","getSelectOptionError","getUpdateShippingOptionError","getUpdateAddressError","getDeleteError","getCreateError","getApplyError","getRemoveError","CheckoutStoreStatusSelector","isPending","isLoadingCheckout","isSubmittingOrder","isFinalizingOrder","isLoadingOrder","isLoadingCart","isLoadingBillingCountries","isLoadingShippingCountries","isLoadingPaymentMethods","isLoadingPaymentMethod","isInitializingPayment","isLoadingShippingOptions","isSelectingShippingOption","isSigningIn","isSigningOut","isInitializingCustomer","isUpdatingBillingAddress","isContinuingAsGuest","isUpdatingShippingAddress","isUpdatingConsignment","isCreatingConsignments","isDeletingConsignment","isInitializingShipping","isApplyingCoupon","isRemovingCoupon","isApplyingGiftCertificate","isRemovingGiftCertificate","isLoadingInstruments","isDeletingInstrument","isLoadingConfig","isCustomerStepPending","isPaymentStepPending","isLoading","isUpdatingCheckout","isUpdating","isExecuting","isFinalizing","isLoadingMethod","isSelectingOption","isUpdatingShippingOption","isUpdatingAddress","isDeleting","isCreating","isApplying","isRemoving","isWidgetInteracting","createCheckoutSelectors","checkout_store_selector","checkout_store_error_selector","checkout_store_status_selector","ErrorMessageTransformer","_messageCustomizer","transform","input","split","line","replace","trim","toSingleLine","CheckoutService","_configActionCreator","_consignmentActionCreator","_countryActionCreator","_couponActionCreator","_customerStrategyActionCreator","_giftCertificateActionCreator","_instrumentActionCreator","_shippingCountryActionCreator","_shippingStrategyActionCreator","_state","_errorTransformer","isDevelopment","get_environment","error_message_transformer","isCheckoutServiceError","MissingConsignments","MissingOrder","MissingOrderId","CustomerNotInitialized","ShippingNotInitialized","createCheckoutServiceErrorTransformer","notifyState","subscriber","filters","_dispatch","loadDefaultCheckout","loadOrder","loadCheckoutAction","loadConfigAction","loadConfig","finalizeOrderIfNeeded","loadPaymentMethods","deinitializePayment","loadBillingCountries","loadShippingCountries","loadBillingAddressFields","loadShippingAddressFields","initializeCustomer","deinitializeCustomer","signInCustomer","signIn","signOutCustomer","signOut","loadShippingOptions","initializeShipping","deinitializeShipping","selectShippingOption","shippingOptionId","selectOption","updateShippingAddress","createConsignments","deleteConsignment","updateConsignment","consignment","assignItemsToAddress","assignItemsByAddress","selectConsignmentShippingOption","updateShippingOption","updateBillingAddress","applyCoupon","removeCoupon","applyGiftCertificate","removeGiftCertificate","createCheckoutService","protocol","get_default_logger","warn","externalSource","shouldWarnMutation","request_sender_","host","create_checkout_store","bigpay_client_","setHost","bigpayBaseUrl","createPaymentClient","orderRequestSender","checkout_service","consignment_action_creator","consignment_request_sender","country_action_creator","country_request_sender","coupon_action_creator","coupon_request_sender","customer_strategy_action_creator","create_customer_strategy_registry","gift_certificate_action_creator","gift_certificate_request_sender","instrument_action_creator","instrument_request_sender","shipping_country_action_creator","shipping_country_request_sender","shipping_strategy_action_creator","create_shipping_strategy_registry","LOAD_COUNTRIES_REQUESTED","LOAD_COUNTRIES_SUCCEEDED","LOAD_COUNTRIES_FAILED","LOAD_SHIPPING_COUNTRIES_REQUESTED","LOAD_SHIPPING_COUNTRIES_SUCCEEDED","LOAD_SHIPPING_COUNTRIES_FAILED","ACKNOWLEDGE","FINALIZE","__webpack_exports__","CustomerActionType","PaymentActionType","HOSTED","OFFLINE","isIframeEvent","CacheKeyResolver","_lastId","_maps","_resolveMap","parentMaps","cacheKey","usedCount","_generateKey","slice","isMatched","parentMaps_1","maps","CheckoutButtonErrorSelector","checkoutButton","getInitializeButtonError","getDeinitializeButtonError","CheckoutButtonStatusSelector","isInitializingButton","isDeinitializingButton","createCheckoutButtonSelectors","checkout_button_error_selector","checkout_button_status_selector","CheckoutButtonInitializer","_buttonStrategyActionCreator","initializeButton","deinitializeButton","CheckoutButtonStrategyActionCreator","_registry","checkout_button_actions","BraintreePaypalButtonStrategy","_paypalScriptLoader","_offerCredit","paypalOptions","braintreepaypalcredit","braintreepaypal","getPaypalCheckout","paypalCheckout","_paypalCheckout","Button","render","env","commit","shouldProcessPayment","shape","_setupPayment","onPaymentError","onAuthorize","_tokenizePayment","onAuthorizeError","addresses","CheckoutButtonNotInitialized","createPayment","shippingAddressEditable","shippingAddressOverride","_mapToBraintreeAddress","tokenizePayment","payment_type","device_data","shipping_address","_mapToLegacyShippingAddress","billing_address","_mapToLegacyBillingAddress","details","recipientName","first_name","last_name","phone_number","address_line_1","line1","address_line_2","line2","country_code","postal_code","CheckoutButtonStrategy","createCheckoutButtonInitializer","checkout_button_initializer","checkout_button_strategy_action_creator","braintree_paypal_button_strategy","createCheckoutButtonRegistry","mapToInternalLineItems","itemMap","idKey","item","_map_gift_certificate_to_internal_line_item__WEBPACK_IMPORTED_MODULE_0__","_map_to_internal_line_item__WEBPACK_IMPORTED_MODULE_1__","mapToInternalLineItemType","createActionTransformer","requestErrorFactory","action$","rxjs_observable_from__WEBPACK_IMPORTED_MODULE_1__","rxjs_operators__WEBPACK_IMPORTED_MODULE_2__","every","isResponse","createError","CheckoutSelector","loadError","updateError","_common_selector__WEBPACK_IMPORTED_MODULE_1__","checkoutReducer","dataReducer","_checkout_actions__WEBPACK_IMPORTED_MODULE_8__","LoadCheckoutSucceeded","UpdateCheckoutSucceeded","_billing__WEBPACK_IMPORTED_MODULE_3__","_coupon__WEBPACK_IMPORTED_MODULE_4__","ApplyCouponSucceeded","RemoveCouponSucceeded","_shipping__WEBPACK_IMPORTED_MODULE_7__","CreateConsignmentsSucceeded","UpdateConsignmentSucceeded","DeleteConsignmentSucceeded","UpdateShippingOptionSucceeded","_coupon__WEBPACK_IMPORTED_MODULE_5__","ApplyGiftCertificateSucceeded","RemoveGiftCertificateSucceeded","lodash__WEBPACK_IMPORTED_MODULE_2__","_order__WEBPACK_IMPORTED_MODULE_6__","SubmitOrderSucceeded","LoadCheckoutRequested","LoadCheckoutFailed","UpdateCheckoutRequested","UpdateCheckoutFailed","mapGiftCertificateToInternalLineItem","___WEBPACK_IMPORTED_MODULE_0__","imageUrl","amountAfterDiscount","integerAmountAfterDiscount","integerDiscount","quantity","sender","recipient","attributes","variantId","mapToInternalLineItem","extendedListPrice","extendedSalePrice","downloadsPageUrl","downloadPageUrl","productId","option","addedByPromotion","BillingAddressSelector","continueAsGuestError","createFreezeProxy","trap","proxy","iteratee","getPrototypeOf","traversePrototypeOf","charAt","createProxy","ConfigSelector","getExternalSource","FormSelector","selectedCountry","formFields","shippingAddressFields","field","_processField","billingAddressFields","_processCountry","_processProvince","_processsPostCode","default","fieldType","itemtype","subdivisions","hasPostalCodes","CountrySelector","PaymentSelector","internalPayment","_getInternalPayment","_getHostedPayment","_getGatewayPayment","step","payments","providerType","PaymentMethodSelector","loadMethodId","loadMethodError","PaymentStrategySelector","payment_strategy_state","initializeMethodId","executeMethodId","executeError","finalizeMethodId","finalizeError","getWidgetInteractingError","widgetInteractionMethodId","widgetInteractionError","InstrumentSelector","failedInstrument","deleteError","deletingInstrument","RemoteCheckoutSelector","_remoteCheckout","createInternalCheckoutSelectors","billing_address_selector","cart_selector","checkout_button_selector","config_selector","country_selector","coupon_selector","customer_selector","customer_strategy_selector","form_selector","gift_certificate_selector","instrument_selector","payment_method_selector","payment_strategy_selector","shipping_address_selector","remote_checkout_selector","shipping_country_selector","shipping_strategy_selector","consignment_selector","checkout_selector","order_selector","payment_selector","createFreezeProxies","CheckoutRequestSender","_common_http_request__WEBPACK_IMPORTED_MODULE_0__","_checkout_default_includes__WEBPACK_IMPORTED_MODULE_1__","CheckoutActionCreator","rxjs_observable_concat__WEBPACK_IMPORTED_MODULE_1__","rxjs_observable_of__WEBPACK_IMPORTED_MODULE_4__","_bigcommerce_data_store__WEBPACK_IMPORTED_MODULE_0__","_checkout_actions__WEBPACK_IMPORTED_MODULE_10__","rxjs_observable_merge__WEBPACK_IMPORTED_MODULE_3__","rxjs_observable_defer__WEBPACK_IMPORTED_MODULE_2__","rxjs_operators__WEBPACK_IMPORTED_MODULE_5__","_common_error__WEBPACK_IMPORTED_MODULE_7__","_common_error_errors__WEBPACK_IMPORTED_MODULE_8__","rxjs_Observable__WEBPACK_IMPORTED_MODULE_6__","_common_error_errors__WEBPACK_IMPORTED_MODULE_9__","mapToInternalShippingOption","isSelected","description","price","cost","selected","isRecommended","transitTime","EmbeddedContentEventType","IframeEventListener","_origin","_isListening","_listeners","listen","_handleMessage","stopListen","addListener","listener","listeners","removeListener","indexOf","splice","trigger","origin","_is_iframe_event__WEBPACK_IMPORTED_MODULE_2__","_common_utility__WEBPACK_IMPORTED_MODULE_1__","IframeEventPoster","_targetOrigin","_targetWindow","postMessage","setTarget","UnrecoverableError","RequestErrorFactory","_factoryMethods","factoryMethod","_getType","billingAddressReducer","checkout_actions","order_actions","LoadOrderSucceeded","config_reducer_DEFAULT_STATE","configReducer","config_reducer_dataReducer","config_reducer_errorsReducer","config_reducer_statusesReducer","config_actions","LoadConfigSucceeded","LoadConfigFailed","LoadConfigRequested","country_reducer_DEFAULT_STATE","countryReducer","country_reducer_dataReducer","country_reducer_errorsReducer","country_reducer_statusesReducer","paymentReducer","payment_reducer_dataReducer","payment_method_reducer_DEFAULT_STATE","paymentMethodReducer","payment_method_reducer_dataReducer","payment_method_reducer_errorsReducer","metaReducer","payment_method_reducer_statusesReducer","payment_method_actions","LoadPaymentMethodSucceeded","array","predicate","newArray","mergeOrPush","LoadPaymentMethodsSucceeded","LoadPaymentMethodsRequested","LoadPaymentMethodsFailed","LoadPaymentMethodRequested","LoadPaymentMethodFailed","paymentStrategyReducer","payment_strategy_reducer_errorsReducer","payment_strategy_reducer_statusesReducer","deinitializeMethodId","instrument_reducer_DEFAULT_STATE","instrumentReducer","instrument_reducer_dataReducer","instrument_reducer_errorsReducer","instrument_reducer_metaReducer","instrument_reducer_statusesReducer","remote_checkout_reducer_DEFAULT_STATE","remoteCheckoutReducer","remote_checkout_reducer_dataReducer","remote_checkout_action_types","createCheckoutStore","initialState","actionTransformer","create_action_transformer","factory","request_error_factory","unrecoverable_error","createRequestErrorFactory","cart_reducer","checkout_reducer","checkout_button_reducer","consignment_reducer","coupon_reducer","customer_reducer","customer_strategy_reducer","gift_certificate_reducer","order_reducer","shipping_country_reducer","shipping_strategy_reducer","stateTransformer","create_internal_checkout_selectors","EmbeddedCheckout","_iframeCreator","_messageListener","_messagePoster","_loadingIndicator","_options","_isAttached","onComplete","embedded_checkout_events","CheckoutComplete","CheckoutError","CheckoutLoaded","onFrameLoad","FrameLoaded","_configureStyles","attach","show","containerId","createFrame","_iframe","hide","FrameError","detach","parentNode","removeChild","iFrameResizer","close","contentWindow","styles","embedded_content_events","StyleConfigured","DEFAULT_STYLES","size","backgroundColor","ROTATION_ANIMATION","LoadingIndicator","_styles","_defineAnimation","_container","_buildContainer","_indicator","_buildIndicator","appendChild","parentId","parent_1","visibility","opacity","handleTransitionEnd","createElement","bottom","left","height","width","position","right","top","transition","indicator","borderRadius","border","borderColor","margin","transformStyle","animation","head","sheet","CSSStyleSheet","insertRule","parseOrigin","test","anchor","href","hostname","port","NotEmbeddableError","ResizableIframeCreator","src","not_embeddable_error","_toResizableFrame","timeoutInterval","setTimeout","handleMessage","is_iframe_event","iframes","external_iframe_resizer_","scrolling","sizeWidth","heightCalculationMethod","clearTimeout","embedCheckout","embedded_checkout","resizable_iframe_creator","iframe_event_listener","iframe_event_poster","loading_indicator","loadingIndicator","CartSelector","CouponSelector","_coupon","removeCouponError","applyCouponError","CustomerSelector","CustomerStrategySelector","signInMethodId","signInError","signOutMethodId","signOutError","getWidgetInteractionError","GiftCertificateSelector","_giftCertificate","removeGiftCertificateError","applyGiftCertificateError","ShippingAddressSelector","ShippingCountrySelector","ShippingStrategySelector","updateAddressMethodId","updateAddressError","selectOptionMethodId","selectOptionError","ConsignmentSelector","getConsignmentById","getConsignmentByAddress","_address__WEBPACK_IMPORTED_MODULE_2__","loadShippingOptionsError","getUnassignedItems","assignedLineItemIds","itemIds","lineItemIds","getItemAssignmentError","updateShippingOptionError","isAssigningItems","_common_selector__WEBPACK_IMPORTED_MODULE_3__","OrderSelector","cartReducer","_billing_billing_address_actions__WEBPACK_IMPORTED_MODULE_2__","_checkout__WEBPACK_IMPORTED_MODULE_3__","_shipping_consignment_actions__WEBPACK_IMPORTED_MODULE_6__","_coupon_coupon_actions__WEBPACK_IMPORTED_MODULE_4__","_coupon_gift_certificate_actions__WEBPACK_IMPORTED_MODULE_5__","consignmentReducer","_checkout__WEBPACK_IMPORTED_MODULE_2__","_consignment_actions__WEBPACK_IMPORTED_MODULE_4__","LoadShippingOptionsSucceeded","_customer__WEBPACK_IMPORTED_MODULE_3__","SignOutCustomerSucceeded","LoadShippingOptionsRequested","LoadShippingOptionsFailed","CreateConsignmentsRequested","CreateConsignmentsFailed","UpdateConsignmentRequested","UpdateConsignmentFailed","DeleteConsignmentRequested","DeleteConsignmentFailed","UpdateShippingOptionRequested","UpdateShippingOptionFailed","couponReducer","_coupon_actions__WEBPACK_IMPORTED_MODULE_4__","_order__WEBPACK_IMPORTED_MODULE_3__","ApplyCouponRequested","ApplyCouponFailed","RemoveCouponRequested","RemoveCouponFailed","customerReducer","giftCertificateReducer","_shipping_consignment_actions__WEBPACK_IMPORTED_MODULE_3__","_gift_certificate_actions__WEBPACK_IMPORTED_MODULE_5__","ApplyGiftCertificateRequested","ApplyGiftCertificateFailed","RemoveGiftCertificateRequested","RemoveGiftCertificateFailed","orderReducer","_order_actions__WEBPACK_IMPORTED_MODULE_3__","LoadOrderPaymentsSucceeded","FinalizeOrderSucceeded","callbackUrl","orderToken","LoadOrderRequested","LoadOrderPaymentsRequested","LoadOrderFailed","LoadOrderPaymentsFailed","shippingCountryReducer","_shipping_country_action_types__WEBPACK_IMPORTED_MODULE_2__","isAddressEqual","addressA","addressB","lodash__WEBPACK_IMPORTED_MODULE_0__","normalize","ConsignmentActionCreator","_consignmentRequestSender","existingConsignment","_createOrUpdateConsignment","_combineLineItems","rxjs_Observable__WEBPACK_IMPORTED_MODULE_3__","_common_error_errors__WEBPACK_IMPORTED_MODULE_4__","consignmentUpdateBody","consignmentMeta","_consignment_actions__WEBPACK_IMPORTED_MODULE_5__","_getConsignmentRequestBody","_isUpdateConsignmentRequest","itemId","ConsignmentRequestSender","_common_http_request__WEBPACK_IMPORTED_MODULE_1__","delete","CustomerStrategyActionCreator","rxjs_Observable__WEBPACK_IMPORTED_MODULE_1__","_customer_strategy_actions__WEBPACK_IMPORTED_MODULE_2__","SignInRequested","SignInSucceeded","SignInFailed","SignOutRequested","SignOutSucceeded","SignOutFailed","BraintreeScriptLoader","loadClient","_common_error_errors__WEBPACK_IMPORTED_MODULE_0__","load3DS","loadDataCollector","dataCollector","loadPaypalCheckout","loadVisaCheckout","BraintreeSDKCreator","_braintreeScriptLoader","_dataCollectors","_clientToken","_common_error_errors__WEBPACK_IMPORTED_MODULE_1__","authorization","_paypal","_3ds","cached","kount","getVisaCheckout","_visaCheckout","_teardown","mod","CustomerActionCreator","_customerRequestSender","rxjs_observable_of__WEBPACK_IMPORTED_MODULE_3__","_customer_actions__WEBPACK_IMPORTED_MODULE_6__","SignInCustomerRequested","rxjs_observable_from__WEBPACK_IMPORTED_MODULE_2__","rxjs_operators__WEBPACK_IMPORTED_MODULE_4__","SignInCustomerSucceeded","_common_error__WEBPACK_IMPORTED_MODULE_5__","SignInCustomerFailed","SignOutCustomerRequested","SignOutCustomerFailed","CustomerRequestSender","mapToInternalCustomer","_address__WEBPACK_IMPORTED_MODULE_0__","fullName","AmountTransformer","_dp","Math","floor","pow","mapToInternalCoupon","couponTypes","displayName","couponType","mapToInternalGiftCertificate","remainingBalance","remaining","balance","purchaseDate","mapToInternalOrder","_cart__WEBPACK_IMPORTED_MODULE_1__","_cart__WEBPACK_IMPORTED_MODULE_2__","customerCanBeCreated","isDefaultOrderPayment","mapToInternalPaymentStatus","helpText","instructions","returnUrl","mapToInteralOrderPayment","baseAmount","_coupon__WEBPACK_IMPORTED_MODULE_3__","mapToGiftCertificates","socialData","socialDataObject","digitalItems","socialMedia","find","image","link","shareText","sharingLink","channelName","channel","channelCode","mapToInternalSocialData","mapToInternalSocialDataList","hasDigitalItems","isDownloadable","isComplete","mapToStoreCredit","orderAmount","orderAmountAsInteger","shippingStrategyReducer","shipping_strategy_actions","UpdateAddressRequested","UpdateAddressSucceeded","UpdateAddressFailed","SelectOptionRequested","SelectOptionSucceeded","SelectOptionFailed","customerStrategyReducer","customer_strategy_actions","mapToInternalAddress","addressId","isBillingAddressLike","addressLine1","addressLine2","province","provinceCode","postCode","PaymentMethodInvalidError","bindDecorator","bindMethodDecorator","bindClassDecorator","boundMethod","isPrivate","OrderRequestSender","OrderActionCreator","_orderRequestSender","rxjs_Observable__WEBPACK_IMPORTED_MODULE_7__","_order_actions__WEBPACK_IMPORTED_MODULE_10__","rxjs_observable_defer__WEBPACK_IMPORTED_MODULE_3__","_getCurrentOrderId","rxjs_observable_concat__WEBPACK_IMPORTED_MODULE_2__","rxjs_observable_of__WEBPACK_IMPORTED_MODULE_5__","SubmitOrderRequested","rxjs_observable_from__WEBPACK_IMPORTED_MODULE_4__","_mapToOrderRequestBody","customerMessage","rxjs_operators__WEBPACK_IMPORTED_MODULE_6__","_common_error__WEBPACK_IMPORTED_MODULE_8__","SubmitOrderFailed","FinalizeOrderRequested","FinalizeOrderFailed","CartComparator","cartA","cartB","_normalize","cartAmount","giftWrapping","CouponActionCreator","_couponRequestSender","_common_error_errors__WEBPACK_IMPORTED_MODULE_2__","_coupon_actions__WEBPACK_IMPORTED_MODULE_3__","CouponRequestSender","couponCode","_checkout__WEBPACK_IMPORTED_MODULE_0__","InvalidArgumentError","PaymentMethodActionCreator","_payment_method_actions__WEBPACK_IMPORTED_MODULE_2__","sessionHash","PaymentMethodRequestSender","X-API-INTERNAL","GiftCertificateActionCreator","_giftCertificateRequestSender","_gift_certificate_actions__WEBPACK_IMPORTED_MODULE_3__","GiftCertificateRequestSender","giftCertificateCode","mapFromInternalAddress","ShippingCountryActionCreator","_shippingCountryRequestSender","ShippingCountryRequestSender","ShippingStrategyActionCreator","rxjs_Observable__WEBPACK_IMPORTED_MODULE_2__","_shipping_strategy_actions__WEBPACK_IMPORTED_MODULE_3__","mergedOptions","MasterpassScriptLoader","NotImplementedError","CustomerStrategy","AmazonPayCustomerStrategy","_remoteCheckoutRequestSender","_createSignInButton","not_implemented_error","useAmazonAddressBook","_handleAuthorization","generateToken","Login","popup","tokenPrefix","trackAuthorizationEvent","customer_strategy","BraintreeVisaCheckoutCustomerStrategy","_buttonClassName","signInButton","buttonClass","querySelector","_insertVisaCheckoutButton","visaCheckoutButton","className","innerHTML","ChasePayCustomerStrategy","chasePayOptions","JPMC","isChasePayUp","insertButtons","EventType","START_CHECKOUT","sessionId","COMPLETE_CHECKOUT","requestId","_reloadPage","sendRequest","fromChasePay","MasterpassCustomerStrategy","_masterpassScriptLoader","masterpassOptions","allowedCardTypes","cartId","Masterpass","_signInButton","DefaultCustomerStrategy","_customerActionCreator","SquareCustomerStrategy","createCustomerStrategyRegistry","remoteCheckoutRequestSender","amazon_pay_customer_strategy","braintree_visacheckout_customer_strategy","chasepay_customer_strategy","square_customer_strategy","masterpass_customer_strategy","masterpass_script_loader","default_customer_strategy","customer_action_creator","customer_request_sender","ShippingStrategy","AmazonPayShippingStrategy","_createAddressBook","optionId","onAddressSelect","AddressBook","_synchronizeShippingAddress","shipping_strategy","DefaultShippingStrategy","createShippingStrategyRegistry","consignmentRequestSender","amazon_pay_shipping_strategy","default_shipping_strategy","omitPrivate","omitDeep","isInternalAddressEqual","ignoredKeys","INTERNAL_USE_ONLY","TimeoutError","ContentType","ConfigActionCreator","_configRequestSender","_config_actions__WEBPACK_IMPORTED_MODULE_2__","ConfigRequestSender","MissingDataErrorType","MissingDataError","MissingOrderConfig","getErrorMessage","_standard_error__WEBPACK_IMPORTED_MODULE_1__","throwErrorAction","isErrorAction","rxjs_observable_of__WEBPACK_IMPORTED_MODULE_2__","rxjs_observable_throw__WEBPACK_IMPORTED_MODULE_3__","NotInitializedErrorType","NotInitializedError","Registry","_factories","_instances","_getInstance","_error_errors__WEBPACK_IMPORTED_MODULE_1__","hasInstance","PaypalScriptLoader","isCustomError","IframeEmbeddedCheckoutMessenger","postComplete","postError","_transformError","postFrameError","postFrameLoaded","postLoaded","receiveStyles","handler","NoopEmbeddedCheckoutMessenger","createEmbeddedCheckoutMessenger","parentWindow","parent","noop_embedded_checkout_messenger","iframe_embedded_checkout_messenger","parentOrigin","LanguageService","_logger","_transformConfig","locales","translations","_locale","_locales","_translations","_formatters","mapKeys","translationKey","KEY_PREFIX","getLocale","_hasTranslations","translate","prefixedKey","messageFormat","external_messageformat_","compile","_transformData","output","defaultTranslations","_flattenObject","parentKey","resultKey","err","createLanguageService","language_service","CurrencyFormatter","currencySettings","symbolLocation","symbol","thousandsSeparator","decimalSeparator","_decimalPlaces","parseInt","_symbolLocation","_symbol","_thousandsSeparator","_decimalSeparator","format","formattedNumber","_formatNumber","formattedCurrency","_formatCurrency","abs","decimalAmount","parsedIntegerAmount","decimalPadding","toLowerCase","CurrencyService","_storeConfig","_customerFormatter","currency_formatter","shopperCurrency","_storeFormatter","toCustomerCurrency","exchangeRate","parseFloat","toStoreCurrency","createCurrencyService","currency_service","getEnvironment","process","NODE_ENV","e","RemoteCheckoutRequestSender","methodName","RemoteCheckoutActionCreator","_remote_checkout_action_types__WEBPACK_IMPORTED_MODULE_2__","AmazonPayScriptLoader","onPaymentReady","region","_configureWidget","onLoginReady","setClientId","clientId","setUseCookie","onAmazonLoginReady","onAmazonPaymentsReady","toFormUrlEncoded","encodeURIComponent","VisaCheckoutScriptLoader","V","ChasePayScriptLoader","RemoteCheckoutSynchronizationError","ConsoleLogger","_console","log","messages","_logToConsole","info","debug","NoopLogger","logger","isEnabled","console_logger","console","noop_logger","createLogger","getDefaultLogger","BraintreeVisaCheckoutPaymentProcessor","createInitOptions","paymentRequest","braintreeVisaCheckout","tokenizedPayload","_toVisaCheckoutAddress","_postForm","userData","cardInformation","userEmail","card_information","_getCardInformation","_getAddress","phoneNumber","extendedAddress","locality","cardType","lastTwo","createBraintreeVisaCheckoutPaymentProcessor","braintree_visacheckout_payment_processor"],"mappings":"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A7kB,EACAwjB,EACApI,EACAC,EACAyI,EACAG,EACA,IAAIa,GAAqBjC,MAIjCH,EAASkC,SAAS,SAAU,WACxB,WAAIG,GACA/kB,EACAob,EACA,IAAI4J,EACA,IAAIC,EAA4BxC,IAEpCwB,EACA,IAAIiB,GAAA,EAAsBrC,MAIlCH,EAASkC,SAAS,aAAc,WAC5B,WAAIlJ,GACA1b,EACAob,EACAC,KAIRqH,EAASkC,SAAS,SAAU,WACxB,WAAIO,GACAnlB,EACAob,EACA0I,EACAG,EACA,IAAImB,GAAmBvC,MAI/BH,EAASkC,SAAS,SAAU,WACxB,WAAIS,GACArlB,EACAob,KAIRsH,EAASkC,SAAS,UAAW,WACzB,WAAIU,GACAtlB,EACAob,KAIRsH,EAASkC,SAAS,UAAW,WACzB,WAAIW,GACAvlB,EACAob,EACAC,KAIRqH,EAASkC,SAAS,SAAU,WACxB,WAAIY,GACAxlB,EACAob,EACAC,KAIRqH,EAASkC,SAAS,gBAAiB,WAC/B,WAAIa,GACAzlB,EACAob,EACA,IAAIsK,GAAA,EAAmB7C,MAI/BH,EAASkC,SAAS,sBAAuB,WACrC,WAAIa,GACAzlB,EACAob,EACA,IAAIsK,GAAA,EAAmB7C,MAI/BH,EAASkC,SAAS,UAAW,WACzB,WAAIe,GACA3lB,EACAob,EACAC,EACAhqB,OAAAu0B,EAAA,iBAAAv0B,MAIRqxB,EAASkC,SAAS,WAAY,WAC1B,WAAIiB,GACA7lB,EACAwkB,EACApJ,EACAC,EACAyI,EACAY,EACAjC,EACA,IAAIqD,GAAmBjD,MAI/BH,EAASkC,SAAS,wBAAyB,WACvC,WAAImB,GACA/lB,EACAob,KAIRsH,EAASkC,SAAS,YAAa,WAC3B,WAAIoB,GACAhmB,EACAob,EACAC,EACAyI,EACAf,KAIRL,EAASkC,SAAS,kBAAmB,WACjC,WAAIqB,GACAjmB,EACAob,EACAC,EACAyI,EACAf,KAIRL,EAASkC,SAAS,wBAAyB,WACvC,WAAIqB,GACAjmB,EACAob,EACAC,EACAyI,EACAf,GACA,KAIRL,EAASkC,SAAS,wBAAyB,WACvC,WAAIsB,GACAlmB,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","file":"checkout-sdk.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 164);\n","module.exports = require(\"tslib\");","module.exports = require(\"@bigcommerce/data-store\");","module.exports = require(\"lodash\");","import { setPrototypeOf } from '../../utility';\n\nimport CustomError from './custom-error';\n\nexport default class StandardError extends Error implements CustomError {\n    type = 'standard';\n\n    constructor(message?: string) {\n        super(message || 'An unexpected error has occurred.');\n\n        setPrototypeOf(this, new.target.prototype);\n\n        if (typeof Error.captureStackTrace === 'function') {\n            Error.captureStackTrace(this, new.target);\n        } else {\n            this.stack = (new Error(this.message)).stack;\n        }\n    }\n}\n","export default function setPrototypeOf(object: any, prototype: object) {\n    if (Object.setPrototypeOf) {\n        Object.setPrototypeOf(object, prototype);\n    } else {\n        object.__proto__ = prototype;\n    }\n\n    return object;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { Checkout } from '../checkout';\n\nimport { ConsignmentMeta } from './consignment';\n\nexport enum ConsignmentActionType {\n    CreateConsignmentsRequested = 'CREATE_CONSIGNMENTS_REQUESTED',\n    CreateConsignmentsSucceeded = 'CREATE_CONSIGNMENTS_SUCCEEDED',\n    CreateConsignmentsFailed = 'CREATE_CONSIGNMENTS_FAILED',\n\n    UpdateConsignmentRequested = 'UPDATE_CONSIGNMENT_REQUESTED',\n    UpdateConsignmentSucceeded = 'UPDATE_CONSIGNMENT_SUCCEEDED',\n    UpdateConsignmentFailed = 'UPDATE_CONSIGNMENT_FAILED',\n\n    DeleteConsignmentRequested = 'DELETE_CONSIGNMENT_REQUESTED',\n    DeleteConsignmentSucceeded = 'DELETE_CONSIGNMENT_SUCCEEDED',\n    DeleteConsignmentFailed = 'DELETE_CONSIGNMENT_FAILED',\n\n    UpdateShippingOptionRequested = 'UPDATE_SHIPPING_OPTION_REQUESTED',\n    UpdateShippingOptionSucceeded = 'UPDATE_SHIPPING_OPTION_SUCCEEDED',\n    UpdateShippingOptionFailed = 'UPDATE_SHIPPING_OPTION_FAILED',\n\n    LoadShippingOptionsRequested = 'LOAD_SHIPPING_OPTIONS_REQUESTED',\n    LoadShippingOptionsSucceeded = 'LOAD_SHIPPING_OPTIONS_SUCCEEDED',\n    LoadShippingOptionsFailed = 'LOAD_SHIPPING_OPTIONS_FAILED',\n}\n\nexport type ConsignmentAction =\n    CreateConsignmentsAction |\n    UpdateConsignmentAction |\n    DeleteConsignmentAction |\n    UpdateShippingOptionAction |\n    LoadShippingOptionsAction;\n\nexport type CreateConsignmentsAction =\n    CreateConsignmentsRequestedAction |\n    CreateConsignmentsSucceededAction |\n    CreateConsignmentsFailedAction;\n\nexport type UpdateConsignmentAction =\n    UpdateConsignmentRequestedAction |\n    UpdateConsignmentSucceededAction |\n    UpdateConsignmentFailedAction;\n\nexport type DeleteConsignmentAction =\n    DeleteConsignmentRequestedAction |\n    DeleteConsignmentSucceededAction |\n    DeleteConsignmentFailedAction;\n\nexport type UpdateShippingOptionAction =\n    UpdateShippingOptionRequestedAction |\n    UpdateShippingOptionSucceededAction |\n    UpdateShippingOptionFailedAction;\n\nexport type LoadShippingOptionsAction =\n    LoadShippingOptionsRequestedAction |\n    LoadShippingOptionsSucceededAction |\n    LoadShippingOptionsFailedAction;\n\nexport interface CreateConsignmentsRequestedAction extends Action {\n    type: ConsignmentActionType.CreateConsignmentsRequested;\n}\n\nexport interface CreateConsignmentsSucceededAction extends Action<Checkout> {\n    type: ConsignmentActionType.CreateConsignmentsSucceeded;\n}\n\nexport interface CreateConsignmentsFailedAction extends Action<Error> {\n    type: ConsignmentActionType.CreateConsignmentsFailed;\n}\n\nexport interface UpdateConsignmentRequestedAction extends Action<null, ConsignmentMeta> {\n    type: ConsignmentActionType.UpdateConsignmentRequested;\n}\n\nexport interface UpdateConsignmentSucceededAction extends Action<Checkout, ConsignmentMeta> {\n    type: ConsignmentActionType.UpdateConsignmentSucceeded;\n}\n\nexport interface UpdateConsignmentFailedAction extends Action<Error, ConsignmentMeta> {\n    type: ConsignmentActionType.UpdateConsignmentFailed;\n}\n\nexport interface DeleteConsignmentRequestedAction extends Action<null, ConsignmentMeta> {\n    type: ConsignmentActionType.DeleteConsignmentRequested;\n}\n\nexport interface DeleteConsignmentSucceededAction extends Action<Checkout, ConsignmentMeta> {\n    type: ConsignmentActionType.DeleteConsignmentSucceeded;\n}\n\nexport interface DeleteConsignmentFailedAction extends Action<Error, ConsignmentMeta> {\n    type: ConsignmentActionType.DeleteConsignmentFailed;\n}\n\nexport interface UpdateShippingOptionRequestedAction extends Action<null, ConsignmentMeta> {\n    type: ConsignmentActionType.UpdateShippingOptionRequested;\n}\n\nexport interface UpdateShippingOptionSucceededAction extends Action<Checkout, ConsignmentMeta> {\n    type: ConsignmentActionType.UpdateShippingOptionSucceeded;\n}\n\nexport interface UpdateShippingOptionFailedAction extends Action<Error, ConsignmentMeta> {\n    type: ConsignmentActionType.UpdateShippingOptionFailed;\n}\n\nexport interface LoadShippingOptionsRequestedAction extends Action {\n    type: ConsignmentActionType.LoadShippingOptionsRequested;\n}\n\nexport interface LoadShippingOptionsSucceededAction extends Action<Checkout> {\n    type: ConsignmentActionType.LoadShippingOptionsSucceeded;\n}\n\nexport interface LoadShippingOptionsFailedAction extends Action<Error> {\n    type: ConsignmentActionType.LoadShippingOptionsFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nexport enum CustomerStrategyActionType {\n    SignInFailed = 'CUSTOMER_STRATEGY_SIGN_IN_FAILED',\n    SignInRequested = 'CUSTOMER_STRATEGY_SIGN_IN_REQUESTED',\n    SignInSucceeded = 'CUSTOMER_STRATEGY_SIGN_IN_SUCCEEDED',\n    SignOutFailed = 'CUSTOMER_STRATEGY_SIGN_OUT_FAILED',\n    SignOutRequested = 'CUSTOMER_STRATEGY_SIGN_OUT_REQUESTED',\n    SignOutSucceeded = 'CUSTOMER_STRATEGY_SIGN_OUT_SUCCEEDED',\n    InitializeFailed = 'CUSTOMER_STRATEGY_INITIALIZE_FAILED',\n    InitializeRequested = 'CUSTOMER_STRATEGY_INITIALIZE_REQUESTED',\n    InitializeSucceeded = 'CUSTOMER_STRATEGY_INITIALIZE_SUCCEEDED',\n    DeinitializeFailed = 'CUSTOMER_STRATEGY_DEINITIALIZE_FAILED',\n    DeinitializeRequested = 'CUSTOMER_STRATEGY_DEINITIALIZE_REQUESTED',\n    DeinitializeSucceeded = 'CUSTOMER_STRATEGY_DEINITIALIZE_SUCCEEDED',\n    WidgetInteractionStarted = 'CUSTOMER_STRATEGY_WIDGET_INTERACTION_STARTED',\n    WidgetInteractionFinished = 'CUSTOMER_STRATEGY_WIDGET_INTERACTION_FINISHED',\n    WidgetInteractionFailed = 'CUSTOMER_STRATEGY_WIDGET_INTERACTION_FAILED',\n}\n\nexport type CustomerStrategyAction =\n    CustomerStrategySignInAction |\n    CustomerStrategySignOutAction |\n    CustomerStrategyInitializeAction |\n    CustomerStrategyDeinitializeAction |\n    CustomerStrategyWidgetAction;\n\nexport type CustomerStrategySignInAction =\n    SignInRequestedAction |\n    SignInSucceededAction |\n    SignInFailedAction;\n\nexport type CustomerStrategySignOutAction =\n    SignOutRequestedAction |\n    SignOutSucceededAction |\n    SignOutFailedAction;\n\nexport type CustomerStrategyInitializeAction =\n    InitializeRequestedAction |\n    InitializeSucceededAction |\n    InitializeFailedAction;\n\nexport type CustomerStrategyDeinitializeAction =\n    DeinitializeRequestedAction |\n    DeinitializeSucceededAction |\n    DeinitializeFailedAction;\n\nexport type CustomerStrategyWidgetAction =\n    WidgetInteractionStartedAction |\n    WidgetInteractionFinishedAction |\n    WidgetInteractionFailedAction;\n\nexport interface SignInRequestedAction extends Action {\n    type: CustomerStrategyActionType.SignInRequested;\n}\n\nexport interface SignInSucceededAction extends Action {\n    type: CustomerStrategyActionType.SignInSucceeded;\n}\n\nexport interface SignInFailedAction extends Action<Error> {\n    type: CustomerStrategyActionType.SignInFailed;\n}\n\nexport interface SignOutRequestedAction extends Action {\n    type: CustomerStrategyActionType.SignOutRequested;\n}\n\nexport interface SignOutSucceededAction extends Action {\n    type: CustomerStrategyActionType.SignOutSucceeded;\n}\n\nexport interface SignOutFailedAction extends Action<Error> {\n    type: CustomerStrategyActionType.SignOutFailed;\n}\n\nexport interface InitializeRequestedAction extends Action {\n    type: CustomerStrategyActionType.InitializeRequested;\n}\n\nexport interface InitializeSucceededAction extends Action {\n    type: CustomerStrategyActionType.InitializeSucceeded;\n}\n\nexport interface InitializeFailedAction extends Action<Error> {\n    type: CustomerStrategyActionType.InitializeFailed;\n}\n\nexport interface DeinitializeRequestedAction extends Action {\n    type: CustomerStrategyActionType.DeinitializeRequested;\n}\n\nexport interface DeinitializeSucceededAction extends Action {\n    type: CustomerStrategyActionType.DeinitializeSucceeded;\n}\n\nexport interface DeinitializeFailedAction extends Action<Error> {\n    type: CustomerStrategyActionType.DeinitializeFailed;\n}\n\nexport interface WidgetInteractionStartedAction extends Action {\n    type: CustomerStrategyActionType.WidgetInteractionStarted;\n}\n\nexport interface WidgetInteractionFinishedAction extends Action {\n    type: CustomerStrategyActionType.WidgetInteractionFinished;\n}\n\nexport interface WidgetInteractionFailedAction extends Action<Error> {\n    type: CustomerStrategyActionType.WidgetInteractionFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { LoadOrderPaymentsAction } from '../order';\n\nexport enum PaymentStrategyActionType {\n    ExecuteFailed = 'PAYMENT_STRATEGY_EXECUTE_FAILED',\n    ExecuteRequested = 'PAYMENT_STRATEGY_EXECUTE_REQUESTED',\n    ExecuteSucceeded = 'PAYMENT_STRATEGY_EXECUTE_SUCCEEDED',\n    FinalizeFailed = 'PAYMENT_STRATEGY_FINALIZE_FAILED',\n    FinalizeRequested = 'PAYMENT_STRATEGY_FINALIZE_REQUESTED',\n    FinalizeSucceeded = 'PAYMENT_STRATEGY_FINALIZE_SUCCEEDED',\n    InitializeFailed = 'PAYMENT_STRATEGY_INITIALIZE_FAILED',\n    InitializeRequested = 'PAYMENT_STRATEGY_INITIALIZE_REQUESTED',\n    InitializeSucceeded = 'PAYMENT_STRATEGY_INITIALIZE_SUCCEEDED',\n    DeinitializeFailed = 'PAYMENT_STRATEGY_DEINITIALIZE_FAILED',\n    DeinitializeRequested = 'PAYMENT_STRATEGY_DEINITIALIZE_REQUESTED',\n    DeinitializeSucceeded = 'PAYMENT_STRATEGY_DEINITIALIZE_SUCCEEDED',\n    WidgetInteractionStarted = 'PAYMENT_STRATEGY_WIDGET_INTERACTION_STARTED',\n    WidgetInteractionFinished = 'PAYMENT_STRATEGY_WIDGET_INTERACTION_FINISHED',\n    WidgetInteractionFailed = 'PAYMENT_STRATEGY_WIDGET_INTERACTION_FAILED',\n}\n\nexport type PaymentStrategyAction =\n    PaymentStrategyExecuteAction |\n    PaymentStrategyFinalizeAction |\n    PaymentStrategyInitializeAction |\n    PaymentStrategyDeinitializeAction |\n    PaymentStrategyWidgetAction;\n\nexport type PaymentStrategyExecuteAction =\n    ExecuteRequestedAction |\n    ExecuteSucceededAction |\n    ExecuteFailedAction |\n    LoadOrderPaymentsAction;\n\nexport type PaymentStrategyFinalizeAction =\n    FinalizeRequestedAction |\n    FinalizeSucceededAction |\n    FinalizeFailedAction |\n    LoadOrderPaymentsAction;\n\nexport type PaymentStrategyInitializeAction =\n    InitializeRequestedAction |\n    InitializeSucceededAction |\n    InitializeFailedAction;\n\nexport type PaymentStrategyDeinitializeAction =\n    DeinitializeRequestedAction |\n    DeinitializeSucceededAction |\n    DeinitializeFailedAction;\n\nexport type PaymentStrategyWidgetAction =\n    WidgetInteractionStartedAction |\n    WidgetInteractionFinishedAction |\n    WidgetInteractionFailedAction;\n\nexport interface ExecuteRequestedAction extends Action {\n    type: PaymentStrategyActionType.ExecuteRequested;\n}\n\nexport interface ExecuteSucceededAction extends Action {\n    type: PaymentStrategyActionType.ExecuteSucceeded;\n}\n\nexport interface ExecuteFailedAction extends Action<Error> {\n    type: PaymentStrategyActionType.ExecuteFailed;\n}\n\nexport interface FinalizeRequestedAction extends Action {\n    type: PaymentStrategyActionType.FinalizeRequested;\n}\n\nexport interface FinalizeSucceededAction extends Action {\n    type: PaymentStrategyActionType.FinalizeSucceeded;\n}\n\nexport interface FinalizeFailedAction extends Action<Error> {\n    type: PaymentStrategyActionType.FinalizeFailed;\n}\n\nexport interface InitializeRequestedAction extends Action {\n    type: PaymentStrategyActionType.InitializeRequested;\n}\n\nexport interface InitializeSucceededAction extends Action {\n    type: PaymentStrategyActionType.InitializeSucceeded;\n}\n\nexport interface InitializeFailedAction extends Action<Error> {\n    type: PaymentStrategyActionType.InitializeFailed;\n}\n\nexport interface DeinitializeRequestedAction extends Action {\n    type: PaymentStrategyActionType.DeinitializeRequested;\n}\n\nexport interface DeinitializeSucceededAction extends Action {\n    type: PaymentStrategyActionType.DeinitializeSucceeded;\n}\n\nexport interface DeinitializeFailedAction extends Action<Error> {\n    type: PaymentStrategyActionType.DeinitializeFailed;\n}\n\nexport interface WidgetInteractionStartedAction extends Action {\n    type: PaymentStrategyActionType.WidgetInteractionStarted;\n}\n\nexport interface WidgetInteractionFinishedAction extends Action {\n    type: PaymentStrategyActionType.WidgetInteractionFinished;\n}\n\nexport interface WidgetInteractionFailedAction extends Action<Error> {\n    type: PaymentStrategyActionType.WidgetInteractionFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nexport enum ShippingStrategyActionType {\n    UpdateAddressFailed = 'SHIPPING_STRATEGY_UPDATE_ADDRESS_FAILED',\n    UpdateAddressRequested = 'SHIPPING_STRATEGY_UPDATE_ADDRESS_REQUESTED',\n    UpdateAddressSucceeded = 'SHIPPING_STRATEGY_UPDATE_ADDRESS_SUCCEEDED',\n    SelectOptionFailed = 'SHIPPING_STRATEGY_SELECT_OPTION_FAILED',\n    SelectOptionRequested = 'SHIPPING_STRATEGY_SELECT_OPTION_REQUESTED',\n    SelectOptionSucceeded = 'SHIPPING_STRATEGY_SELECT_OPTION_SUCCEEDED',\n    InitializeFailed = 'SHIPPING_STRATEGY_INITIALIZE_FAILED',\n    InitializeRequested = 'SHIPPING_STRATEGY_INITIALIZE_REQUESTED',\n    InitializeSucceeded = 'SHIPPING_STRATEGY_INITIALIZE_SUCCEEDED',\n    DeinitializeFailed = 'SHIPPING_STRATEGY_DEINITIALIZE_FAILED',\n    DeinitializeRequested = 'SHIPPING_STRATEGY_DEINITIALIZE_REQUESTED',\n    DeinitializeSucceeded = 'SHIPPING_STRATEGY_DEINITIALIZE_SUCCEEDED',\n}\n\nexport type ShippingStrategyAction =\n    ShippingStrategyUpdateAddressAction |\n    ShippingStrategySelectOptionAction |\n    ShippingStrategyInitializeAction |\n    ShippingStrategyDeinitializeAction;\n\nexport type ShippingStrategyUpdateAddressAction =\n    UpdateAddressRequestedAction |\n    UpdateAddressSucceededAction |\n    UpdateAddressFailedAction;\n\nexport type ShippingStrategySelectOptionAction =\n    SelectOptionRequestedAction |\n    SelectOptionSucceededAction |\n    SelectOptionFailedAction;\n\nexport type ShippingStrategyInitializeAction =\n    InitializeRequestedAction |\n    InitializeSucceededAction |\n    InitializeFailedAction;\n\nexport type ShippingStrategyDeinitializeAction =\n    DeinitializeRequestedAction |\n    DeinitializeSucceededAction |\n    DeinitializeFailedAction;\n\nexport interface UpdateAddressRequestedAction extends Action {\n    type: ShippingStrategyActionType.UpdateAddressRequested;\n}\n\nexport interface UpdateAddressSucceededAction extends Action {\n    type: ShippingStrategyActionType.UpdateAddressSucceeded;\n}\n\nexport interface UpdateAddressFailedAction extends Action<Error> {\n    type: ShippingStrategyActionType.UpdateAddressFailed;\n}\n\nexport interface SelectOptionRequestedAction extends Action {\n    type: ShippingStrategyActionType.SelectOptionRequested;\n}\n\nexport interface SelectOptionSucceededAction extends Action {\n    type: ShippingStrategyActionType.SelectOptionSucceeded;\n}\n\nexport interface SelectOptionFailedAction extends Action<Error> {\n    type: ShippingStrategyActionType.SelectOptionFailed;\n}\n\nexport interface InitializeRequestedAction extends Action {\n    type: ShippingStrategyActionType.InitializeRequested;\n}\n\nexport interface InitializeSucceededAction extends Action {\n    type: ShippingStrategyActionType.InitializeSucceeded;\n}\n\nexport interface InitializeFailedAction extends Action<Error> {\n    type: ShippingStrategyActionType.InitializeFailed;\n}\n\nexport interface DeinitializeRequestedAction extends Action {\n    type: ShippingStrategyActionType.DeinitializeRequested;\n}\n\nexport interface DeinitializeSucceededAction extends Action {\n    type: ShippingStrategyActionType.DeinitializeSucceeded;\n}\n\nexport interface DeinitializeFailedAction extends Action<Error> {\n    type: ShippingStrategyActionType.DeinitializeFailed;\n}\n","module.exports = require(\"rxjs/Observable\");","import { Action } from '@bigcommerce/data-store';\n\nimport { Checkout } from '../checkout';\n\nexport enum CouponActionType {\n    ApplyCouponRequested = 'APPLY_COUPON_REQUESTED',\n    ApplyCouponSucceeded = 'APPLY_COUPON_SUCCEEDED',\n    ApplyCouponFailed = 'APPLY_COUPON_FAILED',\n\n    RemoveCouponRequested = 'REMOVE_COUPON_REQUESTED',\n    RemoveCouponSucceeded = 'REMOVE_COUPON_SUCCEEDED',\n    RemoveCouponFailed = 'REMOVE_COUPON_FAILED',\n}\n\nexport type CouponAction =\n    ApplyCouponAction |\n    RemoveCouponAction;\n\nexport type ApplyCouponAction =\n    ApplyCouponRequestedAction |\n    ApplyCouponSucceededAction |\n    ApplyCouponFailedAction;\n\nexport type RemoveCouponAction =\n    RemoveCouponRequestedAction |\n    RemoveCouponSucceededAction |\n    RemoveCouponFailedAction;\n\nexport interface ApplyCouponRequestedAction extends Action {\n    type: CouponActionType.ApplyCouponRequested;\n}\n\nexport interface ApplyCouponSucceededAction extends Action<Checkout> {\n    type: CouponActionType.ApplyCouponSucceeded;\n}\n\nexport interface ApplyCouponFailedAction extends Action<Error> {\n    type: CouponActionType.ApplyCouponFailed;\n}\n\nexport interface RemoveCouponRequestedAction extends Action {\n    type: CouponActionType.RemoveCouponRequested;\n}\n\nexport interface RemoveCouponSucceededAction extends Action<Checkout> {\n    type: CouponActionType.RemoveCouponSucceeded;\n}\n\nexport interface RemoveCouponFailedAction extends Action<Error> {\n    type: CouponActionType.RemoveCouponFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { Checkout } from '../checkout';\n\nexport enum GiftCertificateActionType {\n    ApplyGiftCertificateRequested = 'APPLY_GIFT_CERTIFICATE_REQUESTED',\n    ApplyGiftCertificateSucceeded = 'APPLY_GIFT_CERTIFICATE_SUCCEEDED',\n    ApplyGiftCertificateFailed = 'APPLY_GIFT_CERTIFICATE_FAILED',\n\n    RemoveGiftCertificateRequested = 'REMOVE_GIFT_CERTIFICATE_REQUESTED',\n    RemoveGiftCertificateSucceeded = 'REMOVE_GIFT_CERTIFICATE_SUCCEEDED',\n    RemoveGiftCertificateFailed = 'REMOVE_GIFT_CERTIFICATE_FAILED',\n}\n\nexport type GiftCertificateAction =\n    ApplyGiftCertificateAction |\n    RemoveGiftCertificateAction;\n\nexport type ApplyGiftCertificateAction =\n    ApplyGiftCertificateRequestedAction |\n    ApplyGiftCertificateSucceededAction |\n    ApplyGiftCertificateFailedAction;\n\nexport type RemoveGiftCertificateAction =\n    RemoveGiftCertificateRequestedAction |\n    RemoveGiftCertificateSucceededAction |\n    RemoveGiftCertificateFailedAction;\n\nexport interface ApplyGiftCertificateRequestedAction extends Action {\n    type: GiftCertificateActionType.ApplyGiftCertificateRequested;\n}\n\nexport interface ApplyGiftCertificateSucceededAction extends Action<Checkout> {\n    type: GiftCertificateActionType.ApplyGiftCertificateSucceeded;\n}\n\nexport interface ApplyGiftCertificateFailedAction extends Action<Error> {\n    type: GiftCertificateActionType.ApplyGiftCertificateFailed;\n}\n\nexport interface RemoveGiftCertificateRequestedAction extends Action {\n    type: GiftCertificateActionType.RemoveGiftCertificateRequested;\n}\n\nexport interface RemoveGiftCertificateSucceededAction extends Action<Checkout> {\n    type: GiftCertificateActionType.RemoveGiftCertificateSucceeded;\n}\n\nexport interface RemoveGiftCertificateFailedAction extends Action<Error> {\n    type: GiftCertificateActionType.RemoveGiftCertificateFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { LoadConfigAction } from '../config/config-actions';\n\nimport Checkout from './checkout';\n\nexport enum CheckoutActionType {\n    LoadCheckoutRequested = 'LOAD_CHECKOUT_REQUESTED',\n    LoadCheckoutSucceeded = 'LOAD_CHECKOUT_SUCCEEDED',\n    LoadCheckoutFailed = 'LOAD_CHECKOUT_FAILED',\n\n    UpdateCheckoutRequested = 'UPDATE_CHECKOUT_REQUESTED',\n    UpdateCheckoutSucceeded = 'UPDATE_CHECKOUT_SUCCEEDED',\n    UpdateCheckoutFailed = 'UPDATE_CHECKOUT_FAILED',\n}\n\nexport type CheckoutAction = LoadCheckoutAction | UpdateCheckoutAction;\n\nexport type LoadCheckoutAction =\n    LoadCheckoutRequestedAction |\n    LoadCheckoutSucceededAction |\n    LoadCheckoutFailedAction |\n    LoadConfigAction;\n\nexport type UpdateCheckoutAction =\n    UpdateCheckoutRequestedAction |\n    UpdateCheckoutSucceededAction |\n    UpdateCheckoutFailedAction;\n\nexport interface LoadCheckoutRequestedAction extends Action {\n    type: CheckoutActionType.LoadCheckoutRequested;\n}\n\nexport interface LoadCheckoutSucceededAction extends Action<Checkout> {\n    type: CheckoutActionType.LoadCheckoutSucceeded;\n}\n\nexport interface LoadCheckoutFailedAction extends Action<Error> {\n    type: CheckoutActionType.LoadCheckoutFailed;\n}\n\nexport interface UpdateCheckoutRequestedAction extends Action {\n    type: CheckoutActionType.UpdateCheckoutRequested;\n}\n\nexport interface UpdateCheckoutSucceededAction extends Action<Checkout> {\n    type: CheckoutActionType.UpdateCheckoutSucceeded;\n}\n\nexport interface UpdateCheckoutFailedAction extends Action<Error> {\n    type: CheckoutActionType.UpdateCheckoutFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport PaymentMethod from './payment-method';\nimport PaymentMethodMeta from './payment-method-meta';\n\nexport enum PaymentMethodActionType {\n    LoadPaymentMethodRequested = 'LOAD_PAYMENT_METHOD_REQUESTED',\n    LoadPaymentMethodSucceeded = 'LOAD_PAYMENT_METHOD_SUCCEEDED',\n    LoadPaymentMethodFailed = 'LOAD_PAYMENT_METHOD_FAILED',\n\n    LoadPaymentMethodsRequested = 'LOAD_PAYMENT_METHODS_REQUESTED',\n    LoadPaymentMethodsSucceeded = 'LOAD_PAYMENT_METHODS_SUCCEEDED',\n    LoadPaymentMethodsFailed = 'LOAD_PAYMENT_METHODS_FAILED',\n}\n\nexport type PaymentMethodAction = LoadPaymentMethodAction | LoadPaymentMethodsAction;\n\nexport type LoadPaymentMethodAction =\n    LoadPaymentMethodRequestedAction |\n    LoadPaymentMethodSucceededAction |\n    LoadPaymentMethodFailedAction;\n\nexport type LoadPaymentMethodsAction =\n    LoadPaymentMethodsRequestedAction |\n    LoadPaymentMethodsSucceededAction |\n    LoadPaymentMethodsFailedAction;\n\nexport interface LoadPaymentMethodRequestedAction extends Action {\n    type: PaymentMethodActionType.LoadPaymentMethodRequested;\n}\n\nexport interface LoadPaymentMethodSucceededAction extends Action<PaymentMethod> {\n    type: PaymentMethodActionType.LoadPaymentMethodSucceeded;\n}\n\nexport interface LoadPaymentMethodFailedAction extends Action<Error> {\n    type: PaymentMethodActionType.LoadPaymentMethodFailed;\n}\n\nexport interface LoadPaymentMethodsRequestedAction extends Action {\n    type: PaymentMethodActionType.LoadPaymentMethodsRequested;\n}\n\nexport interface LoadPaymentMethodsSucceededAction extends Action<PaymentMethod[], PaymentMethodMeta> {\n    type: PaymentMethodActionType.LoadPaymentMethodsSucceeded;\n}\n\nexport interface LoadPaymentMethodsFailedAction extends Action<Error> {\n    type: PaymentMethodActionType.LoadPaymentMethodsFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { Checkout } from '../checkout';\n\nexport enum BillingAddressActionType {\n    UpdateBillingAddressRequested = 'UPDATE_BILLING_ADDRESS_REQUESTED',\n    UpdateBillingAddressSucceeded = 'UPDATE_BILLING_ADDRESS_SUCCEEDED',\n    UpdateBillingAddressFailed = 'UPDATE_BILLING_ADDRESS_FAILED',\n\n    ContinueAsGuestRequested = 'CONTINUE_AS_GUEST_REQUESTED',\n    ContinueAsGuestSucceeded = 'CONTINUE_AS_GUEST_SUCCEEDED',\n    ContinueAsGuestFailed = 'CONTINUE_AS_GUEST_FAILED',\n}\n\nexport type BillingAddressAction =\n    ContinueAsGuestAction |\n    UpdateBillingAddressAction;\n\nexport type UpdateBillingAddressAction =\n    UpdateBillingAddressRequested |\n    UpdateBillingAddressSucceeded |\n    UpdateBillingAddressFailed;\n\nexport type ContinueAsGuestAction =\n    ContinueAsGuestRequested |\n    ContinueAsGuestSucceeded |\n    ContinueAsGuestFailed;\n\nexport interface UpdateBillingAddressRequested extends Action {\n    type: BillingAddressActionType.UpdateBillingAddressRequested;\n}\n\nexport interface UpdateBillingAddressSucceeded extends Action<Checkout> {\n    type: BillingAddressActionType.UpdateBillingAddressSucceeded;\n}\n\nexport interface UpdateBillingAddressFailed extends Action<Error> {\n    type: BillingAddressActionType.UpdateBillingAddressFailed;\n}\n\nexport interface ContinueAsGuestRequested extends Action {\n    type: BillingAddressActionType.ContinueAsGuestRequested;\n}\n\nexport interface ContinueAsGuestSucceeded extends Action<Checkout> {\n    type: BillingAddressActionType.ContinueAsGuestSucceeded;\n}\n\nexport interface ContinueAsGuestFailed extends Action<Error> {\n    type: BillingAddressActionType.ContinueAsGuestFailed;\n}\n","module.exports = require(\"rxjs/operators\");","module.exports = require(\"rxjs/observable/concat\");","module.exports = require(\"rxjs/observable/of\");","import { Action } from '@bigcommerce/data-store';\n\nimport { InternalOrderResponseData } from './internal-order-responses';\nimport Order from './order';\n\nexport enum OrderActionType {\n    LoadOrderRequested = 'LOAD_ORDER_REQUESTED',\n    LoadOrderSucceeded = 'LOAD_ORDER_SUCCEEDED',\n    LoadOrderFailed = 'LOAD_ORDER_FAILED',\n\n    LoadOrderPaymentsRequested = 'LOAD_ORDER_PAYMENTS_REQUESTED',\n    LoadOrderPaymentsSucceeded = 'LOAD_ORDER_PAYMENTS_SUCCEEDED',\n    LoadOrderPaymentsFailed = 'LOAD_ORDER_PAYMENTS_FAILED',\n\n    SubmitOrderRequested = 'SUBMIT_ORDER_REQUESTED',\n    SubmitOrderSucceeded = 'SUBMIT_ORDER_SUCCEEDED',\n    SubmitOrderFailed = 'SUBMIT_ORDER_FAILED',\n\n    FinalizeOrderRequested = 'FINALIZE_ORDER_REQUESTED',\n    FinalizeOrderSucceeded = 'FINALIZE_ORDER_SUCCEEDED',\n    FinalizeOrderFailed = 'FINALIZE_ORDER_FAILED',\n}\n\nexport type OrderAction = LoadOrderAction |\n    LoadOrderPaymentsAction |\n    SubmitOrderAction |\n    FinalizeOrderAction;\n\nexport type LoadOrderPaymentsAction = LoadOrderPaymentsRequestedAction |\n    LoadOrderPaymentsSucceededAction |\n    LoadOrderPaymentsFailedAction;\n\nexport type LoadOrderAction =\n    LoadOrderRequestedAction |\n    LoadOrderSucceededAction |\n    LoadOrderFailedAction;\n\nexport type SubmitOrderAction =\n    SubmitOrderRequestedAction |\n    SubmitOrderSucceededAction |\n    SubmitOrderFailedAction |\n    LoadOrderAction;\n\nexport type FinalizeOrderAction =\n    FinalizeOrderRequestedAction |\n    FinalizeOrderSucceededAction |\n    FinalizeOrderFailedAction |\n    LoadOrderAction;\n\nexport interface LoadOrderRequestedAction extends Action {\n    type: OrderActionType.LoadOrderRequested;\n}\n\nexport interface LoadOrderSucceededAction extends Action<Order> {\n    type: OrderActionType.LoadOrderSucceeded;\n}\n\nexport interface LoadOrderFailedAction extends Action<Error> {\n    type: OrderActionType.LoadOrderFailed;\n}\n\nexport interface LoadOrderPaymentsRequestedAction extends Action {\n    type: OrderActionType.LoadOrderPaymentsRequested;\n}\n\nexport interface LoadOrderPaymentsSucceededAction extends Action<Order> {\n    type: OrderActionType.LoadOrderPaymentsSucceeded;\n}\n\nexport interface LoadOrderPaymentsFailedAction extends Action<Error> {\n    type: OrderActionType.LoadOrderPaymentsFailed;\n}\n\nexport interface SubmitOrderRequestedAction extends Action {\n    type: OrderActionType.SubmitOrderRequested;\n}\n\nexport interface SubmitOrderSucceededAction extends Action<InternalOrderResponseData> {\n    type: OrderActionType.SubmitOrderSucceeded;\n}\n\nexport interface SubmitOrderFailedAction extends Action<Error> {\n    type: OrderActionType.SubmitOrderFailed;\n}\n\nexport interface FinalizeOrderRequestedAction extends Action {\n    type: OrderActionType.FinalizeOrderRequested;\n}\n\nexport interface FinalizeOrderSucceededAction extends Action<InternalOrderResponseData> {\n    type: OrderActionType.FinalizeOrderSucceeded;\n}\n\nexport interface FinalizeOrderFailedAction extends Action<Error> {\n    type: OrderActionType.FinalizeOrderFailed;\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport StandardError from './standard-error';\n\nconst DEFAULT_RESPONSE = {\n    body: {},\n    headers: {},\n    status: 0,\n    statusText: '',\n};\n\nexport default class RequestError extends StandardError {\n    body: any;\n    headers: { [key: string]: any; };\n    status: number;\n    statusText: string;\n\n    constructor({ body = {}, headers, status, statusText }: Response = DEFAULT_RESPONSE, message?: string) {\n        super(joinErrors(body.errors) || body.detail || body.title || message || 'An unexpected error has occurred.');\n\n        this.type = 'request';\n        this.body = body;\n        this.headers = headers;\n        this.status = status;\n        this.statusText = statusText;\n    }\n}\n\nfunction joinErrors(errors: Array<string | { code: string, message: string }>): string | undefined {\n    if (!Array.isArray(errors)) {\n        return;\n    }\n\n    return errors.reduce((result: string[], error) => {\n        if (typeof error === 'string') {\n            return [...result, error];\n        }\n\n        if (error && error.message) {\n            return [...result, error.message];\n        }\n\n        return result;\n    }, []).join(' ');\n}\n","import { find, some, values } from 'lodash';\n\nimport { selector } from '../common/selector';\n\nimport CheckoutButtonState from './checkout-button-state';\n\n@selector\nexport default class CheckoutButtonSelector {\n    constructor(\n        private _checkoutButton: CheckoutButtonState\n    ) {}\n\n    getState(): CheckoutButtonState {\n        return this._checkoutButton;\n    }\n\n    isInitializing(methodId?: string): boolean {\n        if (methodId) {\n            const method = this._checkoutButton.statuses[methodId];\n\n            return (method && method.isInitializing) === true;\n        }\n\n        return some(this._checkoutButton.statuses, { isInitializing: true });\n    }\n\n    isDeinitializing(methodId?: string): boolean {\n        if (methodId) {\n            const method = this._checkoutButton.statuses[methodId];\n\n            return (method && method.isDeinitializing) === true;\n        }\n\n        return some(this._checkoutButton.statuses, { isDeinitializing: true });\n    }\n\n    getInitializeError(methodId?: string): Error | undefined {\n        const method = methodId ?\n            this._checkoutButton.errors[methodId] :\n            find(values(this._checkoutButton.errors), method => !!(method && method.initializeError));\n\n        return method && method.initializeError;\n    }\n\n    getDeinitializeError(methodId?: string): Error | undefined {\n        const method = methodId ?\n            this._checkoutButton.errors[methodId] :\n            find(values(this._checkoutButton.errors), method => !!(method && method.deinitializeError));\n\n        return method && method.deinitializeError;\n    }\n}\n","import { combineReducers, Action } from '@bigcommerce/data-store';\n\nimport { CheckoutButtonAction, CheckoutButtonActionType } from './checkout-button-actions';\nimport CheckoutButtonState, { CheckoutButtonErrorsState, CheckoutButtonStatusesState } from './checkout-button-state';\n\nconst DEFAULT_STATE: CheckoutButtonState = {\n    errors: {},\n    statuses: {},\n};\n\nexport default function checkoutButtonReducer(\n    state: CheckoutButtonState = DEFAULT_STATE,\n    action: Action\n): CheckoutButtonState {\n    if (!action.meta || !action.meta.methodId) {\n        return state;\n    }\n\n    const reducer = combineReducers<CheckoutButtonState>({\n        errors: combineReducers({\n            [action.meta.methodId]: errorsReducer,\n        }),\n        statuses: combineReducers({\n            [action.meta.methodId]: statusesReducer,\n        }),\n    });\n\n    return reducer(state, action);\n}\n\nfunction errorsReducer(\n    errors: CheckoutButtonErrorsState = DEFAULT_STATE.errors,\n    action: CheckoutButtonAction\n): CheckoutButtonErrorsState {\n    switch (action.type) {\n    case CheckoutButtonActionType.InitializeButtonRequested:\n    case CheckoutButtonActionType.InitializeButtonSucceeded:\n        return {\n            ...errors,\n            initializeError: undefined,\n        };\n\n    case CheckoutButtonActionType.InitializeButtonFailed:\n        return {\n            ...errors,\n            initializeError: action.payload,\n        };\n\n    case CheckoutButtonActionType.DeinitializeButtonRequested:\n    case CheckoutButtonActionType.DeinitializeButtonSucceeded:\n        return {\n            ...errors,\n            deinitializeError: undefined,\n        };\n\n    case CheckoutButtonActionType.DeinitializeButtonFailed:\n        return {\n            ...errors,\n            deinitializeError: action.payload,\n        };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: CheckoutButtonStatusesState = DEFAULT_STATE.statuses,\n    action: CheckoutButtonAction\n): CheckoutButtonStatusesState {\n    switch (action.type) {\n    case CheckoutButtonActionType.InitializeButtonRequested:\n        return {\n            ...statuses,\n            isInitializing: true,\n        };\n\n    case CheckoutButtonActionType.InitializeButtonFailed:\n    case CheckoutButtonActionType.InitializeButtonSucceeded:\n        return {\n            ...statuses,\n            isInitializing: false,\n        };\n\n    case CheckoutButtonActionType.DeinitializeButtonRequested:\n        return {\n            ...statuses,\n            isDeinitializing: true,\n        };\n\n    case CheckoutButtonActionType.DeinitializeButtonFailed:\n    case CheckoutButtonActionType.DeinitializeButtonSucceeded:\n        return {\n            ...statuses,\n            isDeinitializing: false,\n        };\n\n    default:\n        return statuses;\n    }\n}\n","export interface CompareOptions {\n    keyFilter?(key: string): boolean;\n}\n\nexport default function isEqual(objectA: any, objectB: any, options?: CompareOptions): boolean {\n    if (objectA === objectB) {\n        return true;\n    }\n\n    if (objectA && objectB && typeof objectA === 'object' && typeof objectB === 'object') {\n        if (Array.isArray(objectA) && Array.isArray(objectB)) {\n            return isArrayEqual(objectA, objectB, options);\n        }\n\n        if (Array.isArray(objectA) || Array.isArray(objectB)) {\n            return false;\n        }\n\n        if ((objectA instanceof Date) && (objectB instanceof Date)) {\n            return isDateEqual(objectA, objectB);\n        }\n\n        if ((objectA instanceof Date) || (objectB instanceof Date)) {\n            return false;\n        }\n\n        if ((objectA instanceof RegExp) && (objectB instanceof RegExp)) {\n            return isRegExpEqual(objectA, objectB);\n        }\n\n        if ((objectA instanceof RegExp) || (objectB instanceof RegExp)) {\n            return false;\n        }\n\n        return isObjectEqual(objectA, objectB, options);\n    }\n\n    return objectA === objectB;\n}\n\nfunction isRegExpEqual(objectA: RegExp, objectB: RegExp): boolean {\n    return objectA.toString() === objectB.toString();\n}\n\nfunction isDateEqual(objectA: Date, objectB: Date): boolean {\n    return objectA.getTime() === objectB.getTime();\n}\n\nfunction isArrayEqual(objectA: any[], objectB: any[], options?: CompareOptions): boolean {\n    if (objectA.length !== objectB.length) {\n        return false;\n    }\n\n    for (let index = 0, length = objectA.length; index < length; index++) {\n        if (!isEqual(objectA[index], objectB[index], options)) {\n            return false;\n        }\n    }\n\n    return true;\n}\n\nfunction isObjectEqual(\n    objectA: { [key: string]: any },\n    objectB: { [key: string]: any },\n    options?: CompareOptions\n): boolean {\n    const filter = options && options.keyFilter;\n    const keysA = filter ? Object.keys(objectA).filter(filter) : Object.keys(objectA);\n    const keysB = filter ? Object.keys(objectB).filter(filter) : Object.keys(objectB);\n\n    if (keysA.length !== keysB.length) {\n        return false;\n    }\n\n    for (let index = 0, length = keysA.length; index < length; index++) {\n        const key = keysA[index];\n\n        if (!objectB.hasOwnProperty(key)) {\n            return false;\n        }\n\n        if (!isEqual(objectA[key], objectB[key], options)) {\n            return false;\n        }\n    }\n\n    return true;\n}\n","import { memoize } from 'lodash';\n\nimport { bindDecorator, isEqual, isPrivate } from '../utility';\n\nimport CacheKeyResolver from './cache-key-resolver';\n\n/**\n * Decorates a class by patching all of its methods to cache their return values\n * and return them if they are called again with the same set of parameters. The\n * decorator also binds all the methods to the calling instance so it can be\n * destructed.\n */\nexport default function selectorDecorator<T extends Constructor<object>>(target: T): T {\n    const decoratedTarget = class extends target {};\n\n    Object.getOwnPropertyNames(target.prototype)\n        .forEach(key => {\n            const descriptor = Object.getOwnPropertyDescriptor(target.prototype, key);\n\n            if (!descriptor || key === 'constructor') {\n                return;\n            }\n\n            Object.defineProperty(\n                decoratedTarget.prototype,\n                key,\n                selectorMethodDecorator(target.prototype, key, descriptor)\n            );\n        });\n\n    return decoratedTarget;\n}\n\nfunction selectorMethodDecorator<T extends Method>(target: object, key: string, descriptor: TypedPropertyDescriptor<T>): TypedPropertyDescriptor<T> {\n    if (typeof descriptor.value !== 'function') {\n        return descriptor;\n    }\n\n    let resolver = new CacheKeyResolver();\n    let method = descriptor.value;\n    let memoizedMethod = memoize(method, (...args) => resolver.getKey(...args));\n\n    return bindDecorator(target, key, {\n        get() {\n            const value = ((...args: any[]) => {\n                const cachedValue = memoizedMethod.call(this, ...args);\n\n                if (resolver.getUsedCount(...args) === 1) {\n                    return cachedValue;\n                }\n\n                const newValue = method.call(this, ...args);\n\n                if (isEqual(newValue, cachedValue, { keyFilter: key => !isPrivate(key) })) {\n                    return cachedValue;\n                }\n\n                memoizedMethod.cache.set(resolver.getKey(...args), newValue);\n\n                return newValue;\n            }) as T;\n\n            Object.defineProperty(this, key, { ...descriptor, value });\n\n            return value;\n        },\n        set(value) {\n            resolver = new CacheKeyResolver();\n            method = value;\n            memoizedMethod = memoize(method, (...args) => resolver.getKey(...args));\n        },\n    });\n}\n\nexport type Constructor<T> = new (...args: any[]) => T;\ntype Method = (...args: any[]) => any;\n","export const LOAD_INSTRUMENTS_REQUESTED = 'LOAD_INSTRUMENTS_REQUESTED';\nexport const LOAD_INSTRUMENTS_SUCCEEDED = 'LOAD_INSTRUMENTS_SUCCEEDED';\nexport const LOAD_INSTRUMENTS_FAILED = 'LOAD_INSTRUMENTS_FAILED';\n\nexport const DELETE_INSTRUMENT_REQUESTED = 'DELETE_INSTRUMENT_REQUESTED';\nexport const DELETE_INSTRUMENT_SUCCEEDED = 'DELETE_INSTRUMENT_SUCCEEDED';\nexport const DELETE_INSTRUMENT_FAILED = 'DELETE_INSTRUMENT_FAILED';\n","import { Action } from '@bigcommerce/data-store';\n\nimport { LoadPaymentMethodAction } from '../payment';\n\nexport enum CheckoutButtonActionType {\n    InitializeButtonFailed = 'INITIALIZE_BUTTON_FAILED',\n    InitializeButtonRequested = 'INITIALIZE_BUTTON_REQUESTED',\n    InitializeButtonSucceeded = 'INITIALIZE_BUTTON_SUCCEEDED',\n\n    DeinitializeButtonFailed = 'DEINITIALIZE_BUTTON_FAILED',\n    DeinitializeButtonRequested = 'DEINITIALIZE_BUTTON_REQUESTED',\n    DeinitializeButtonSucceeded = 'DEINITIALIZE_BUTTON_SUCCEEDED',\n}\n\nexport type CheckoutButtonAction = InitializeButtonAction | DeinitializeButtonAction;\n\nexport type InitializeButtonAction =\n    InitializeButtonRequestedAction |\n    InitializeButtonSucceededAction |\n    InitializeButtonFailedAction |\n    LoadPaymentMethodAction;\n\nexport type DeinitializeButtonAction =\n    DeinitializeButtonRequestedAction |\n    DeinitializeButtonSucceededAction |\n    DeinitializeButtonFailedAction;\n\nexport interface CheckoutButtonActionMeta {\n    methodId: string;\n}\n\nexport interface InitializeButtonRequestedAction extends Action<undefined, CheckoutButtonActionMeta> {\n    type: CheckoutButtonActionType.InitializeButtonRequested;\n}\n\nexport interface InitializeButtonSucceededAction extends Action<undefined, CheckoutButtonActionMeta> {\n    type: CheckoutButtonActionType.InitializeButtonSucceeded;\n}\n\nexport interface InitializeButtonFailedAction extends Action<Error, CheckoutButtonActionMeta> {\n    type: CheckoutButtonActionType.InitializeButtonFailed;\n}\n\nexport interface DeinitializeButtonRequestedAction extends Action<undefined, CheckoutButtonActionMeta> {\n    type: CheckoutButtonActionType.DeinitializeButtonRequested;\n}\n\nexport interface DeinitializeButtonSucceededAction extends Action<undefined, CheckoutButtonActionMeta> {\n    type: CheckoutButtonActionType.DeinitializeButtonSucceeded;\n}\n\nexport interface DeinitializeButtonFailedAction extends Action<Error, CheckoutButtonActionMeta> {\n    type: CheckoutButtonActionType.DeinitializeButtonFailed;\n}\n","import { keyBy, reduce, some } from 'lodash';\n\nimport { Checkout } from '../checkout';\nimport { mapToInternalCoupon, mapToInternalGiftCertificate } from '../coupon';\nimport { mapToDiscountNotifications } from '../promotion';\n\nimport { AmountTransformer } from '.';\nimport InternalCart from './internal-cart';\nimport mapToInternalLineItems from './map-to-internal-line-items';\n\nexport default function mapToInternalCart(checkout: Checkout): InternalCart {\n    const decimalPlaces = checkout.cart.currency.decimalPlaces;\n    const amountTransformer = new AmountTransformer(decimalPlaces);\n\n    return {\n        id: checkout.cart.id,\n        items: mapToInternalLineItems(checkout.cart.lineItems, decimalPlaces),\n        currency: checkout.cart.currency.code,\n        coupon: {\n            discountedAmount: reduce(checkout.cart.coupons, (sum, coupon) => {\n                return sum + coupon.discountedAmount;\n            }, 0),\n            coupons: checkout.cart.coupons.map(mapToInternalCoupon),\n        },\n        discount: {\n            amount: checkout.cart.discountAmount,\n            integerAmount: amountTransformer.toInteger(checkout.cart.discountAmount),\n        },\n        discountNotifications: mapToDiscountNotifications(checkout.promotions),\n        giftCertificate: {\n            totalDiscountedAmount: reduce(checkout.giftCertificates, (sum, certificate) => {\n                return sum + certificate.used;\n            }, 0),\n            appliedGiftCertificates: keyBy(checkout.giftCertificates.map(mapToInternalGiftCertificate), 'code'),\n        },\n        shipping: {\n            amount: checkout.shippingCostTotal,\n            integerAmount: amountTransformer.toInteger(checkout.shippingCostTotal),\n            amountBeforeDiscount: checkout.shippingCostBeforeDiscount,\n            integerAmountBeforeDiscount: amountTransformer.toInteger(checkout.shippingCostBeforeDiscount),\n            required: some(checkout.cart.lineItems.physicalItems, lineItem => lineItem.isShippingRequired),\n        },\n        subtotal: {\n            amount: checkout.subtotal,\n            integerAmount: amountTransformer.toInteger(checkout.subtotal),\n        },\n        storeCredit: {\n            amount: checkout.customer ? checkout.customer.storeCredit : 0,\n        },\n        taxSubtotal: {\n            amount: checkout.taxTotal,\n            integerAmount: amountTransformer.toInteger(checkout.taxTotal),\n        },\n        taxes: checkout.taxes,\n        taxTotal: {\n            amount: checkout.taxTotal,\n            integerAmount: amountTransformer.toInteger(checkout.taxTotal),\n        },\n        handling: {\n            amount: checkout.handlingCostTotal,\n            integerAmount: amountTransformer.toInteger(checkout.handlingCostTotal),\n        },\n        grandTotal: {\n            amount: checkout.grandTotal,\n            integerAmount: amountTransformer.toInteger(checkout.grandTotal),\n        },\n    };\n}\n","import { DiscountNotification } from '../discount';\n\nimport { Promotion } from '.';\n\nexport default function mapToDiscountNotifications(promotions?: Promotion[]): DiscountNotification[] {\n    const notifications: DiscountNotification[] = [];\n\n    (promotions || []).forEach(promotion => {\n        (promotion.banners || []).forEach(banner => {\n            notifications.push({\n                placeholders: [],\n                discountType: null,\n                message: '',\n                messageHtml: banner.text,\n            });\n        });\n    });\n\n    return notifications;\n}\n","export const INITIALIZE_REMOTE_BILLING_REQUESTED = 'INITIALIZE_REMOTE_BILLING_REQUESTED';\nexport const INITIALIZE_REMOTE_BILLING_SUCCEEDED = 'INITIALIZE_REMOTE_BILLING_SUCCEEDED';\nexport const INITIALIZE_REMOTE_BILLING_FAILED = 'INITIALIZE_REMOTE_BILLING_FAILED';\n\nexport const INITIALIZE_REMOTE_SHIPPING_REQUESTED = 'INITIALIZE_REMOTE_SHIPPING_REQUESTED';\nexport const INITIALIZE_REMOTE_SHIPPING_SUCCEEDED = 'INITIALIZE_REMOTE_SHIPPING_SUCCEEDED';\nexport const INITIALIZE_REMOTE_SHIPPING_FAILED = 'INITIALIZE_REMOTE_SHIPPING_FAILED';\n\nexport const INITIALIZE_REMOTE_PAYMENT_REQUESTED = 'INITIALIZE_REMOTE_PAYMENT_REQUESTED';\nexport const INITIALIZE_REMOTE_PAYMENT_SUCCEEDED = 'INITIALIZE_REMOTE_PAYMENT_SUCCEEDED';\nexport const INITIALIZE_REMOTE_PAYMENT_FAILED = 'INITIALIZE_REMOTE_PAYMENT_FAILED';\n\nexport const LOAD_REMOTE_SETTINGS_REQUESTED = 'LOAD_REMOTE_SETTINGS_REQUESTED';\nexport const LOAD_REMOTE_SETTINGS_SUCCEEDED = 'LOAD_REMOTE_SETTINGS_SUCCEEDED';\nexport const LOAD_REMOTE_SETTINGS_FAILED = 'LOAD_REMOTE_SETTINGS_FAILED';\n\nexport const SIGN_OUT_REMOTE_CUSTOMER_REQUESTED = 'SIGN_OUT_REMOTE_CUSTOMER_REQUESTED';\nexport const SIGN_OUT_REMOTE_CUSTOMER_SUCCEEDED = 'SIGN_OUT_REMOTE_CUSTOMER_SUCCEEDED';\nexport const SIGN_OUT_REMOTE_CUSTOMER_FAILED = 'SIGN_OUT_REMOTE_CUSTOMER_FAILED';\n\nexport const UPDATE_REMOTE_CHECKOUT = 'UPDATE_REMOTE_CHECKOUT';\n","export enum EmbeddedCheckoutEventType {\n    CheckoutComplete = 'CHECKOUT_COMPLETE',\n    CheckoutError = 'CHECKOUT_ERROR',\n    CheckoutLoaded = 'CHECKOUT_LOADED',\n    FrameError = 'FRAME_ERROR',\n    FrameLoaded = 'FRAME_LOADED',\n}\n\nexport interface EmbeddedCheckoutEventMap {\n    [EmbeddedCheckoutEventType.CheckoutComplete]: EmbeddedCheckoutCompleteEvent;\n    [EmbeddedCheckoutEventType.CheckoutError]: EmbeddedCheckoutErrorEvent;\n    [EmbeddedCheckoutEventType.CheckoutLoaded]: EmbeddedCheckoutLoadedEvent;\n    [EmbeddedCheckoutEventType.FrameError]: EmbeddedCheckoutFrameErrorEvent;\n    [EmbeddedCheckoutEventType.FrameLoaded]: EmbeddedCheckoutFrameLoadedEvent;\n}\n\nexport type EmbeddedCheckoutEvent = (\n    EmbeddedCheckoutCompleteEvent |\n    EmbeddedCheckoutErrorEvent |\n    EmbeddedCheckoutFrameErrorEvent |\n    EmbeddedCheckoutFrameLoadedEvent |\n    EmbeddedCheckoutLoadedEvent\n);\n\nexport interface EmbeddedCheckoutCompleteEvent {\n    type: EmbeddedCheckoutEventType.CheckoutComplete;\n}\n\nexport interface EmbeddedCheckoutErrorEvent {\n    type: EmbeddedCheckoutEventType.CheckoutError;\n    payload: EmbeddedCheckoutError;\n}\n\nexport interface EmbeddedCheckoutLoadedEvent {\n    type: EmbeddedCheckoutEventType.CheckoutLoaded;\n}\n\nexport interface EmbeddedCheckoutFrameErrorEvent {\n    type: EmbeddedCheckoutEventType.FrameError;\n    payload: EmbeddedCheckoutError;\n}\n\nexport interface EmbeddedCheckoutFrameLoadedEvent {\n    type: EmbeddedCheckoutEventType.FrameLoaded;\n}\n\nexport interface EmbeddedCheckoutError {\n    message: string;\n    type?: string;\n    subtype?: string;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport Config from './config';\n\nexport enum ConfigActionType {\n    LoadConfigRequested = 'LOAD_CONFIG_REQUESTED',\n    LoadConfigSucceeded = 'LOAD_CONFIG_SUCCEEDED',\n    LoadConfigFailed = 'LOAD_CONFIG_FAILED',\n}\n\nexport type LoadConfigAction =\n    LoadConfigRequestedAction |\n    LoadConfigSucceededAction |\n    LoadConfigFailedAction;\n\nexport interface LoadConfigRequestedAction extends Action {\n    type: ConfigActionType.LoadConfigRequested;\n}\n\nexport interface LoadConfigSucceededAction extends Action<Config> {\n    type: ConfigActionType.LoadConfigSucceeded;\n}\n\nexport interface LoadConfigFailedAction extends Action<Error> {\n    type: ConfigActionType.LoadConfigFailed;\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { Response } from '@bigcommerce/request-sender';\nimport { Observable } from 'rxjs/Observable';\nimport { Observer } from 'rxjs/Observer';\n\nimport { Checkout, InternalCheckoutSelectors } from '../checkout';\nimport { MissingDataError, MissingDataErrorType, StandardError } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\nimport { GuestCredentials } from '../customer';\n\nimport { BillingAddressRequestSender } from '.';\nimport { BillingAddressUpdateRequestBody } from './billing-address';\nimport { BillingAddressActionType, ContinueAsGuestAction, UpdateBillingAddressAction } from './billing-address-actions';\n\nexport default class BillingAddressActionCreator {\n    constructor(\n        private _requestSender: BillingAddressRequestSender\n    ) {}\n\n    continueAsGuest(\n        credentials: GuestCredentials,\n        options?: RequestOptions\n    ): ThunkAction<ContinueAsGuestAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<ContinueAsGuestAction>) => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            const customer = state.customer.getCustomer();\n\n            if (customer && !customer.isGuest) {\n                throw new StandardError('Cannot continue as guest: customer is logged in.');\n            }\n\n            const billingAddress = state.billingAddress.getBillingAddress();\n\n            let billingAddressRequestBody;\n\n            if (!billingAddress) {\n                billingAddressRequestBody = credentials;\n            } else {\n                const { country, ...existingBillingAddressRequestBody } = billingAddress;\n\n                billingAddressRequestBody = {\n                    ...existingBillingAddressRequestBody,\n                    ...credentials,\n                };\n            }\n\n            observer.next(createAction(BillingAddressActionType.ContinueAsGuestRequested));\n\n            this._createOrUpdateBillingAddress(checkout.id, billingAddressRequestBody, options)\n                .then(({ body }) => {\n                    observer.next(createAction(BillingAddressActionType.ContinueAsGuestSucceeded, body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(BillingAddressActionType.ContinueAsGuestFailed, response));\n                });\n        });\n    }\n\n    updateAddress(\n        address: Partial<BillingAddressUpdateRequestBody>,\n        options?: RequestOptions\n    ): ThunkAction<UpdateBillingAddressAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<UpdateBillingAddressAction>) => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(BillingAddressActionType.UpdateBillingAddressRequested));\n\n            const billingAddress = state.billingAddress.getBillingAddress();\n\n            // If email is not present in the address provided by the client, then\n            // fall back to the stored email as it could have been set separately\n            // using a convenience method. We can't rely on billingAddress having\n            // an ID to consider that there's a preexisting email, as billingAddress\n            // object from Order doesn't have an ID.\n            const billingAddressRequestBody = {\n                ...address,\n                email: typeof address.email === 'undefined' && billingAddress ? billingAddress.email : address.email,\n            };\n\n            if (billingAddress && billingAddress.id) {\n                billingAddressRequestBody.id = billingAddress.id;\n            }\n\n            this._createOrUpdateBillingAddress(checkout.id, billingAddressRequestBody, options)\n                .then(({ body }) => {\n                    observer.next(createAction(BillingAddressActionType.UpdateBillingAddressSucceeded, body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(BillingAddressActionType.UpdateBillingAddressFailed, response));\n                });\n        });\n    }\n\n    private _createOrUpdateBillingAddress(\n        checkoutId: string,\n        address: Partial<BillingAddressUpdateRequestBody>,\n        options?: RequestOptions\n    ): Promise<Response<Checkout>> {\n        if (!address.id) {\n            return this._requestSender.createAddress(checkoutId, address, options);\n        }\n\n        return this._requestSender.updateAddress(checkoutId, address, options);\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { AddressRequestBody } from '../address';\nimport { Checkout } from '../checkout';\nimport { ContentType, RequestOptions } from '../common/http-request';\n\nimport { BillingAddressUpdateRequestBody } from './billing-address';\n\nconst DEFAULT_PARAMS = {\n    include: [\n        'cart.lineItems.physicalItems.options',\n        'cart.lineItems.digitalItems.options',\n        'customer',\n        'promotions.banners',\n    ].join(','),\n};\n\nexport default class BillingAddressRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    createAddress(checkoutId: string, address: Partial<AddressRequestBody>, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/billing-address`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.post(url, { body: address, params: DEFAULT_PARAMS, headers, timeout });\n    }\n\n    updateAddress(checkoutId: string, address: Partial<BillingAddressUpdateRequestBody>, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const { id, ...body } = address;\n        const url = `/api/storefront/checkouts/${checkoutId}/billing-address/${id}`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.put(url, { params: DEFAULT_PARAMS, body, headers, timeout });\n    }\n}\n","import { createAction, createErrorAction, Action } from '@bigcommerce/data-store';\nimport { Observable } from 'rxjs/Observable';\nimport { Observer } from 'rxjs/Observer';\n\nimport { RequestOptions } from '../common/http-request';\n\nimport Country from './country';\nimport * as actionTypes from './country-action-types';\nimport CountryRequestSender from './country-request-sender';\n\n/**\n * @todo Convert this file into TypeScript properly\n */\nexport default class CountryActionCreator {\n    constructor(\n        private _countryRequestSender: CountryRequestSender\n    ) {}\n\n    loadCountries(options?: RequestOptions): Observable<Action<Country[]>> {\n        return Observable.create((observer: Observer<Action<Country[]>>) => {\n            observer.next(createAction(actionTypes.LOAD_COUNTRIES_REQUESTED));\n\n            this._countryRequestSender.loadCountries(options)\n                .then(response => {\n                    observer.next(createAction(actionTypes.LOAD_COUNTRIES_SUCCEEDED, response.body.data));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(actionTypes.LOAD_COUNTRIES_FAILED, response));\n                });\n        });\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { RequestOptions } from '../common/http-request';\n\nimport { CountryResponseBody } from './country-responses';\n\nexport default class CountryRequestSender {\n    constructor(\n        private _requestSender: RequestSender,\n        private _config: { locale?: string }\n    ) {}\n\n    loadCountries({ timeout }: RequestOptions = {}): Promise<Response<CountryResponseBody>> {\n        const url = '/internalapi/v1/store/countries';\n        const headers = {\n            'Accept-Language': this._config.locale,\n        };\n\n        return this._requestSender.get(url, { headers, timeout });\n    }\n}\n","import { StandardError } from '../../common/error/errors';\n\nexport default class OrderFinalizationNotRequiredError extends StandardError {\n    constructor() {\n        super('The current order does not need to be finalized at this stage.');\n\n        this.type = 'order_finalization_not_required';\n    }\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { concat } from 'rxjs/observable/concat';\nimport { defer } from 'rxjs/observable/defer';\nimport { empty } from 'rxjs/observable/empty';\nimport { of } from 'rxjs/observable/of';\nimport { catchError } from 'rxjs/operators';\nimport { Observable } from 'rxjs/Observable';\nimport { Observer } from 'rxjs/Observer';\n\nimport { InternalCheckoutSelectors, ReadableCheckoutStore } from '../checkout';\nimport { throwErrorAction } from '../common/error';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\nimport { LoadOrderPaymentsAction, OrderActionCreator, OrderRequestBody } from '../order';\nimport { OrderFinalizationNotRequiredError } from '../order/errors';\n\nimport Payment from './payment';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from './payment-request-options';\nimport {\n    PaymentStrategyActionType,\n    PaymentStrategyDeinitializeAction,\n    PaymentStrategyExecuteAction,\n    PaymentStrategyFinalizeAction,\n    PaymentStrategyInitializeAction,\n    PaymentStrategyWidgetAction,\n} from './payment-strategy-actions';\nimport PaymentStrategyRegistry from './payment-strategy-registry';\nimport { PaymentStrategy } from './strategies';\n\nexport default class PaymentStrategyActionCreator {\n    constructor(\n        private _strategyRegistry: PaymentStrategyRegistry,\n        private _orderActionCreator: OrderActionCreator\n    ) {}\n\n    execute(payload: OrderRequestBody, options?: RequestOptions): ThunkAction<PaymentStrategyExecuteAction, InternalCheckoutSelectors> {\n        return store => new Observable((observer: Observer<PaymentStrategyExecuteAction>) => {\n            const state = store.getState();\n            const { payment = {} as Payment, useStoreCredit } = payload;\n            const meta = { methodId: payment.methodId };\n\n            let strategy: PaymentStrategy;\n\n            if (state.payment.isPaymentDataRequired(useStoreCredit)) {\n                const method = state.paymentMethods.getPaymentMethod(payment.methodId, payment.gatewayId);\n\n                if (!method) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                strategy = this._strategyRegistry.getByMethod(method);\n            } else {\n                strategy = this._strategyRegistry.get('nopaymentdatarequired');\n            }\n\n            observer.next(createAction(PaymentStrategyActionType.ExecuteRequested, undefined, meta));\n\n            strategy\n                .execute(payload, { ...options, methodId: payment.methodId, gatewayId: payment.gatewayId })\n                .then(() => {\n                    observer.next(createAction(PaymentStrategyActionType.ExecuteSucceeded, undefined, meta));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(PaymentStrategyActionType.ExecuteFailed, error, meta));\n                });\n        });\n    }\n\n    finalize(options?: RequestOptions): ThunkAction<PaymentStrategyFinalizeAction, InternalCheckoutSelectors> {\n        return store => concat(\n            of(createAction(PaymentStrategyActionType.FinalizeRequested)),\n            this._loadOrderPaymentsIfNeeded(store, options),\n            defer(() => {\n                const state = store.getState();\n                const payment = state.payment.getPaymentId();\n\n                if (!payment) {\n                    throw new OrderFinalizationNotRequiredError();\n                }\n\n                const method = state.paymentMethods.getPaymentMethod(payment.providerId, payment.gatewayId);\n\n                if (!method) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                return this._strategyRegistry.getByMethod(method)\n                    .finalize({ ...options, methodId: method.id, gatewayId: method.gateway })\n                    .then(() => createAction(PaymentStrategyActionType.FinalizeSucceeded, undefined, { methodId: payment.providerId }));\n            })\n        ).pipe(\n            catchError(error => {\n                const state = store.getState();\n                const payment = state.payment.getPaymentId();\n\n                return throwErrorAction(PaymentStrategyActionType.FinalizeFailed, error, { methodId: payment && payment.providerId });\n            })\n        );\n    }\n\n    initialize(options: PaymentInitializeOptions): ThunkAction<PaymentStrategyInitializeAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<PaymentStrategyInitializeAction>) => {\n            const state = store.getState();\n            const { methodId, gatewayId } = options;\n            const method = state.paymentMethods.getPaymentMethod(methodId, gatewayId);\n\n            if (!method) {\n                throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n            }\n\n            observer.next(createAction(PaymentStrategyActionType.InitializeRequested, undefined, { methodId }));\n\n            this._strategyRegistry.getByMethod(method)\n                .initialize({ ...options, methodId, gatewayId })\n                .then(() => {\n                    observer.next(createAction(PaymentStrategyActionType.InitializeSucceeded, undefined, { methodId }));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(PaymentStrategyActionType.InitializeFailed, error, { methodId }));\n                });\n        });\n    }\n\n    deinitialize(options: PaymentRequestOptions): ThunkAction<PaymentStrategyDeinitializeAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<PaymentStrategyDeinitializeAction>) => {\n            const state = store.getState();\n            const { methodId, gatewayId } = options;\n            const method = state.paymentMethods.getPaymentMethod(methodId, gatewayId);\n\n            if (!method) {\n                throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n            }\n\n            observer.next(createAction(PaymentStrategyActionType.DeinitializeRequested, undefined, { methodId }));\n\n            this._strategyRegistry.getByMethod(method)\n                .deinitialize({ ...options, methodId, gatewayId })\n                .then(() => {\n                    observer.next(createAction(PaymentStrategyActionType.DeinitializeSucceeded, undefined, { methodId }));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(PaymentStrategyActionType.DeinitializeFailed, error, { methodId }));\n                });\n        });\n    }\n\n    widgetInteraction(method: () => Promise<any>, options?: PaymentRequestOptions): ThunkAction<PaymentStrategyWidgetAction> {\n        return store => Observable.create((observer: Observer<PaymentStrategyWidgetAction>) => {\n            const methodId = options && options.methodId;\n            const meta = { methodId };\n\n            observer.next(createAction(PaymentStrategyActionType.WidgetInteractionStarted, undefined, meta));\n\n            method().then(() => {\n                observer.next(createAction(PaymentStrategyActionType.WidgetInteractionFinished, undefined, meta));\n                observer.complete();\n            })\n            .catch(error => {\n                observer.error(createErrorAction(PaymentStrategyActionType.WidgetInteractionFailed, error, meta));\n            });\n        });\n    }\n\n    private _loadOrderPaymentsIfNeeded(store: ReadableCheckoutStore, options?: RequestOptions): Observable<LoadOrderPaymentsAction> {\n        const state = store.getState();\n        const checkout = state.checkout.getCheckout();\n\n        if (checkout && checkout.orderId) {\n            return this._orderActionCreator.loadOrderPayments(checkout.orderId, options);\n        }\n\n        return empty();\n    }\n}\n","import { StandardError } from '../../common/error/errors';\n\nexport default class CartChangedError extends StandardError {\n    constructor() {\n        super('An update to your shopping cart has been detected and your available shipping costs have been updated.');\n\n        this.type = 'cart_changed';\n    }\n}\n","import { isEqual, map } from 'lodash';\n\nimport { CartComparator } from '../cart';\nimport { CartChangedError } from '../cart/errors';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\nimport { Coupon, GiftCertificate } from '../coupon';\n\nimport Checkout from './checkout';\nimport CheckoutRequestSender from './checkout-request-sender';\n\nexport default class CheckoutValidator {\n    constructor(\n        private _checkoutRequestSender: CheckoutRequestSender\n    ) {}\n\n    validate(checkout?: Checkout, options?: RequestOptions): Promise<void> {\n        if (!checkout) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n        }\n\n        return this._checkoutRequestSender.loadCheckout(checkout.id, options)\n            .then(response => {\n                const comparator = new CartComparator();\n\n                if (checkout.grandTotal === response.body.grandTotal\n                    && this._compareCoupons(checkout.coupons, response.body.coupons)\n                    && this._compareGiftCertificates(checkout.giftCertificates, response.body.giftCertificates)\n                    && comparator.isEqual(checkout.cart, response.body.cart)\n                ) {\n                    return;\n                }\n\n                throw new CartChangedError();\n            });\n    }\n\n    private _compareCoupons(couponsA: Coupon[], couponsB: Coupon[]): boolean {\n        return isEqual(map(couponsA, 'code'), map(couponsB, 'code'));\n    }\n\n    private _compareGiftCertificates(giftCertificatesA: GiftCertificate[], giftCertificatesB: GiftCertificate[]): boolean {\n        return isEqual(map(giftCertificatesA, 'code'), map(giftCertificatesB, 'code'));\n    }\n}\n","import { PaymentInstrument, VaultedInstrument } from './payment';\n\nexport default function isVaultedInstrument(instrument: PaymentInstrument): instrument is VaultedInstrument {\n    return Boolean((instrument as VaultedInstrument).instrumentId);\n}\n","export default interface SquarePaymentForm {\n    build(): void;\n    requestCardNonce(): void;\n    setPostalCode(postalCode: string): void;\n}\n\nexport interface SquarePaymentFormConstructor {\n    new(options: SquareFormOptions): SquarePaymentForm;\n}\n\nexport interface SquareFormOptions {\n    applicationId: string;\n    env: string;\n    locationId: string;\n    inputClass?: string;\n    inputStyles?: string[];\n    callbacks?: SquareFormCallbacks;\n    cardNumber: SquareFormElement;\n    cvv: SquareFormElement;\n    expirationDate: SquareFormElement;\n    postalCode: SquareFormElement;\n    masterpass: SquareFormElement;\n}\nexport interface LineItem {\n    label: string;\n    amount: string;\n    pending: boolean;\n}\n\nexport interface SquarePaymentRequest {\n    requestShippingAddress: boolean;\n    requestBillingInfo: boolean;\n    shippingContact?: Contact;\n    countryCode: string;\n    currencyCode: string;\n    lineItems?: LineItem[];\n    total: LineItem;\n}\n\nexport interface NonceGenerationError {\n    type: string;\n    message: string;\n    field: string;\n}\n\nexport interface CardData {\n    card_brand: CardBrand;\n    last_4: number;\n    exp_month: number;\n    exp_year: number;\n    billing_postal_code: string;\n    digital_wallet_type: DigitalWalletType;\n}\n\nexport interface Contact {\n    familyName: string;\n    givenName: string;\n    email: string;\n    country: string;\n    countryName: string;\n    region: string;\n    city: string;\n    addressLines: string[];\n    postalCode: string;\n    phone: string;\n}\n\nexport enum CardBrand {\n    americanExpress = 'AMERICAN_EXPRESS',\n    discover = 'DISCOVER',\n    discoverDiners = 'DISCOVER_DINERS',\n    JCB = 'JCB',\n    masterCard = 'MASTERCARD',\n    unionPay = 'CHINA_UNIONPAY',\n    unknown = 'OTHER_BRAND',\n    visa = 'VISA',\n    squareGift = 'SQUARE_GIFT_CARD',\n}\n\nexport enum DigitalWalletType {\n    applePay = 'APPLEPAY',\n    masterpass = 'MASTERPASS',\n    none = 'NONE',\n}\n\n/**\n * Configures any form element provided by Square payment.\n */\nexport interface SquareFormElement {\n    /**\n     * The ID of the container which the form element should insert into.\n     */\n    elementId: string;\n\n    /**\n     * The placeholder text to use for the form element, if provided.\n     */\n    placeholder?: string;\n}\n\nexport interface SquareFormCallbacks {\n    paymentFormLoaded?(form: SquarePaymentForm): void;\n    unsupportedBrowserDetected?(): void;\n    cardNonceResponseReceived?(\n        errors?: NonceGenerationError[],\n        nonce?: string,\n        cardData?: CardData,\n        billingContact?: Contact,\n        shippingContact?: Contact): void;\n    methodsSupported?(methods: { [key: string]: boolean }): void;\n    createPaymentRequest?(): void;\n}\n\nexport type SquareFormFactory = (options: SquareFormOptions) => SquarePaymentForm;\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { pick } from 'lodash';\nimport { concat } from 'rxjs/observable/concat';\nimport { from } from 'rxjs/observable/from';\nimport { of } from 'rxjs/observable/of';\nimport { catchError, switchMap } from 'rxjs/operators';\nimport { Observable } from 'rxjs/Observable';\nimport { Observer } from 'rxjs/Observer';\n\nimport { mapToInternalAddress } from '../address';\nimport { mapToInternalCart } from '../cart';\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { throwErrorAction } from '../common/error';\nimport { InvalidArgumentError, StandardError } from '../common/error/errors';\nimport { mapToInternalCustomer } from '../customer';\nimport { mapToInternalOrder, OrderActionCreator } from '../order';\nimport { mapToInternalShippingOption } from '../shipping';\n\nimport isVaultedInstrument from './is-vaulted-instrument';\nimport Payment from './payment';\nimport { InitializeOffsitePaymentAction, PaymentActionType, SubmitPaymentAction } from './payment-actions';\nimport PaymentMethod from './payment-method';\nimport PaymentMethodSelector from './payment-method-selector';\nimport PaymentRequestBody from './payment-request-body';\nimport PaymentRequestSender from './payment-request-sender';\n\nexport default class PaymentActionCreator {\n    constructor(\n        private _paymentRequestSender: PaymentRequestSender,\n        private _orderActionCreator: OrderActionCreator\n    ) {}\n\n    submitPayment(payment: Payment): ThunkAction<SubmitPaymentAction, InternalCheckoutSelectors> {\n        return store => concat(\n            of(createAction(PaymentActionType.SubmitPaymentRequested)),\n            from(this._paymentRequestSender.submitPayment(\n                this._getPaymentRequestBody(payment, store.getState())\n            ))\n                .pipe(\n                    switchMap(({ body }) => concat(\n                        this._orderActionCreator.loadCurrentOrder()(store),\n                        of(createAction(PaymentActionType.SubmitPaymentSucceeded, body))\n                    ))\n                )\n        ).pipe(\n            catchError(error => throwErrorAction(PaymentActionType.SubmitPaymentFailed, error))\n        );\n    }\n\n    initializeOffsitePayment(payment: Payment): ThunkAction<InitializeOffsitePaymentAction, InternalCheckoutSelectors> {\n        return store =>\n            Observable.create((observer: Observer<InitializeOffsitePaymentAction>) => {\n                observer.next(createAction(PaymentActionType.InitializeOffsitePaymentRequested));\n\n                return this._paymentRequestSender.initializeOffsitePayment(\n                    this._getPaymentRequestBody(payment, store.getState())\n                )\n                    .then(() => {\n                        observer.next(createAction(PaymentActionType.InitializeOffsitePaymentSucceeded));\n                        observer.complete();\n                    })\n                    .catch(() => {\n                        observer.error(createErrorAction(PaymentActionType.InitializeOffsitePaymentFailed));\n                    });\n            });\n    }\n\n    private _getPaymentRequestBody(payment: Payment, state: InternalCheckoutSelectors): PaymentRequestBody {\n        if (!payment.paymentData) {\n            throw new InvalidArgumentError('Unable to construct payment request because `payment.paymentData` is not provided.');\n        }\n\n        const billingAddress = state.billingAddress.getBillingAddress();\n        const checkout = state.checkout.getCheckout();\n        const customer = state.customer.getCustomer();\n        const order = state.order.getOrder();\n        const paymentMethod = this._getPaymentMethod(payment, state.paymentMethods);\n        const shippingAddress = state.shippingAddress.getShippingAddress();\n        const consignments = state.consignments.getConsignments();\n        const shippingOption = state.consignments.getShippingOption();\n        const storeConfig = state.config.getStoreConfig();\n        const contextConfig = state.config.getContextConfig();\n        const instrumentMeta = state.instruments.getInstrumentsMeta();\n        const paymentMeta = state.paymentMethods.getPaymentMethodsMeta();\n        const orderMeta = state.order.getOrderMeta();\n        const internalCustomer = customer && billingAddress && mapToInternalCustomer(customer, billingAddress);\n\n        const authToken = instrumentMeta && isVaultedInstrument(payment.paymentData) ?\n            `${state.payment.getPaymentToken()}, ${instrumentMeta.vaultAccessToken}` :\n            state.payment.getPaymentToken();\n\n        if (!authToken) {\n            throw new StandardError();\n        }\n\n        return {\n            authToken,\n            paymentMethod,\n            customer: internalCustomer,\n            billingAddress: billingAddress && mapToInternalAddress(billingAddress),\n            shippingAddress: shippingAddress && mapToInternalAddress(shippingAddress, consignments),\n            shippingOption: shippingOption && mapToInternalShippingOption(shippingOption, true),\n            cart: checkout && mapToInternalCart(checkout),\n            order: order && mapToInternalOrder(order, orderMeta),\n            orderMeta,\n            payment: payment.paymentData,\n            quoteMeta: {\n                request: {\n                    ...paymentMeta,\n                    geoCountryCode: contextConfig && contextConfig.geoCountryCode,\n                },\n            },\n            source: 'bigcommerce-checkout-js-sdk',\n            store: pick(storeConfig && storeConfig.storeProfile, [\n                'storeHash',\n                'storeId',\n                'storeLanguage',\n                'storeName',\n            ]),\n        };\n    }\n\n    private _getPaymentMethod(payment: Payment, paymentMethodSelector: PaymentMethodSelector): PaymentMethod | undefined {\n        const paymentMethod = paymentMethodSelector.getPaymentMethod(payment.methodId, payment.gatewayId);\n\n        if (!paymentMethod) {\n            return;\n        }\n\n        if (paymentMethod.method === 'multi-option' && !paymentMethod.gateway) {\n            return { ...paymentMethod, gateway: paymentMethod.id };\n        }\n\n        if (paymentMethod.initializationData && paymentMethod.initializationData.gateway) {\n            return { ...paymentMethod, id: paymentMethod.initializationData.gateway };\n        }\n\n        return paymentMethod;\n    }\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport PaymentRequestBody from './payment-request-body';\n\n/**\n * @todo Convert this file into TypeScript properly\n */\nexport default class PaymentRequestSender {\n    /**\n     * @constructor\n     * @param {BigpayClient} client\n     */\n    constructor(\n        private _client: any\n    ) {}\n\n    submitPayment(payload: PaymentRequestBody): Promise<Response> {\n        return new Promise((resolve, reject) => {\n            this._client.submitPayment(payload, (error: any, response: any) => {\n                if (error) {\n                    reject(this._transformResponse(error));\n                } else {\n                    resolve(this._transformResponse(response));\n                }\n            });\n        });\n    }\n\n    initializeOffsitePayment(payload: PaymentRequestBody): Promise<void> {\n        return new Promise(() => {\n            this._client.initializeOffsitePayment(payload);\n        });\n    }\n\n    private _transformResponse(response: any): Response {\n        return {\n            headers: {},\n            body: response.data,\n            status: response.status,\n            statusText: response.statusText,\n        };\n    }\n}\n","import { ReadableDataStore } from '@bigcommerce/data-store';\nimport { some } from 'lodash';\n\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { Registry } from '../common/registry';\nimport { RegistryOptions } from '../common/registry/registry';\n\nimport PaymentMethod from './payment-method';\nimport * as paymentMethodTypes from './payment-method-types';\nimport PaymentStrategy from './strategies/payment-strategy';\n\nexport default class PaymentStrategyRegistry extends Registry<PaymentStrategy> {\n    constructor(\n        private _store: ReadableDataStore<InternalCheckoutSelectors>,\n        options?: PaymentStrategyRegistryOptions\n    ) {\n        super(options);\n    }\n\n    getByMethod(paymentMethod?: PaymentMethod): PaymentStrategy {\n        if (!paymentMethod) {\n            return this.get();\n        }\n\n        const token = this._getToken(paymentMethod);\n        const cacheToken = paymentMethod.gateway || paymentMethod.id;\n\n        return this.get(token, cacheToken);\n    }\n\n    private _getToken(paymentMethod: PaymentMethod): string {\n        const methodId = paymentMethod.gateway || paymentMethod.id;\n\n        if (this.hasFactory(methodId)) {\n            return methodId;\n        }\n\n        if (paymentMethod.type === paymentMethodTypes.OFFLINE) {\n            return 'offline';\n        }\n\n        if (this._isLegacyMethod(paymentMethod)) {\n            return 'legacy';\n        }\n\n        if (paymentMethod.type === paymentMethodTypes.HOSTED) {\n            return 'offsite';\n        }\n\n        return 'creditcard';\n    }\n\n    private _isLegacyMethod(paymentMethod: PaymentMethod): boolean {\n        const config = this._store.getState().config.getStoreConfig();\n\n        if (!config) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n        }\n\n        const { clientSidePaymentProviders } = config.paymentSettings;\n\n        if (!clientSidePaymentProviders || paymentMethod.gateway === 'adyen') {\n            return false;\n        }\n\n        return !some(clientSidePaymentProviders, id =>\n            paymentMethod.id === id || paymentMethod.gateway === id\n        );\n    }\n}\n\nexport interface PaymentStrategyRegistryOptions extends RegistryOptions {\n    clientSidePaymentProviders?: string[];\n}\n","import { InvalidArgumentError } from '../../common/error/errors';\n\nexport default class PaymentArgumentInvalidError extends InvalidArgumentError {\n    constructor(invalidFields?: string[]) {\n        let message = 'Unable to submit payment for the order because the payload is invalid.';\n\n        if (invalidFields) {\n            message = `${message} Make sure the following fields are provided correctly: ${invalidFields.join(', ')}.`;\n        }\n\n        super(message);\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../checkout';\nimport { OrderRequestBody } from '../../order';\nimport { OrderFinalizationNotRequiredError } from '../../order/errors';\n\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../payment-request-options';\n\nexport default abstract class PaymentStrategy {\n    protected _isInitialized = false;\n\n    constructor(\n        protected _store: CheckoutStore\n    ) {}\n\n    abstract execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors>;\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    initialize(options?: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        this._isInitialized = true;\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        this._isInitialized = false;\n\n        return Promise.resolve(this._store.getState());\n    }\n}\n","import { CheckoutStore, CheckoutValidator, InternalCheckoutSelectors } from '../../../checkout';\nimport { MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { RemoteCheckoutActionCreator } from '../../../remote-checkout';\nimport { PaymentArgumentInvalidError } from '../../errors';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethod from '../../payment-method';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nimport AfterpayScriptLoader from './afterpay-script-loader';\nimport AfterpaySdk from './afterpay-sdk';\n\nexport default class AfterpayPaymentStrategy extends PaymentStrategy {\n    private _afterpaySdk?: AfterpaySdk;\n\n    constructor(\n        store: CheckoutStore,\n        private _checkoutValidator: CheckoutValidator,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _afterpayScriptLoader: AfterpayScriptLoader\n    ) {\n        super(store);\n    }\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        if (this._isInitialized) {\n            return super.initialize(options);\n        }\n\n        const state = this._store.getState();\n        const paymentMethod = state.paymentMethods.getPaymentMethod(options.methodId, options.gatewayId);\n        const config = state.config.getStoreConfig();\n        const storeCountryName = config ? config.storeProfile.storeCountry : '';\n\n        if (!paymentMethod) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        return this._afterpayScriptLoader.load(paymentMethod, this._mapCountryToISO2(storeCountryName))\n            .then(afterpaySdk => {\n                this._afterpaySdk = afterpaySdk;\n            })\n            .then(() => super.initialize(options));\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        if (!this._isInitialized) {\n            return super.deinitialize(options);\n        }\n\n        if (this._afterpaySdk) {\n            this._afterpaySdk = undefined;\n        }\n\n        return super.deinitialize(options);\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const paymentId = payload.payment && payload.payment.gatewayId;\n\n        if (!paymentId) {\n            throw new PaymentArgumentInvalidError(['payment.gatewayId']);\n        }\n\n        const useStoreCredit = !!payload.useStoreCredit;\n        const state = this._store.getState();\n        const config = state.config.getStoreConfig();\n        const storeCountryName = config ? config.storeProfile.storeCountry : '';\n\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.initializePayment(paymentId, { useStoreCredit })\n        )\n            .then(state => this._checkoutValidator.validate(state.checkout.getCheckout(), options))\n            .then(() => this._store.dispatch(\n                this._paymentMethodActionCreator.loadPaymentMethod(paymentId, options)\n            ))\n            .then(state => this._displayModal(storeCountryName, state.paymentMethods.getPaymentMethod(paymentId)))\n            // Afterpay will handle the rest of the flow so return a promise that doesn't really resolve\n            .then(() => new Promise<never>(() => {}));\n    }\n\n    finalize(options: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(this._remoteCheckoutActionCreator.loadSettings(options.methodId))\n            .then(state => {\n                const payment = state.payment.getPaymentId();\n                const config = state.config.getContextConfig();\n                const afterpay = state.remoteCheckout.getCheckout('afterpay');\n\n                if (!payment) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                }\n\n                if (!config || !config.payment.token) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n                }\n\n                if (!afterpay || !afterpay.settings) {\n                    throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n                }\n\n                const orderPayload = {\n                    useStoreCredit: afterpay.settings.useStoreCredit,\n                };\n\n                const paymentPayload = {\n                    methodId: payment.providerId,\n                    paymentData: { nonce: config.payment.token },\n                };\n\n                return this._store.dispatch(this._orderActionCreator.submitOrder(orderPayload, options))\n                    .then(() => this._store.dispatch(this._paymentActionCreator.submitPayment(paymentPayload)));\n            });\n    }\n\n    private _displayModal(countryName: string, paymentMethod?: PaymentMethod): void {\n        if (!this._afterpaySdk || !paymentMethod || !paymentMethod.clientToken) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        this._afterpaySdk.initialize({ countryCode: this._mapCountryToISO2(countryName)});\n        this._afterpaySdk.display({ token: paymentMethod.clientToken });\n    }\n\n    private _mapCountryToISO2(countryName: string): string {\n        switch (countryName) {\n        case 'Australia':\n            return 'AU';\n\n        case 'New Zealand':\n            return 'NZ';\n\n        case 'United States':\n            return 'US';\n\n        default:\n            return 'AU';\n        }\n    }\n}\n","import { noop } from 'lodash';\n\nimport { isInternalAddressEqual, mapFromInternalAddress, mapToInternalAddress } from '../../../address';\nimport { BillingAddressActionCreator } from '../../../billing';\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType, RequestError, StandardError } from '../../../common/error/errors';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { RemoteCheckoutActionCreator } from '../../../remote-checkout';\nimport { RemoteCheckoutSynchronizationError } from '../../../remote-checkout/errors';\nimport PaymentMethod from '../../payment-method';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nimport AmazonPayOrderReference from './amazon-pay-order-reference';\nimport AmazonPayScriptLoader from './amazon-pay-script-loader';\nimport AmazonPayWallet, { AmazonPayWalletOptions } from './amazon-pay-wallet';\nimport AmazonPayWidgetError from './amazon-pay-widget-error';\nimport AmazonPayWindow from './amazon-pay-window';\n\nexport default class AmazonPayPaymentStrategy extends PaymentStrategy {\n    private _paymentMethod?: PaymentMethod;\n    private _walletOptions?: AmazonPayPaymentInitializeOptions;\n    private _window: AmazonPayWindow;\n\n    constructor(\n        store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _billingAddressActionCreator: BillingAddressActionCreator,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _scriptLoader: AmazonPayScriptLoader\n    ) {\n        super(store);\n\n        this._window = window;\n    }\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        if (this._isInitialized) {\n            return super.initialize(options);\n        }\n\n        const { amazon: amazonOptions, methodId } = options;\n        const state = this._store.getState();\n        const paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n        if (!amazonOptions) {\n            throw new InvalidArgumentError('Unable to initialize payment because \"options.amazon\" argument is not provided.');\n        }\n\n        if (!paymentMethod) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        this._walletOptions = amazonOptions;\n        this._paymentMethod = paymentMethod;\n\n        return new Promise((resolve, reject) => {\n            const onReady = () => {\n                this._createWallet(amazonOptions)\n                    .then(resolve)\n                    .catch(reject);\n            };\n\n            this._scriptLoader.loadWidget(paymentMethod, onReady)\n                .catch(reject);\n        })\n            .then(() => super.initialize(options));\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        if (!this._isInitialized) {\n            return super.deinitialize(options);\n        }\n\n        this._walletOptions = undefined;\n\n        return super.deinitialize(options);\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const referenceId = this._getOrderReferenceId();\n\n        if (!referenceId) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        if (!payload.payment) {\n            throw new InvalidArgumentError('Unable to proceed because \"payload.payment.methodId\" argument is not provided.');\n        }\n\n        const { payment: { paymentData, ...paymentPayload }, useStoreCredit = false } = payload;\n\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.initializePayment(paymentPayload.methodId, { referenceId, useStoreCredit })\n        )\n            .then(() => this._store.dispatch(\n                this._orderActionCreator.submitOrder({\n                    ...payload,\n                    payment: paymentPayload,\n                }, options)\n            ))\n            .catch(error => {\n                if (error instanceof RequestError && error.body.type === 'provider_widget_error' && this._walletOptions) {\n                    return this._createWallet(this._walletOptions)\n                        .then(() => Promise.reject(error));\n                }\n\n                return Promise.reject(error);\n            });\n    }\n\n    private _getMerchantId(): string | undefined {\n        return this._paymentMethod && this._paymentMethod.config.merchantId;\n    }\n\n    private _getOrderReferenceId(): string | undefined {\n        const state = this._store.getState();\n        const amazon = state.remoteCheckout.getCheckout('amazon');\n\n        return amazon ? amazon.referenceId : undefined;\n    }\n\n    private _createWallet(options: AmazonPayPaymentInitializeOptions): Promise<AmazonPayWallet> {\n        return new Promise((resolve, reject) => {\n            const { container, onError = noop, onPaymentSelect = noop, onReady = noop } = options;\n            const referenceId = this._getOrderReferenceId();\n            const merchantId = this._getMerchantId();\n\n            if (!document.getElementById(container)) {\n                return reject(new InvalidArgumentError('Unable to create AmazonPay Wallet widget without valid container ID.'));\n            }\n\n            if (!this._window.OffAmazonPayments) {\n                return reject(new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized));\n            }\n\n            if (!merchantId) {\n                return reject(new MissingDataError(MissingDataErrorType.MissingPaymentMethod));\n            }\n\n            const walletOptions: AmazonPayWalletOptions = {\n                amazonOrderReferenceId: referenceId,\n                design: { designMode: 'responsive' },\n                scope: 'payments:billing_address payments:shipping_address payments:widget profile',\n                sellerId: merchantId,\n                onError: error => {\n                    reject(error);\n                    onError(error);\n                },\n                onPaymentSelect: orderReference => {\n                    this._synchronizeBillingAddress()\n                        .then(() => onPaymentSelect(orderReference))\n                        .catch(onError);\n                },\n                onReady: orderReference => {\n                    resolve();\n                    onReady(orderReference);\n                },\n            };\n\n            if (!walletOptions.amazonOrderReferenceId) {\n                walletOptions.onReady = orderReference => {\n                    this._updateOrderReference(orderReference)\n                        .then(() => {\n                            resolve();\n                            onReady(orderReference);\n                        })\n                        .catch(onError);\n                };\n            }\n\n            const widget = new this._window.OffAmazonPayments.Widgets.Wallet(walletOptions);\n\n            widget.bind(container);\n\n            return widget;\n        });\n    }\n\n    private _synchronizeBillingAddress(): Promise<InternalCheckoutSelectors> {\n        const referenceId = this._getOrderReferenceId();\n        const methodId = this._paymentMethod && this._paymentMethod.id;\n\n        if (!methodId || !referenceId) {\n            throw new RemoteCheckoutSynchronizationError();\n        }\n\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.initializeBilling(methodId, { referenceId })\n        )\n            .then(state => {\n                const amazon = state.remoteCheckout.getCheckout('amazon');\n                const remoteAddress = amazon && amazon.billing && amazon.billing.address;\n                const billingAddress = state.billingAddress.getBillingAddress();\n                const internalBillingAddress = billingAddress && mapToInternalAddress(billingAddress);\n\n                if (remoteAddress === false) {\n                    throw new RemoteCheckoutSynchronizationError();\n                }\n\n                if (!remoteAddress || isInternalAddressEqual(remoteAddress, internalBillingAddress || {})) {\n                    return this._store.getState();\n                }\n\n                return this._store.dispatch(\n                    this._billingAddressActionCreator.updateAddress(mapFromInternalAddress(remoteAddress))\n                );\n            });\n    }\n\n    private _updateOrderReference(orderReference: AmazonPayOrderReference): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.updateCheckout('amazon', {\n                referenceId: orderReference.getAmazonOrderReferenceId(),\n            })\n        );\n    }\n}\n\n/**\n * A set of options that are required to initialize the Amazon Pay payment\n * method.\n *\n * When AmazonPay is initialized, a widget will be inserted into the DOM. The\n * widget has a list of payment options for the customer to choose from.\n */\nexport interface AmazonPayPaymentInitializeOptions {\n    /**\n     * The ID of a container which the payment widget should insert into.\n     */\n    container: string;\n\n    /**\n     * A callback that gets called if unable to initialize the widget or select\n     * one of the payment options.\n     *\n     * @param error - The error object describing the failure.\n     */\n    onError?(error: AmazonPayWidgetError | StandardError): void;\n\n    /**\n     * A callback that gets called when the customer selects one of the payment\n     * options provided by the widget.\n     *\n     * @param reference - The order reference provided by Amazon.\n     */\n    onPaymentSelect?(reference: AmazonPayOrderReference): void;\n\n    /**\n     * A callback that gets called when the widget is loaded and ready to be\n     * interacted with.\n     *\n     * @param reference - The order reference provided by Amazon.\n     */\n    onReady?(reference: AmazonPayOrderReference): void;\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../checkout';\nimport { OrderActionCreator, OrderRequestBody } from '../../order';\nimport { PaymentArgumentInvalidError } from '../errors';\nimport PaymentActionCreator from '../payment-action-creator';\nimport { PaymentRequestOptions } from '../payment-request-options';\n\nimport PaymentStrategy from './payment-strategy';\n\nexport default class CreditCardPaymentStrategy extends PaymentStrategy {\n    constructor(\n        store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator\n    ) {\n        super(store);\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = payload;\n        const paymentData = payment && payment.paymentData;\n\n        if (!payment || !paymentData) {\n            throw new PaymentArgumentInvalidError(['payment.paymentData']);\n        }\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder(order, options))\n            .then(() =>\n                this._store.dispatch(this._paymentActionCreator.submitPayment({ ...payment, paymentData }))\n            );\n    }\n}\n","import { StandardError } from '../../common/error/errors';\n\nexport default class PaymentMethodCancelledError extends StandardError {\n    constructor() {\n        super('Payment process was cancelled.');\n\n        this.type = 'payment_cancelled';\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport {\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    NotInitializedError,\n    NotInitializedErrorType\n} from '../../../common/error/errors';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { RemoteCheckoutActionCreator } from '../../../remote-checkout';\nimport { PaymentMethodCancelledError } from '../../errors';\nimport PaymentMethodInvalidError from '../../errors/payment-method-invalid-error';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nimport KlarnaCredit, { KlarnaLoadResponse } from './klarna-credit';\nimport KlarnaScriptLoader from './klarna-script-loader';\n\nexport default class KlarnaPaymentStrategy extends PaymentStrategy {\n    private _klarnaCredit?: KlarnaCredit;\n    private _unsubscribe?: (() => void);\n\n    constructor(\n        store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _klarnaScriptLoader: KlarnaScriptLoader\n    ) {\n        super(store);\n    }\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        if (this._isInitialized) {\n            return super.initialize(options);\n        }\n\n        return this._klarnaScriptLoader.load()\n            .then(klarnaCredit => { this._klarnaCredit = klarnaCredit; })\n            .then(() => {\n                this._unsubscribe = this._store.subscribe(\n                    () => this._isInitialized && this._loadWidget(options),\n                    state => {\n                        const checkout = state.checkout.getCheckout();\n\n                        return checkout && checkout.grandTotal;\n                    }\n                );\n\n                return this._loadWidget(options);\n            })\n            .then(() => super.initialize(options));\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        if (this._unsubscribe) {\n            this._unsubscribe();\n        }\n\n        return super.deinitialize(options);\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        if (!payload.payment) {\n            throw new InvalidArgumentError('Unable to proceed because \"payload.payment\" argument is not provided.');\n        }\n\n        const { payment: { paymentData, ...paymentPayload } } = payload;\n\n        return this._authorize()\n            .then(({ authorization_token: authorizationToken }) => this._store.dispatch(\n                this._remoteCheckoutActionCreator.initializePayment(paymentPayload.methodId, { authorizationToken })\n            ))\n            .then(() => this._store.dispatch(\n                this._orderActionCreator.submitOrder({\n                    ...payload,\n                    payment: paymentPayload,\n                    // Note: API currently doesn't support using Store Credit with Klarna.\n                    // To prevent deducting customer's store credit, set it as false.\n                    useStoreCredit: false,\n                }, options)\n            ));\n    }\n\n    private _loadWidget(options: PaymentInitializeOptions): Promise<KlarnaLoadResponse> {\n        if (!options.klarna) {\n            throw new InvalidArgumentError('Unable to load widget because \"options.klarna\" argument is not provided.');\n        }\n\n        const { methodId, klarna: { container, onLoad } } = options;\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => new Promise<KlarnaLoadResponse>((resolve, reject) => {\n                const paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                if (!paymentMethod) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                if (!this._klarnaCredit || !paymentMethod.clientToken) {\n                    throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n                }\n\n                this._klarnaCredit.init({ client_token: paymentMethod.clientToken });\n\n                this._klarnaCredit.load({ container }, response => {\n                    if (onLoad) {\n                        onLoad(response);\n                    }\n\n                    if (!response.show_form) {\n                        reject(new PaymentMethodInvalidError());\n                    } else {\n                        resolve(response);\n                    }\n                });\n            }));\n    }\n\n    private _authorize(): Promise<any> {\n        return new Promise((resolve, reject) => {\n            if (!this._klarnaCredit) {\n                throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n            }\n\n            this._klarnaCredit.authorize({}, res => {\n                if (res.approved) {\n                    return resolve(res);\n                }\n\n                if (res.show_form) {\n                    return reject(new PaymentMethodCancelledError());\n                }\n\n                reject(new PaymentMethodInvalidError());\n            });\n        });\n    }\n}\n\n/**\n * A set of options that are required to initialize the Klarna payment method.\n *\n * When Klarna is initialized, a widget will be inserted into the DOM. The\n * widget has a list of payment options for the customer to choose from.\n */\nexport interface KlarnaPaymentInitializeOptions {\n    /**\n     * The ID of a container which the payment widget should insert into.\n     */\n    container: string;\n\n    /**\n     * A callback that gets called when the widget is loaded and ready to be\n     * interacted with.\n     *\n     * @param response - The result of the initialization. It indicates whether\n     * or not the widget is loaded successfully.\n     */\n    onLoad?(response: KlarnaLoadResponse): void;\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../checkout';\nimport { OrderActionCreator, OrderRequestBody } from '../../order';\nimport { PaymentRequestOptions } from '../payment-request-options';\n\nimport PaymentStrategy from './payment-strategy';\n\nexport default class LegacyPaymentStrategy extends PaymentStrategy {\n    constructor(\n        store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator\n    ) {\n        super(store);\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(this._orderActionCreator.submitOrder(payload, options));\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../checkout';\nimport { OrderActionCreator, OrderRequestBody } from '../../order';\nimport { PaymentRequestOptions } from '../payment-request-options';\n\nimport PaymentStrategy from './payment-strategy';\n\nexport default class OfflinePaymentStrategy extends PaymentStrategy {\n    constructor(\n        store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator\n    ) {\n        super(store);\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const action = this._orderActionCreator.submitOrder({\n            ...payload,\n            payment: payload.payment ? { methodId: payload.payment.methodId } : undefined,\n        }, options);\n\n        return this._store.dispatch(action);\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../checkout';\nimport { OrderActionCreator, OrderPaymentRequestBody, OrderRequestBody } from '../../order';\nimport { PaymentArgumentInvalidError } from '../errors';\nimport PaymentActionCreator from '../payment-action-creator';\nimport { PaymentRequestOptions } from '../payment-request-options';\nimport * as paymentStatusTypes from '../payment-status-types';\n\nimport PaymentStrategy from './payment-strategy';\n\nexport default class OffsitePaymentStrategy extends PaymentStrategy {\n    constructor(\n        store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator\n    ) {\n        super(store);\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = payload;\n        const paymentData = payment && payment.paymentData;\n        const orderPayload = this._shouldSubmitFullPayload(payment) ? payload : order;\n\n        if (!payment || !paymentData) {\n            throw new PaymentArgumentInvalidError(['payment.paymentData']);\n        }\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder(orderPayload, options))\n            .then(() =>\n                this._store.dispatch(this._paymentActionCreator.initializeOffsitePayment({ ...payment, paymentData }))\n            );\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const order = state.order.getOrder();\n        const status = state.payment.getPaymentStatus();\n\n        if (order && (status === paymentStatusTypes.ACKNOWLEDGE || status === paymentStatusTypes.FINALIZE)) {\n            return this._store.dispatch(this._orderActionCreator.finalizeOrder(order.orderId, options));\n        }\n\n        return super.finalize();\n    }\n\n    private _shouldSubmitFullPayload(payment?: OrderPaymentRequestBody): boolean {\n        // FIXME: A temporary workaround to support offsite payment methods\n        // where their return URL needs to be provided by the core app.\n        if (!payment) {\n            return false;\n        }\n\n        return payment.gatewayId === 'adyen' || payment.methodId === 'ccavenuemars';\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { PaymentArgumentInvalidError } from '../../errors';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport { PaymentRequestOptions } from '../../payment-request-options';\nimport * as paymentStatusTypes from '../../payment-status-types';\n\nimport PaymentStrategy from '../payment-strategy';\n\nexport default class PaypalProPaymentStrategy extends PaymentStrategy {\n    constructor(\n        store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator\n    ) {\n        super(store);\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        if (this._isPaymentAcknowledged()) {\n            return this._store.dispatch(\n                this._orderActionCreator.submitOrder({\n                    ...payload,\n                    payment: payload.payment ? { methodId: payload.payment.methodId } : undefined,\n                }, options)\n            );\n        }\n\n        const { payment, ...order } = payload;\n        const paymentData = payment && payment.paymentData;\n\n        if (!payment || !paymentData) {\n            throw new PaymentArgumentInvalidError(['payment.paymentData']);\n        }\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder(order, options))\n            .then(() =>\n                this._store.dispatch(this._paymentActionCreator.submitPayment({ ...payment, paymentData }))\n            );\n    }\n\n    private _isPaymentAcknowledged(): boolean {\n        const state = this._store.getState();\n\n        return state.payment.getPaymentStatus() === paymentStatusTypes.ACKNOWLEDGE;\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport PaymentMethod from '../../payment-method';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport * as paymentStatusTypes from '../../payment-status-types';\nimport PaymentStrategy from '../payment-strategy';\n\nimport PaypalScriptLoader from './paypal-script-loader';\nimport { PaypalSDK } from './paypal-sdk';\n\nexport default class PaypalExpressPaymentStrategy extends PaymentStrategy {\n    private _paypalSdk?: PaypalSDK;\n    private _paymentMethod?: PaymentMethod;\n\n    constructor(\n        store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _scriptLoader: PaypalScriptLoader\n    ) {\n        super(store);\n    }\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n\n        this._paymentMethod = state.paymentMethods.getPaymentMethod(options.methodId);\n\n        if (!this._isInContextEnabled() || this._isInitialized) {\n            return super.initialize(options);\n        }\n\n        return this._scriptLoader.loadPaypal()\n            .then(paypal => {\n                this._paypalSdk = paypal;\n\n                if (!this._paymentMethod || !this._paymentMethod.config.merchantId) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                this._paypalSdk.checkout.setup(this._paymentMethod.config.merchantId, {\n                    button: 'paypal-button',\n                    environment: this._paymentMethod.config.testMode ? 'sandbox' : 'production',\n                });\n            })\n            .then(() => super.initialize(options));\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        if (!this._isInitialized) {\n            return super.deinitialize();\n        }\n\n        if (this._isInContextEnabled() && this._paypalSdk) {\n            this._paypalSdk.checkout.closeFlow();\n            this._paypalSdk = undefined;\n        }\n\n        return super.deinitialize();\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const paypal = this._paypalSdk;\n\n        if (this._isAcknowledgedOrFinalized()) {\n            return this._store.dispatch(this._orderActionCreator.submitOrder(payload, options));\n        }\n\n        if (!this._isInContextEnabled()) {\n            return this._store.dispatch(this._orderActionCreator.submitOrder(payload, options))\n                .then(state => {\n                    const redirectUrl = state.payment.getPaymentRedirectUrl();\n\n                    if (redirectUrl) {\n                        window.location.assign(redirectUrl);\n                    }\n\n                    // We need to hold execution so the consumer does not redirect us somewhere else\n                    return new Promise<never>(() => {});\n                });\n        }\n\n        if (!paypal) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        paypal.checkout.initXO();\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder(payload, options))\n            .then(state => {\n                const redirectUrl = state.payment.getPaymentRedirectUrl();\n\n                if (redirectUrl) {\n                    paypal.checkout.startFlow(redirectUrl);\n                }\n\n                // We need to hold execution so the consumer does not redirect us somewhere else\n                return new Promise<never>(() => {});\n            })\n            .catch(error => {\n                paypal.checkout.closeFlow();\n\n                return Promise.reject(error);\n            });\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const order = state.order.getOrder();\n\n        if (order && this._isAcknowledgedOrFinalized()) {\n            return this._store.dispatch(this._orderActionCreator.finalizeOrder(order.orderId, options));\n        }\n\n        return super.finalize();\n    }\n\n    private _isAcknowledgedOrFinalized(): boolean {\n        const state = this._store.getState();\n\n        return state.payment.getPaymentStatus() === paymentStatusTypes.ACKNOWLEDGE\n            || state.payment.getPaymentStatus() === paymentStatusTypes.FINALIZE;\n    }\n\n    private _isInContextEnabled(): boolean {\n        return !!(this._paymentMethod && this._paymentMethod.config.merchantId);\n    }\n}\n","import { some } from 'lodash';\n\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../checkout';\nimport { RequestError } from '../../common/error/errors';\nimport { OrderActionCreator, OrderRequestBody } from '../../order';\nimport { PaymentArgumentInvalidError } from '../errors';\nimport PaymentActionCreator from '../payment-action-creator';\nimport { PaymentRequestOptions } from '../payment-request-options';\nimport * as paymentStatusTypes from '../payment-status-types';\n\nimport PaymentStrategy from './payment-strategy';\n\nexport default class SagePayPaymentStrategy extends PaymentStrategy {\n    constructor(\n        store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _formPoster: any\n    ) {\n        super(store);\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = payload;\n        const paymentData = payment && payment.paymentData;\n\n        if (!payment || !paymentData) {\n            throw new PaymentArgumentInvalidError(['payment.paymentData']);\n        }\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder(order, options))\n            .then(() =>\n                this._store.dispatch(this._paymentActionCreator.submitPayment({ ...payment, paymentData }))\n            )\n            .catch(error => {\n                if (!(error instanceof RequestError) || !some(error.body.errors, { code: 'three_d_secure_required' })) {\n                    return Promise.reject(error);\n                }\n\n                return new Promise(() => {\n                    this._formPoster.postForm(error.body.three_ds_result.acs_url, {\n                        PaReq: error.body.three_ds_result.payer_auth_request,\n                        TermUrl: error.body.three_ds_result.callback_url,\n                        MD: error.body.three_ds_result.merchant_data,\n                    });\n                });\n            });\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const order = state.order.getOrder();\n\n        if (order && state.payment.getPaymentStatus() === paymentStatusTypes.FINALIZE) {\n            return this._store.dispatch(this._orderActionCreator.finalizeOrder(order.orderId, options));\n        }\n\n        return super.finalize();\n    }\n}\n","import StandardError from './standard-error';\n\nexport default class UnsupportedBrowserError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Unsupported browser error');\n\n        this.type = 'unsupported_browser';\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\nimport { omit } from 'lodash';\n\nimport { PaymentStrategy } from '../';\nimport {\n    NonceInstrument,\n    PaymentActionCreator,\n    PaymentInitializeOptions,\n    PaymentMethodActionCreator,\n    PaymentRequestOptions,\n    PaymentStrategyActionCreator\n} from '../../';\nimport { CheckoutActionCreator, CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport {\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    NotInitializedError,\n    NotInitializedErrorType,\n    StandardError,\n    TimeoutError,\n    UnsupportedBrowserError,\n} from '../../../common/error/errors';\nimport { toFormUrlEncoded } from '../../../common/http-request';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport PaymentMethod from '../../payment-method';\n\nimport { SquarePaymentForm, SquareScriptLoader } from '.';\nimport {\n    CardData,\n    Contact,\n    DigitalWalletType,\n    NonceGenerationError,\n    SquareFormElement,\n    SquareFormOptions,\n    SquarePaymentRequest\n} from './square-form';\nimport SquarePaymentInitializeOptions from './square-payment-initialize-options';\n\nexport default class SquarePaymentStrategy extends PaymentStrategy {\n    private _deferredRequestNonce?: DeferredPromise;\n    private _paymentForm?: SquarePaymentForm;\n    private _paymentMethod?: PaymentMethod;\n    private _squareOptions?: SquarePaymentInitializeOptions;\n\n    constructor(\n        store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _paymentStrategyActionCreator: PaymentStrategyActionCreator,\n        private _requestSender: RequestSender,\n        private _scriptLoader: SquareScriptLoader\n    ) {\n        super(store);\n    }\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { methodId } = options;\n        this._syncPaymentMethod(methodId);\n\n        return this._scriptLoader.load()\n            .then(createSquareForm =>\n                new Promise((resolve, reject) => {\n                    this._paymentForm = createSquareForm(\n                        this._getFormOptions(options, { resolve, reject })\n                    );\n                    this._paymentForm.build();\n                }))\n            .then(() => super.initialize(options));\n    }\n\n    execute(orderRequest: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment } = orderRequest;\n\n        if (!payment || !payment.methodId) {\n            throw new InvalidArgumentError('Unable to submit payment because \"payload.payment.methodId\" argument is not provided.');\n        }\n\n        this._syncPaymentMethod(payment.methodId);\n\n        return this._getNonceInstrument(payment.methodId)\n            .then(paymentData =>\n                this._store.dispatch(this._orderActionCreator.submitOrder(omit(orderRequest, 'payment'), options))\n                .then(() =>\n                    this._store.dispatch(this._paymentActionCreator.submitPayment({ ...payment, paymentData }))\n                ));\n    }\n\n    private _syncPaymentMethod(methodId: string): void {\n        const state = this._store.getState();\n        this._paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n        if (!this._paymentMethod || !this._paymentMethod.initializationData) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n    }\n\n    private _getCountryCode(countryName: string) {\n        switch (countryName.toUpperCase()) {\n            case 'NEW ZELAND':\n                return 'NZ';\n            case 'AUSTRALIA':\n                return 'AU';\n            default:\n                return 'US';\n        }\n    }\n\n    private _getNonceInstrument(methodId: string): Promise<NonceInstrument> {\n        const state = this._store.getState();\n        const paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n        if (paymentMethod) {\n            const { initializationData } = paymentMethod;\n            if (initializationData && initializationData.paymentData.nonce) {\n                return Promise.resolve({ nonce: paymentMethod.initializationData.paymentData.nonce });\n            }\n        }\n\n        return new Promise<NonceInstrument>((resolve, reject) => {\n            if (!this._paymentForm) {\n                throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n            }\n\n            if (this._deferredRequestNonce) {\n                this._deferredRequestNonce.reject(new TimeoutError());\n            }\n\n            this._deferredRequestNonce = { resolve, reject };\n            this._paymentForm.requestCardNonce();\n        });\n    }\n\n    private _getFormOptions(options: PaymentInitializeOptions, deferred: DeferredPromise): SquareFormOptions {\n        const { square: squareOptions } = options;\n\n        if (!squareOptions || !this._paymentMethod) {\n            throw new InvalidArgumentError('Unable to proceed because \"options.square\" argument is not provided.');\n        }\n\n        this._squareOptions = squareOptions;\n\n        return {\n            ...this._squareOptions,\n            ...this._paymentMethod.initializationData,\n            callbacks: {\n                cardNonceResponseReceived: (errors, nonce, cardData, billingContact, shippingContact) => {\n                    if (cardData && cardData.digital_wallet_type !== DigitalWalletType.none) {\n                        this._handleWalletNonceResponse(errors, nonce, cardData, billingContact, shippingContact);\n                    } else {\n                        this._handleCardNonceResponse(errors, nonce);\n                    }\n                },\n                createPaymentRequest: () => this._paymentRequestPayload(),\n                methodsSupported: methods => {\n                    const { masterpass } = squareOptions;\n\n                    if (masterpass) {\n                        this._showPaymentMethods(methods, masterpass);\n                    }\n                },\n                paymentFormLoaded: () => {\n                    deferred.resolve();\n                    this._setPostalCode();\n                },\n                unsupportedBrowserDetected: () => deferred.reject(new UnsupportedBrowserError()),\n            },\n        };\n    }\n\n    private _handleWalletNonceResponse(errors?: NonceGenerationError[], nonce?: string, cardData?: CardData, billingContact?: Contact, shippingContact?: Contact): void {\n        if (errors && this._squareOptions && this._squareOptions.onError) {\n            this._squareOptions.onError(errors);\n        } else if (nonce && this._paymentMethod) {\n            this._paymentInstrumentSelected(this._paymentMethod.id, nonce, cardData, billingContact, shippingContact)\n                .then(() => this._squareOptions && this._squareOptions.onPaymentSelect && this._squareOptions.onPaymentSelect())\n                .catch(error => this._squareOptions && this._squareOptions.onError && this._squareOptions.onError(error));\n        }\n    }\n\n    private _handleCardNonceResponse(errors?: NonceGenerationError[], nonce?: string): void {\n        if (!this._deferredRequestNonce) {\n            throw new StandardError();\n        }\n\n        if (errors && this._squareOptions && this._squareOptions.onError) {\n            this._squareOptions.onError(errors);\n            this._deferredRequestNonce.reject(errors);\n        } else if (nonce) {\n            this._deferredRequestNonce.resolve({ nonce });\n        }\n    }\n\n    private _paymentInstrumentSelected(\n        methodId: string,\n        nonce?: string,\n        cardData?: CardData,\n        billingContact?: Contact,\n        shippingContact?: Contact): Promise<InternalCheckoutSelectors> {\n\n        return this._store.dispatch(this._paymentStrategyActionCreator.widgetInteraction(() => {\n            return this._setExternalCheckoutData(nonce, cardData, billingContact, shippingContact)\n            .then(() =>\n                Promise.all([\n                this._store.dispatch(this._checkoutActionCreator.loadCurrentCheckout()),\n                this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId)),\n            ]));\n        }, { methodId }), { queueId: 'widgetInteraction' });\n    }\n\n    private _paymentRequestPayload(): SquarePaymentRequest {\n        const state = this._store.getState();\n        const checkout = state.checkout.getCheckout();\n        const storeConfig = state.config.getStoreConfig();\n\n        if (!checkout) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n        }\n\n        if (!storeConfig) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n        }\n\n        return {\n            requestShippingAddress: true,\n            requestBillingInfo: true,\n            currencyCode: storeConfig.currency.code,\n            countryCode: this._getCountryCode(storeConfig.storeProfile.storeCountry),\n            total: {\n                label: storeConfig.storeProfile.storeName,\n                amount: String(checkout.subtotal),\n                pending: false,\n            },\n        };\n    }\n\n    private _setExternalCheckoutData(nonce?: string, cardData?: CardData, billingContact?: Contact, shippingContact?: Contact): Promise<Response<any>> {\n        return this._requestSender.post('/checkout.php', {\n            headers: {\n                Accept: 'text/html',\n                'Content-Type': 'application/x-www-form-urlencoded',\n            },\n            body: toFormUrlEncoded({\n                nonce,\n                provider: 'squarev2',\n                action: 'set_external_checkout',\n                cardData: JSON.stringify(cardData),\n                billingContact: JSON.stringify(billingContact),\n                shippingContact: JSON.stringify(shippingContact),\n            }),\n        });\n    }\n\n    private _setPostalCode(): void {\n        const state = this._store.getState();\n        const billingAddress = state.billingAddress.getBillingAddress();\n\n        if (!this._paymentForm) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        if (billingAddress && billingAddress.postalCode) {\n            this._paymentForm.setPostalCode(billingAddress.postalCode);\n        }\n    }\n\n    private _showPaymentMethods(methods: { [key: string]: boolean }, element: SquareFormElement): void {\n        const masterpassBtn = document.getElementById(element.elementId);\n\n        if (masterpassBtn && methods.masterpass) {\n            masterpassBtn.style.display = 'inline-block';\n        }\n    }\n}\n\nexport interface DeferredPromise {\n    resolve(resolution?: NonceInstrument): void;\n    reject(reason?: any): void;\n}\n","import { omit } from 'lodash';\n\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../checkout';\nimport { OrderActionCreator, OrderRequestBody } from '../../order';\nimport { PaymentRequestOptions } from '../payment-request-options';\n\nimport PaymentStrategy from './payment-strategy';\n\nexport default class NoPaymentDataRequiredPaymentStrategy extends PaymentStrategy {\n    constructor(\n        store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator\n    ) {\n        super(store);\n    }\n\n    execute(orderRequest: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._orderActionCreator.submitOrder(omit(orderRequest, 'payment'), options)\n        );\n    }\n}\n","import { Payment, PaymentMethodActionCreator } from '../..';\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { MissingDataError, MissingDataErrorType, StandardError } from '../../../common/error/errors';\nimport { OrderActionCreator, OrderPaymentRequestBody, OrderRequestBody } from '../../../order';\nimport { PaymentArgumentInvalidError } from '../../errors';\nimport isCreditCardLike from '../../is-credit-card-like';\nimport isVaultedInstrument from '../../is-vaulted-instrument';\nimport { PaymentInstrument } from '../../payment';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nimport BraintreePaymentProcessor from './braintree-payment-processor';\n\nexport default class BraintreeCreditCardPaymentStrategy extends PaymentStrategy {\n    private _is3dsEnabled?: boolean;\n\n    constructor(\n        store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _braintreePaymentProcessor: BraintreePaymentProcessor\n    ) {\n        super(store);\n    }\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(options.methodId))\n            .then(state => {\n                const paymentMethod = state.paymentMethods.getPaymentMethod(options.methodId);\n\n                if (!paymentMethod || !paymentMethod.clientToken) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                this._braintreePaymentProcessor.initialize(paymentMethod.clientToken, options.braintree);\n                this._is3dsEnabled = paymentMethod.config.is3dsEnabled;\n\n                return super.initialize(options);\n            })\n            .catch((error: Error) => this._handleError(error));\n    }\n\n    execute(orderRequest: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = orderRequest;\n\n        if (!payment) {\n            throw new PaymentArgumentInvalidError(['payment']);\n        }\n\n        return this._store.dispatch(\n            this._orderActionCreator.submitOrder(order, options)\n        )\n            .then(state =>\n                state.payment.isPaymentDataRequired(order.useStoreCredit) && payment ?\n                    this._preparePaymentData(payment) :\n                    Promise.resolve(payment as Payment)\n            )\n            .then(payment =>\n                this._store.dispatch(this._paymentActionCreator.submitPayment(payment))\n            )\n            .catch((error: Error) => this._handleError(error));\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._braintreePaymentProcessor.deinitialize()\n            .then(() => super.deinitialize(options));\n    }\n\n    private _handleError(error: Error): never {\n        if (error.name === 'BraintreeError') {\n            throw new StandardError(error.message);\n        }\n\n        throw error;\n    }\n\n    private _isUsingVaulting(paymentData: PaymentInstrument): boolean {\n        if (isCreditCardLike(paymentData)) {\n            return Boolean(paymentData.shouldSaveInstrument);\n        }\n\n        return isVaultedInstrument(paymentData);\n    }\n\n    private _preparePaymentData(payment: OrderPaymentRequestBody): Promise<Payment> {\n        const { paymentData } = payment;\n        const state = this._store.getState();\n\n        if (paymentData && this._isUsingVaulting(paymentData)) {\n            return Promise.resolve(payment as Payment);\n        }\n\n        const checkout = state.checkout.getCheckout();\n        const billingAddress = state.billingAddress.getBillingAddress();\n\n        if (!checkout) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n        }\n\n        if (!billingAddress) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n        }\n\n        const tokenizedCard = this._is3dsEnabled ?\n            this._braintreePaymentProcessor.verifyCard(payment, billingAddress, checkout.grandTotal) :\n            this._braintreePaymentProcessor.tokenizeCard(payment, billingAddress);\n\n        return this._braintreePaymentProcessor.appendSessionId(tokenizedCard)\n            .then(paymentData => ({ ...payment, paymentData }));\n    }\n}\n","import isVaultedInstrument from './is-vaulted-instrument';\nimport { CreditCardInstrument, PaymentInstrument } from './payment';\n\nexport default function isCreditCardLike(instrument: PaymentInstrument): instrument is CreditCardInstrument {\n    const card = instrument as CreditCardInstrument;\n\n    return !isVaultedInstrument(card) &&\n        typeof card.ccName === 'string' &&\n        typeof card.ccNumber === 'string' &&\n        typeof card.ccType === 'string' &&\n        typeof card.ccExpiry === 'object' &&\n        typeof card.ccExpiry.month === 'string' &&\n        typeof card.ccExpiry.year === 'string';\n    }\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType, StandardError } from '../../../common/error/errors';\nimport { OrderActionCreator, OrderPaymentRequestBody, OrderRequestBody } from '../../../order';\nimport { PaymentArgumentInvalidError } from '../../errors';\nimport Payment from '../../payment';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethod from '../../payment-method';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nimport BraintreePaymentProcessor from './braintree-payment-processor';\n\nexport default class BraintreePaypalPaymentStrategy extends PaymentStrategy {\n    private _paymentMethod?: PaymentMethod;\n\n    constructor(\n        store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _braintreePaymentProcessor: BraintreePaymentProcessor,\n        private _credit: boolean = false\n    ) {\n        super(store);\n    }\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { braintree: braintreeOptions, methodId } = options;\n\n        this._paymentMethod = this._store.getState().paymentMethods.getPaymentMethod(methodId);\n\n        if (this._paymentMethod && this._paymentMethod.nonce) {\n            return super.initialize(options);\n        }\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => {\n                this._paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                if (!this._paymentMethod || !this._paymentMethod.clientToken) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                this._braintreePaymentProcessor.initialize(this._paymentMethod.clientToken, braintreeOptions);\n\n                return this._braintreePaymentProcessor.preloadPaypal();\n            })\n            .then(() => super.initialize(options))\n            .catch((error: Error) => this._handleError(error));\n    }\n\n    execute(orderRequest: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = orderRequest;\n\n        if (!payment) {\n            throw new PaymentArgumentInvalidError(['payment']);\n        }\n\n        return (payment ? this._preparePaymentData(payment) : Promise.resolve(payment))\n            .then(payment => Promise.all([payment, this._store.dispatch(this._orderActionCreator.submitOrder(order, options))]))\n            .then(([payment]) => this._store.dispatch(this._paymentActionCreator.submitPayment(payment)))\n            .catch((error: Error) => this._handleError(error));\n    }\n\n    deinitialize(options: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._braintreePaymentProcessor.deinitialize()\n            .then(() => super.deinitialize(options));\n    }\n\n    private _handleError(error: Error): never {\n        if (error.name === 'BraintreeError') {\n            throw new StandardError(error.message);\n        }\n\n        throw error;\n    }\n\n    private _preparePaymentData(payment: OrderPaymentRequestBody): Promise<Payment> {\n        const state = this._store.getState();\n        const checkout = state.checkout.getCheckout();\n        const config = state.config.getStoreConfig();\n\n        if (!checkout) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n        }\n\n        if (!config) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n        }\n\n        if (!this._paymentMethod) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        const { currency, storeProfile: { storeLanguage } } = config;\n        const { method, nonce } = this._paymentMethod;\n\n        if (nonce) {\n            return Promise.resolve({ ...payment, paymentData: { nonce, method } });\n        }\n\n        const tokenizedCard = this._braintreePaymentProcessor\n            .paypal(checkout.grandTotal, storeLanguage, currency.code, this._credit);\n\n        return this._braintreePaymentProcessor.appendSessionId(tokenizedCard)\n            .then(paymentData => ({ ...payment, paymentData: { ...paymentData, method } }));\n    }\n}\n","import {\n    PaymentActionCreator,\n    PaymentInitializeOptions,\n    PaymentMethod,\n    PaymentMethodActionCreator,\n    PaymentRequestOptions,\n    PaymentStrategyActionCreator,\n} from '../..';\nimport { CheckoutActionCreator, CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, StandardError } from '../../../common/error/errors';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport PaymentStrategy from '../payment-strategy';\n\nimport { BraintreeVisaCheckoutPaymentProcessor, VisaCheckoutScriptLoader } from '.';\nimport { VisaCheckoutPaymentSuccessPayload } from './visacheckout';\n\nexport default class BraintreeVisaCheckoutPaymentStrategy extends PaymentStrategy {\n    private _paymentMethod?: PaymentMethod;\n\n    constructor(\n        store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _paymentStrategyActionCreator: PaymentStrategyActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _orderActionCreator: OrderActionCreator,\n        private _braintreeVisaCheckoutPaymentProcessor: BraintreeVisaCheckoutPaymentProcessor,\n        private _visaCheckoutScriptLoader: VisaCheckoutScriptLoader\n    ) {\n        super(store);\n    }\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { braintreevisacheckout: visaCheckoutOptions, methodId } = options;\n\n        if (!visaCheckoutOptions) {\n            throw new InvalidArgumentError('Unable to initialize payment because \"options.braintreevisacheckout\" argument is not provided.');\n        }\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => {\n                this._paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                const checkout = state.checkout.getCheckout();\n                const storeConfig = state.config.getStoreConfig();\n\n                if (!checkout) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                }\n\n                if (!storeConfig) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n                }\n\n                if (!this._paymentMethod || !this._paymentMethod.clientToken) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                const {\n                    onError = () => {},\n                    onPaymentSelect = () => {},\n                } = visaCheckoutOptions;\n\n                const initOptions = {\n                    locale: storeConfig.storeProfile.storeLanguage,\n                    collectShipping: false,\n                    subtotal: checkout.subtotal,\n                    currencyCode: storeConfig.currency.code,\n                };\n\n                return Promise.all([\n                    this._visaCheckoutScriptLoader.load(this._paymentMethod.config.testMode),\n                    this._braintreeVisaCheckoutPaymentProcessor.initialize(this._paymentMethod.clientToken, initOptions),\n                ])\n                .then(([visaCheckout, visaInitOptions]) => {\n                    visaCheckout.init(visaInitOptions);\n                    visaCheckout.on('payment.success', (paymentSuccessPayload: VisaCheckoutPaymentSuccessPayload) =>\n                        this._paymentInstrumentSelected(paymentSuccessPayload)\n                            .then(() => onPaymentSelect())\n                            .catch(error => onError(error))\n                    );\n                    visaCheckout.on('payment.error', (payment, error) => onError(error));\n                });\n            })\n            .then(() => super.initialize(options));\n    }\n\n    execute(orderRequest: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = orderRequest;\n\n        if (!payment) {\n            throw new InvalidArgumentError('Unable to submit payment because \"payload.payment\" argument is not provided.');\n        }\n\n        if (!this._paymentMethod || !this._paymentMethod.initializationData || !this._paymentMethod.initializationData.nonce) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const { nonce } = this._paymentMethod.initializationData;\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder(order, options))\n            .then(() =>\n                this._store.dispatch(this._paymentActionCreator.submitPayment({ ...payment, paymentData: { nonce } }))\n            )\n            .catch((error: Error) => this._handleError(error));\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._braintreeVisaCheckoutPaymentProcessor.deinitialize()\n            .then(() => super.deinitialize(options));\n    }\n\n    private _paymentInstrumentSelected(paymentSuccessPayload: VisaCheckoutPaymentSuccessPayload) {\n        const state = this._store.getState();\n\n        if (!this._paymentMethod) {\n            throw new Error('Payment method not initialized');\n        }\n\n        const { id: methodId } = this._paymentMethod;\n\n        return this._store.dispatch(this._paymentStrategyActionCreator.widgetInteraction(() => {\n            return this._braintreeVisaCheckoutPaymentProcessor.handleSuccess(\n                paymentSuccessPayload,\n                state.shippingAddress.getShippingAddress(),\n                state.billingAddress.getBillingAddress()\n            )\n            .then(() => Promise.all([\n                this._store.dispatch(this._checkoutActionCreator.loadCurrentCheckout()),\n                this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId)),\n            ]));\n        }, { methodId }), { queueId: 'widgetInteraction' });\n    }\n\n    private _handleError(error: Error): never {\n        if (error.name === 'BraintreeError') {\n            throw new StandardError(error.message);\n        }\n\n        throw error;\n    }\n}\n\n/**\n * A set of options that are required to initialize the Visa Checkout payment\n * method provided by Braintree.\n *\n * If the customer chooses to pay with Visa Checkout, they will be asked to\n * enter their payment details via a modal. You can hook into events emitted by\n * the modal by providing the callbacks listed below.\n */\nexport interface BraintreeVisaCheckoutPaymentInitializeOptions {\n    /**\n     * A callback that gets called when Visa Checkout fails to initialize or\n     * selects a payment option.\n     *\n     * @param error - The error object describing the failure.\n     */\n    onError?(error: Error): void;\n\n    /**\n     * A callback that gets called when the customer selects a payment option.\n     */\n    onPaymentSelect?(): void;\n}\n","import { merge } from 'lodash';\n\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport CreditCardPaymentStrategy from '../credit-card-payment-strategy';\n\nimport WepayRiskClient from './wepay-risk-client';\n\nexport default class WepayPaymentStrategy extends CreditCardPaymentStrategy {\n    constructor(\n        store: CheckoutStore,\n        orderActionCreator: OrderActionCreator,\n        paymentActionCreator: PaymentActionCreator,\n        private _wepayRiskClient: WepayRiskClient\n    ) {\n        super(store, orderActionCreator, paymentActionCreator);\n    }\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        this._wepayRiskClient.initialize();\n\n        return super.initialize(options);\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const token = this._wepayRiskClient.getRiskToken();\n        const payloadWithToken = merge({}, payload, {\n            payment: {\n                paymentData: {\n                    deviceSessionId: token,\n                },\n            },\n        });\n\n        return super.execute(payloadWithToken, options);\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport PaymentMethod from '../../payment-method';\n\nimport AfterpaySdk from './afterpay-sdk';\nimport AfterpayWindow from './afterpay-window';\n\ninterface AfterpayScripts {\n    PROD: string;\n    SANDBOX: string;\n}\n\nconst SCRIPTS_DEFAULT: AfterpayScripts = {\n    PROD: '//portal.afterpay.com/afterpay-async.js',\n    SANDBOX: '//portal-sandbox.afterpay.com/afterpay-async.js',\n};\n\nconst SCRIPTS_US: AfterpayScripts = {\n    PROD: '//portal.afterpay.com/afterpay-async.js',\n    SANDBOX: '//portal.us-sandbox.afterpay.com/afterpay-async.js',\n};\n\n/** Class responsible for loading the Afterpay SDK */\nexport default class AfterpayScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader\n    ) {}\n\n    /**\n     * Loads the appropriate Afterpay SDK depending on the payment method data.\n     * @param method the payment method data\n     */\n    load(method: PaymentMethod, countryCode: string): Promise<AfterpaySdk> {\n        const testMode = method.config.testMode || false;\n        const scriptURI = this._getScriptURI(countryCode, testMode);\n\n        return this._scriptLoader.loadScript(scriptURI)\n            .then(() => (window as AfterpayWindow).AfterPay);\n    }\n\n    private _getScriptURI(countryCode: string, testMode: boolean): string {\n        if (countryCode === 'US') {\n            return testMode ? SCRIPTS_US.SANDBOX : SCRIPTS_US.PROD;\n        }\n\n        return testMode ? SCRIPTS_DEFAULT.SANDBOX : SCRIPTS_DEFAULT.PROD;\n    }\n\n}\n","export default class CancellablePromise<T> {\n    promise: Promise<T>;\n    cancel!: (reason?: any) => void;\n\n    constructor(promise: Promise<T>) {\n        const cancellable = new Promise<T>((resolve, reject) => {\n            this.cancel = reject;\n        });\n\n        this.promise = Promise.race([promise, cancellable]);\n    }\n}\n","import { Address } from '../../../address';\nimport { NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { CancellablePromise } from '../../../common/utility';\nimport { OrderPaymentRequestBody } from '../../../order';\nimport { PaymentMethodCancelledError } from '../../errors';\nimport { CreditCardInstrument, NonceInstrument } from '../../payment';\n\nimport { BraintreePaypal, BraintreeRequestData } from './braintree';\nimport { BraintreePaymentInitializeOptions, BraintreeThreeDSecureOptions } from './braintree-payment-options';\nimport BraintreeSDKCreator from './braintree-sdk-creator';\n\nexport default class BraintreePaymentProcessor {\n    private _threeDSecureOptions?: BraintreeThreeDSecureOptions;\n\n    constructor(\n        private _braintreeSDKCreator: BraintreeSDKCreator\n    ) {}\n\n    initialize(clientToken: string, options?: BraintreePaymentInitializeOptions): void {\n        this._braintreeSDKCreator.initialize(clientToken);\n        this._threeDSecureOptions = options && options.threeDSecure;\n    }\n\n    preloadPaypal(): Promise<BraintreePaypal> {\n        return this._braintreeSDKCreator.getPaypal();\n    }\n\n    tokenizeCard(payment: OrderPaymentRequestBody, billingAddress: Address): Promise<NonceInstrument> {\n        const { paymentData } = payment;\n        const requestData = this._mapToCreditCard(paymentData as CreditCardInstrument, billingAddress);\n\n        return this._braintreeSDKCreator.getClient()\n            .then(client => client.request(requestData))\n            .then(({ creditCards }) => ({\n                nonce: creditCards[0].nonce,\n            }));\n    }\n\n    paypal(amount: number, storeLanguage: string, currency: string, offerCredit: boolean): Promise<NonceInstrument> {\n        return this._braintreeSDKCreator.getPaypal()\n            .then(paypal => paypal.tokenize({\n                amount,\n                currency,\n                enableShippingAddress: true,\n                flow: 'checkout',\n                locale: storeLanguage,\n                offerCredit,\n                useraction: 'commit',\n            }));\n    }\n\n    verifyCard(payment: OrderPaymentRequestBody, billingAddress: Address, amount: number): Promise<NonceInstrument> {\n        if (!this._threeDSecureOptions) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        const { addFrame, removeFrame } = this._threeDSecureOptions;\n\n        return Promise.all([\n            this.tokenizeCard(payment, billingAddress),\n            this._braintreeSDKCreator.get3DS(),\n        ]).then(([paymentData, threeDSecure]) => {\n            const { nonce } = paymentData;\n            const cancelVerifyCard = () => threeDSecure.cancelVerifyCard()\n                .then(response => {\n                    verification.cancel(new PaymentMethodCancelledError());\n\n                    return response;\n                });\n\n            const verification = new CancellablePromise(\n                threeDSecure.verifyCard({\n                    addFrame: (error, iframe) => {\n                        addFrame(error, iframe, cancelVerifyCard);\n                    },\n                    amount,\n                    nonce,\n                    removeFrame,\n                })\n            );\n\n            return verification.promise;\n        });\n    }\n\n    appendSessionId(processedPayment: Promise<NonceInstrument>): Promise<NonceInstrument> {\n        return processedPayment\n            .then(paymentData => Promise.all([paymentData, this._braintreeSDKCreator.getDataCollector()]))\n            .then(([paymentData, { deviceData }]) => ({ ...paymentData, deviceSessionId: deviceData }));\n    }\n\n    deinitialize(): Promise<void> {\n        return this._braintreeSDKCreator.teardown();\n    }\n\n    private _mapToCreditCard(creditCard: CreditCardInstrument, billingAddress: Address): BraintreeRequestData {\n        let streetAddress = billingAddress.address1;\n\n        if (billingAddress.address2) {\n            streetAddress = ` ${billingAddress.address2}`;\n        }\n\n        return {\n            data: {\n                creditCard: {\n                    cardholderName: creditCard.ccName,\n                    number: creditCard.ccNumber,\n                    cvv: creditCard.ccCvv,\n                    expirationDate: `${creditCard.ccExpiry.month}/${creditCard.ccExpiry.year}`,\n                    options: {\n                        validate: false,\n                    },\n                    billingAddress: {\n                        countryName: billingAddress.country,\n                        postalCode: billingAddress.postalCode,\n                        streetAddress,\n                    },\n                },\n            },\n            endpoint: 'payment_methods/credit_cards',\n            method: 'post',\n        };\n    }\n}\n","export enum ChasePayEventType {\n    StartCheckout = 'startCheckout',\n    CompleteCheckout = 'completeCheckout',\n    CancelCheckout = 'cancelCheckout',\n}\n\nexport interface ChasePayEventMap {\n    [ChasePayEventType.StartCheckout](digitalSessionId: string): void;\n    [ChasePayEventType.CompleteCheckout](payload: ChasePaySuccessPayload): void;\n    [ChasePayEventType.CancelCheckout](): void;\n}\n\nexport interface ChasePayHostWindow extends Window {\n    JPMC?: JPMC;\n}\n\nexport interface JPMC {\n    ChasePay: ChasePay;\n}\n\nexport interface ChasePaySuccessPayload {\n    sessionToken: string;\n}\n\nexport interface ChasePayInsertOptions {\n    color?: string;\n    containers?: string[];\n    height?: number;\n    width?: number;\n}\n\nexport interface ChasePayConfigureOptions {\n    language?: string;\n    zindex?: number;\n    sessionWarningTime?: number;\n    sessionTimeoutTime?: number;\n}\n\nexport interface ChasePay {\n    EventType: {\n        START_CHECKOUT: ChasePayEventType.StartCheckout;\n        COMPLETE_CHECKOUT: ChasePayEventType.CompleteCheckout;\n        CANCEL_CHECKOUT: ChasePayEventType.CancelCheckout;\n    };\n    isChasePayUp(): boolean;\n    insertButtons(options: ChasePayInsertOptions): void;\n    insertBrandings(options: ChasePayInsertOptions): void;\n    startCheckout(digitalSessionId?: string): void;\n    showLoadingAnimation(): void;\n    configure(options: ChasePayConfigureOptions): void;\n    on<ChasePayEventType extends keyof ChasePayEventMap>(eventType: ChasePayEventType, callback: ChasePayEventMap[ChasePayEventType]): {};\n}\n\nexport interface ChasePayInitializeOptions {\n    /**\n     * This container is used to host the chasepay branding logo.\n     * It should be an HTML element.\n     */\n    logoContainer: string;\n\n    /**\n     * This walletButton is used to set an event listener, provide an element ID if you want\n     * users to be able to launch the ChasePay wallet modal by clicking on a button.\n     * It should be an HTML element.\n     */\n    walletButton?: string;\n\n    /**\n     * A callback that gets called when the customer selects a payment option.\n     */\n    onPaymentSelect?(): void;\n}\n","import { RequestSender } from '@bigcommerce/request-sender';\nimport { Subject } from 'rxjs';\n\nimport { CheckoutActionCreator, CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { toFormUrlEncoded } from '../../../common/http-request';\nimport { bindDecorator as bind } from '../../../common/utility';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { PaymentMethodCancelledError } from '../../errors';\nimport Payment from '../../payment';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategyActionCreator from '../../payment-strategy-action-creator';\nimport PaymentStrategy from '../payment-strategy';\nimport { WepayRiskClient } from '../wepay';\n\nimport { ChasePay, ChasePayEventType, ChasePaySuccessPayload } from './chasepay';\nimport ChasePayInitializeOptions from './chasepay-initialize-options';\nimport ChasePayScriptLoader from './chasepay-script-loader';\n\nexport default class ChasePayPaymentStrategy extends PaymentStrategy {\n    private _chasePayClient?: ChasePay;\n    private _methodId!: string;\n    private _walletButton?: HTMLElement;\n    private _walletEvent$: Subject<{ type: ChasePayEventType }>;\n\n    constructor(\n        store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _paymentStrategyActionCreator: PaymentStrategyActionCreator,\n        private _requestSender: RequestSender,\n        private _chasePayScriptLoader: ChasePayScriptLoader,\n        private _wepayRiskClient: WepayRiskClient\n    ) {\n        super(store);\n\n        this._walletEvent$ = new Subject();\n    }\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        this._methodId = options.methodId;\n\n        if (!options.chasepay) {\n            throw new InvalidArgumentError('Unable to initialize payment because \"options.chasepay\" argument is not provided.');\n        }\n\n        const walletButton = options.chasepay.walletButton && document.getElementById(options.chasepay.walletButton);\n\n        if (walletButton) {\n            this._walletButton = walletButton;\n            this._walletButton.addEventListener('click', this._handleWalletButtonClick);\n        }\n\n        return this._configureWallet(options.chasepay)\n            .then(() => super.initialize(options));\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        if (this._walletButton) {\n            this._walletButton.removeEventListener('click', this._handleWalletButtonClick);\n        }\n\n        this._walletButton = undefined;\n        this._chasePayClient = undefined;\n\n        return super.deinitialize(options);\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._getPayment()\n            .catch(error => {\n                if (error.subtype === MissingDataErrorType.MissingPayment) {\n                    return this._displayWallet()\n                        .then(() => this._getPayment());\n                }\n\n                throw error;\n            })\n            .then(payment =>\n                this._createOrder(payment, payload.useStoreCredit, options)\n            );\n    }\n\n    private _configureWallet(options: ChasePayInitializeOptions): Promise<void> {\n        const state = this._store.getState();\n        const paymentMethod = state.paymentMethods.getPaymentMethod(this._methodId);\n        const storeConfig = state.config.getStoreConfig();\n\n        if (!paymentMethod) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        if (!storeConfig) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n        }\n\n        return this._chasePayScriptLoader.load(paymentMethod.config.testMode)\n            .then(({ ChasePay }) => {\n                this._chasePayClient = ChasePay;\n\n                if (options.logoContainer && document.getElementById(options.logoContainer)) {\n                    this._chasePayClient.insertBrandings({\n                        color: 'white',\n                        containers: [options.logoContainer],\n                    });\n                }\n\n                this._chasePayClient.configure({\n                    language: storeConfig.storeProfile.storeLanguage,\n                });\n\n                this._chasePayClient.on(ChasePayEventType.CancelCheckout, () => {\n                    this._walletEvent$.next({ type: ChasePayEventType.CancelCheckout });\n\n                    if (options.onCancel) {\n                        options.onCancel();\n                    }\n                });\n\n                this._chasePayClient.on(ChasePayEventType.CompleteCheckout, (payload: ChasePaySuccessPayload) => {\n                    this._setSessionToken(payload.sessionToken)\n                        .then(() => {\n                            this._walletEvent$.next({ type: ChasePayEventType.CompleteCheckout });\n\n                            if (options.onPaymentSelect) {\n                                options.onPaymentSelect();\n                            }\n                        });\n                });\n            });\n    }\n\n    private _displayWallet(): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(this._paymentStrategyActionCreator.widgetInteraction(() => {\n            this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(this._methodId))\n                .then(state => {\n                    const paymentMethod = state.paymentMethods.getPaymentMethod(this._methodId);\n\n                    if (!this._chasePayClient) {\n                        throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n                    }\n\n                    if (!paymentMethod) {\n                        throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                    }\n\n                    this._chasePayClient.showLoadingAnimation();\n                    this._chasePayClient.startCheckout(paymentMethod.initializationData.digitalSessionId);\n                });\n\n            // Wait for payment selection\n            return new Promise((resolve, reject) => {\n                this._walletEvent$.take(1)\n                    .subscribe((event: { type: ChasePayEventType }) => {\n                        if (event.type === ChasePayEventType.CancelCheckout) {\n                            reject(new PaymentMethodCancelledError());\n                        } else if (event.type === ChasePayEventType.CompleteCheckout) {\n                            resolve();\n                        }\n                    });\n            });\n        }, { methodId: this._methodId }), { queueId: 'widgetInteraction' });\n    }\n\n    private _setSessionToken(sessionToken: string): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const paymentMethod = state.paymentMethods.getPaymentMethod(this._methodId);\n        const merchantRequestId = paymentMethod && paymentMethod.initializationData.merchantRequestId;\n\n        return this._requestSender.post('checkout.php', {\n            headers: {\n                Accept: 'text/html',\n                'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8',\n            },\n            body: toFormUrlEncoded({\n                action: 'set_external_checkout',\n                provider: this._methodId,\n                sessionToken,\n                merchantRequestId,\n            }),\n        })\n            // Re-hydrate checkout data\n            .then(() => Promise.all([\n                this._store.dispatch(this._checkoutActionCreator.loadCurrentCheckout()),\n                this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(this._methodId)),\n            ]))\n            .then(() => this._store.getState());\n    }\n\n    private _getPayment(): Promise<Payment> {\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(this._methodId))\n            .then(() => {\n                if (this._methodId === 'wepay') {\n                    return this._wepayRiskClient.initialize()\n                        .then(client => client.getRiskToken());\n                }\n\n                return '';\n            })\n            .then(riskToken => {\n                const state = this._store.getState();\n                const paymentMethod = state.paymentMethods.getPaymentMethod(this._methodId);\n\n                if (!paymentMethod) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                if (!paymentMethod.initializationData.paymentCryptogram) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPayment);\n                }\n\n                const paymentData = {\n                    method: this._methodId,\n                    cryptogramId: paymentMethod.initializationData.paymentCryptogram,\n                    eci: paymentMethod.initializationData.eci,\n                    transactionId: btoa(paymentMethod.initializationData.reqTokenId),\n                    ccExpiry: {\n                        month: paymentMethod.initializationData.expDate.toString().substr(0, 2),\n                        year: paymentMethod.initializationData.expDate.toString().substr(2, 2),\n                    },\n                    ccNumber: paymentMethod.initializationData.accountNum,\n                    accountMask: paymentMethod.initializationData.accountMask,\n                    extraData: riskToken ? { riskToken } : undefined,\n                };\n\n                return {\n                    methodId: this._methodId,\n                    paymentData,\n                };\n            });\n    }\n\n    private _createOrder(payment: Payment, useStoreCredit?: boolean, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(this._orderActionCreator.submitOrder({ useStoreCredit }, options))\n            .then(() => this._store.dispatch(this._paymentActionCreator.submitPayment(payment)));\n    }\n\n    @bind\n    private _handleWalletButtonClick(event: Event): void {\n        event.preventDefault();\n\n        this._displayWallet();\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport KlarnaCredit from './klarna-credit';\nimport KlarnaWindow from './klarna-window';\n\nconst SDK_URL = '//credit.klarnacdn.net/lib/v1/api.js';\n\nexport default class KlarnaScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader\n    ) {}\n\n    load(): Promise<KlarnaCredit> {\n        return this._scriptLoader.loadScript(SDK_URL)\n            .then(() => (window as KlarnaWindow).Klarna.Credit);\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { SquareFormFactory, SquareFormOptions } from './square-form';\nimport SquareWindow from './square-window';\n\nexport default class SquareScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader\n    ) {}\n\n    load(): Promise<SquareFormFactory> {\n        const scriptURI = '//js.squareup.com/v2/paymentform';\n\n        return this._scriptLoader.loadScript(scriptURI)\n            .then(() => (options: SquareFormOptions) =>\n                new (window as SquareWindow).SqPaymentForm(options)\n            );\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\n\nimport WepayRisk from './wepay-risk';\nimport WepayWindow from './wepay-window';\n\nconst SCRIPT_SRC = '//static.wepay.com/min/js/risk.1.latest.js';\n\nexport default class WepayRiskClient {\n    private _riskClient?: WepayRisk;\n\n    constructor(\n        private _scriptLoader: ScriptLoader\n    ) {}\n\n    initialize(): Promise<WepayRiskClient> {\n        return this._scriptLoader\n            .loadScript(SCRIPT_SRC)\n            .then(() => this._riskClient = (window as WepayWindow).WePay.risk)\n            .then(() => this);\n    }\n\n    getRiskToken(): string {\n        if (!this._riskClient) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        this._riskClient.generate_risk_token();\n\n        return this._riskClient.get_risk_token();\n    }\n}\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { RequestSender } from '@bigcommerce/request-sender';\nimport { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport { BillingAddressActionCreator, BillingAddressRequestSender } from '../billing';\nimport { CheckoutActionCreator, CheckoutRequestSender, CheckoutStore, CheckoutValidator } from '../checkout';\nimport { ConfigActionCreator, ConfigRequestSender } from '../config';\nimport { OrderActionCreator, OrderRequestSender } from '../order';\nimport { RemoteCheckoutActionCreator, RemoteCheckoutRequestSender } from '../remote-checkout';\n\nimport PaymentActionCreator from './payment-action-creator';\nimport PaymentMethodActionCreator from './payment-method-action-creator';\nimport PaymentMethodRequestSender from './payment-method-request-sender';\nimport PaymentRequestSender from './payment-request-sender';\nimport PaymentStrategyActionCreator from './payment-strategy-action-creator';\nimport PaymentStrategyRegistry from './payment-strategy-registry';\nimport {\n    AfterpayPaymentStrategy,\n    AmazonPayPaymentStrategy,\n    BraintreeCreditCardPaymentStrategy,\n    BraintreePaypalPaymentStrategy,\n    BraintreeVisaCheckoutPaymentStrategy,\n    CreditCardPaymentStrategy,\n    KlarnaPaymentStrategy,\n    LegacyPaymentStrategy,\n    NoPaymentDataRequiredPaymentStrategy,\n    OfflinePaymentStrategy,\n    OffsitePaymentStrategy,\n    PaypalExpressPaymentStrategy,\n    PaypalProPaymentStrategy,\n    SagePayPaymentStrategy,\n    SquarePaymentStrategy,\n    WepayPaymentStrategy,\n} from './strategies';\nimport { AfterpayScriptLoader } from './strategies/afterpay';\nimport { AmazonPayScriptLoader } from './strategies/amazon-pay';\nimport { createBraintreePaymentProcessor, createBraintreeVisaCheckoutPaymentProcessor, VisaCheckoutScriptLoader } from './strategies/braintree';\nimport { ChasePayPaymentStrategy, ChasePayScriptLoader } from './strategies/chasepay';\nimport { KlarnaScriptLoader } from './strategies/klarna';\nimport { PaypalScriptLoader } from './strategies/paypal';\nimport { SquareScriptLoader } from './strategies/square';\nimport { WepayRiskClient } from './strategies/wepay';\n\nexport default function createPaymentStrategyRegistry(\n    store: CheckoutStore,\n    paymentClient: any,\n    requestSender: RequestSender\n) {\n    const registry = new PaymentStrategyRegistry(store, { defaultToken: 'creditcard' });\n    const scriptLoader = getScriptLoader();\n    const braintreePaymentProcessor = createBraintreePaymentProcessor(scriptLoader);\n    const checkoutRequestSender = new CheckoutRequestSender(requestSender);\n    const checkoutValidator = new CheckoutValidator(checkoutRequestSender);\n    const orderActionCreator = new OrderActionCreator(\n        new OrderRequestSender(requestSender),\n        checkoutValidator\n    );\n    const paymentActionCreator = new PaymentActionCreator(\n        new PaymentRequestSender(paymentClient),\n        orderActionCreator\n    );\n\n    const paymentMethodActionCreator = new PaymentMethodActionCreator(new PaymentMethodRequestSender(requestSender));\n    const remoteCheckoutActionCreator = new RemoteCheckoutActionCreator(\n        new RemoteCheckoutRequestSender(requestSender)\n    );\n    const configRequestSender = new ConfigRequestSender(requestSender);\n    const configActionCreator = new ConfigActionCreator(configRequestSender);\n    const checkoutActionCreator = new CheckoutActionCreator(checkoutRequestSender, configActionCreator);\n    const paymentStrategyActionCreator = new PaymentStrategyActionCreator(registry, orderActionCreator);\n\n    registry.register('afterpay', () =>\n        new AfterpayPaymentStrategy(\n            store,\n            checkoutValidator,\n            orderActionCreator,\n            paymentActionCreator,\n            paymentMethodActionCreator,\n            remoteCheckoutActionCreator,\n            new AfterpayScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register('amazon', () =>\n        new AmazonPayPaymentStrategy(\n            store,\n            orderActionCreator,\n            new BillingAddressActionCreator(\n                new BillingAddressRequestSender(requestSender)\n            ),\n            remoteCheckoutActionCreator,\n            new AmazonPayScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register('creditcard', () =>\n        new CreditCardPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator\n        )\n    );\n\n    registry.register('klarna', () =>\n        new KlarnaPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentMethodActionCreator,\n            remoteCheckoutActionCreator,\n            new KlarnaScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register('legacy', () =>\n        new LegacyPaymentStrategy(\n            store,\n            orderActionCreator\n        )\n    );\n\n    registry.register('offline', () =>\n        new OfflinePaymentStrategy(\n            store,\n            orderActionCreator\n        )\n    );\n\n    registry.register('offsite', () =>\n        new OffsitePaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator\n        )\n    );\n\n    registry.register('paypal', () =>\n        new PaypalProPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator\n        )\n    );\n\n    registry.register('paypalexpress', () =>\n        new PaypalExpressPaymentStrategy(\n            store,\n            orderActionCreator,\n            new PaypalScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register('paypalexpresscredit', () =>\n        new PaypalExpressPaymentStrategy(\n            store,\n            orderActionCreator,\n            new PaypalScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register('sagepay', () =>\n        new SagePayPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator,\n            createFormPoster()\n        )\n    );\n\n    registry.register('squarev2', () =>\n        new SquarePaymentStrategy(\n            store,\n            checkoutActionCreator,\n            orderActionCreator,\n            paymentActionCreator,\n            paymentMethodActionCreator,\n            paymentStrategyActionCreator,\n            requestSender,\n            new SquareScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register('nopaymentdatarequired', () =>\n        new NoPaymentDataRequiredPaymentStrategy(\n            store,\n            orderActionCreator\n        )\n    );\n\n    registry.register('braintree', () =>\n        new BraintreeCreditCardPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator,\n            paymentMethodActionCreator,\n            braintreePaymentProcessor\n        )\n    );\n\n    registry.register('braintreepaypal', () =>\n        new BraintreePaypalPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator,\n            paymentMethodActionCreator,\n            braintreePaymentProcessor\n        )\n    );\n\n    registry.register('braintreepaypalcredit', () =>\n        new BraintreePaypalPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator,\n            paymentMethodActionCreator,\n            braintreePaymentProcessor,\n            true\n        )\n    );\n\n    registry.register('braintreevisacheckout', () =>\n        new BraintreeVisaCheckoutPaymentStrategy(\n            store,\n            checkoutActionCreator,\n            paymentMethodActionCreator,\n            paymentStrategyActionCreator,\n            paymentActionCreator,\n            orderActionCreator,\n            createBraintreeVisaCheckoutPaymentProcessor(scriptLoader, requestSender),\n            new VisaCheckoutScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register('chasepay', () =>\n        new ChasePayPaymentStrategy(\n            store,\n            checkoutActionCreator,\n            orderActionCreator,\n            paymentActionCreator,\n            paymentMethodActionCreator,\n            paymentStrategyActionCreator,\n            requestSender,\n            new ChasePayScriptLoader(getScriptLoader()),\n            new WepayRiskClient(scriptLoader)\n        )\n    );\n\n    registry.register('wepay', () =>\n        new WepayPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator,\n            new WepayRiskClient(scriptLoader)\n        )\n    );\n\n    return registry;\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport BraintreePaymentProcessor from './braintree-payment-processor';\nimport BraintreeScriptLoader from './braintree-script-loader';\nimport BraintreeSDKCreator from './braintree-sdk-creator';\n\nexport default function createBraintreePaymentProcessor(scriptLoader: ScriptLoader) {\n    const braintreeScriptLoader = new BraintreeScriptLoader(scriptLoader);\n    const braintreeSDKCreator = new BraintreeSDKCreator(braintreeScriptLoader);\n\n    return new BraintreePaymentProcessor(braintreeSDKCreator);\n}\n","import { createAction, createErrorAction, Action, ThunkAction } from '@bigcommerce/data-store';\nimport { Observable } from 'rxjs/Observable';\nimport { Observer } from 'rxjs/Observer';\n\nimport { Address } from '../../address';\nimport { InternalCheckoutSelectors, ReadableCheckoutStore } from '../../checkout';\nimport { addMinutes, isFuture } from '../../common/date-time';\nimport { MissingDataError, MissingDataErrorType } from '../../common/error/errors';\n\nimport { SessionContext, VaultAccessToken } from './instrument';\nimport * as actionTypes from './instrument-action-types';\nimport InstrumentRequestSender from './instrument-request-sender';\n\nexport default class InstrumentActionCreator {\n    constructor(\n        private _instrumentRequestSender: InstrumentRequestSender\n    ) {}\n\n    loadInstruments(): ThunkAction<Action, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<Action>) => {\n            observer.next(createAction(actionTypes.LOAD_INSTRUMENTS_REQUESTED));\n\n            const session = this._getSessionContext(store);\n            const token = this._getCurrentAccessToken(store);\n            const shippingAddress = this._getShippingAddress(store);\n\n            return this._getValidAccessToken(token)\n                .then(currentToken =>\n                    this._instrumentRequestSender.loadInstruments({\n                            ...session,\n                            authToken: currentToken.vaultAccessToken,\n                        },\n                        shippingAddress\n                    )\n                        .then(({ body }) => {\n                            observer.next(createAction(actionTypes.LOAD_INSTRUMENTS_SUCCEEDED, body, currentToken));\n                            observer.complete();\n                        })\n                )\n                .catch(response => {\n                    observer.error(createErrorAction(actionTypes.LOAD_INSTRUMENTS_FAILED, response));\n                });\n        });\n    }\n\n    deleteInstrument(instrumentId: string): ThunkAction<Action, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<Action>) => {\n            observer.next(createAction(actionTypes.DELETE_INSTRUMENT_REQUESTED, undefined, { instrumentId }));\n\n            const session = this._getSessionContext(store);\n            const token = this._getCurrentAccessToken(store);\n\n            return this._getValidAccessToken(token)\n                .then(currentToken =>\n                    this._instrumentRequestSender.deleteInstrument({ ...session, authToken: currentToken.vaultAccessToken }, instrumentId)\n                        .then(() => {\n                            observer.next(createAction(actionTypes.DELETE_INSTRUMENT_SUCCEEDED, undefined, {\n                                instrumentId,\n                                ...currentToken,\n                            }));\n                            observer.complete();\n                        })\n                )\n                .catch(response => {\n                    observer.error(createErrorAction(actionTypes.DELETE_INSTRUMENT_FAILED, response, { instrumentId }));\n                });\n        });\n    }\n\n    private _isValidVaultAccessToken(token: VaultAccessToken): boolean {\n        if (!token || !token.vaultAccessToken) {\n            return false;\n        }\n\n        const expiryBuffer = 2;\n        const expiry = addMinutes(new Date(token.vaultAccessExpiry), expiryBuffer);\n\n        return isFuture(expiry);\n    }\n\n    private _getCurrentAccessToken(store: ReadableCheckoutStore): VaultAccessToken | undefined {\n        const { instruments } = store.getState();\n        const meta = instruments.getInstrumentsMeta();\n\n        if (!meta) {\n            return;\n        }\n\n        return {\n            vaultAccessToken: meta.vaultAccessToken,\n            vaultAccessExpiry: meta.vaultAccessExpiry,\n        };\n    }\n\n    private _getValidAccessToken(token?: VaultAccessToken): Promise<VaultAccessToken> {\n        return token && this._isValidVaultAccessToken(token)\n            ? Promise.resolve(token)\n            : this._instrumentRequestSender.getVaultAccessToken()\n                .then(({ body = {} }: any) => ({\n                    vaultAccessToken: body.data.token,\n                    vaultAccessExpiry: body.data.expires_at,\n                }));\n    }\n\n    private _getShippingAddress(store: ReadableCheckoutStore): Address | undefined {\n        const state = store.getState();\n\n        return state.shippingAddress.getShippingAddress();\n    }\n\n    private _getSessionContext(store: ReadableCheckoutStore): SessionContext {\n        const state = store.getState();\n        const config = state.config.getStoreConfig();\n        const cart = state.cart.getCart();\n\n        if (!config) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n        }\n\n        if (!cart) {\n            throw new MissingDataError(MissingDataErrorType.MissingCart);\n        }\n\n        const { customerId } = cart;\n        const { storeId } = config.storeProfile;\n\n        return {\n            customerId,\n            storeId,\n        };\n    }\n}\n","export default function isFuture(date: Date): boolean {\n    return date.valueOf() > Date.now();\n}\n","export default function addMinutes(date: Date, amount: number): Date {\n    const newDate = new Date(date.getTime());\n\n    newDate.setMinutes(date.getMinutes() + amount);\n\n    return newDate;\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport Instrument from './instrument';\nimport {\n    InstrumentsResponseBody,\n    InstrumentErrorResponseBody,\n    RawInstrumentsResponseBody,\n    RawInstrumentErrorResponseBody,\n    RawInstrumentResponseBody,\n} from './instrument-response-body';\n\nexport default class InstrumentResponseTransformer {\n    transformResponse(response: Response<RawInstrumentsResponseBody>): Response<InstrumentsResponseBody> {\n        const payload = this._transformResponse(response);\n        const { vaulted_instruments } = payload.body;\n\n        payload.body = {\n            vaultedInstruments: this._transformVaultedInstruments(vaulted_instruments),\n        };\n\n        return payload;\n    }\n\n    transformErrorResponse(response: Response<RawInstrumentErrorResponseBody>): Response<InstrumentErrorResponseBody> {\n        return this._transformResponse(response);\n    }\n\n    private _transformVaultedInstruments(vaultedInstruments: RawInstrumentResponseBody[] = []): Instrument[] {\n        return vaultedInstruments.map(instrument => ({\n            bigpayToken: instrument.bigpay_token,\n            provider: instrument.provider,\n            iin: instrument.iin,\n            last4: instrument.last_4,\n            expiryMonth: instrument.expiry_month,\n            expiryYear: instrument.expiry_year,\n            brand: instrument.brand,\n            trustedShippingAddress: instrument.trusted_shipping_address,\n        }));\n    }\n\n    private _transformResponse({ data: body, status, statusText }: any): Response {\n        return {\n            headers: {},\n            body,\n            status,\n            statusText,\n        };\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { mapToInternalAddress, Address } from '../../address';\nimport { RequestOptions } from '../../common/http-request';\n\nimport { InstrumentRequestContext } from './instrument';\nimport {\n    InstrumentsResponseBody,\n    InstrumentErrorResponseBody,\n    RawInstrumentsResponseBody,\n    RawInstrumentErrorResponseBody,\n    VaultAccessTokenResponseBody,\n} from './instrument-response-body';\nimport InstrumentResponseTransformer from './instrument-response-transformer';\n\nexport default class InstrumentRequestSender {\n    private _transformer: InstrumentResponseTransformer;\n\n    constructor(\n        private _client: any,\n        private _requestSender: RequestSender\n    ) {\n        this._transformer = new InstrumentResponseTransformer();\n    }\n\n    getVaultAccessToken({ timeout }: RequestOptions = {}): Promise<Response<VaultAccessTokenResponseBody>> {\n        const url = '/internalapi/v1/checkout/payments/vault-access-token';\n\n        return this._requestSender.get(url, { timeout });\n    }\n\n    loadInstruments(requestContext: InstrumentRequestContext, shippingAddress?: Address): Promise<Response<InstrumentsResponseBody | InstrumentErrorResponseBody>> {\n        return (shippingAddress) ?\n            this._loadInstrumentsWithAddress(requestContext, shippingAddress) :\n            this._loadInstruments(requestContext);\n    }\n\n    deleteInstrument(requestContext: InstrumentRequestContext, instrumentId: string): Promise<Response<InstrumentsResponseBody | InstrumentErrorResponseBody>> {\n        const payload = {\n            ...requestContext,\n            instrumentId,\n        };\n\n        return new Promise((resolve, reject) => {\n            this._client.deleteShopperInstrument(payload, (error: Response<RawInstrumentErrorResponseBody>, response: Response<RawInstrumentsResponseBody>) => {\n                if (error) {\n                    reject(this._transformer.transformErrorResponse(error));\n                } else {\n                    resolve(this._transformer.transformResponse(response));\n                }\n            });\n        });\n    }\n\n    private _loadInstruments(requestContext: InstrumentRequestContext): Promise<Response<InstrumentsResponseBody | InstrumentErrorResponseBody>> {\n        return new Promise((resolve, reject) => {\n            this._client.loadInstruments(requestContext, (error: Response<RawInstrumentErrorResponseBody>, response: Response<RawInstrumentsResponseBody>) => {\n                if (error) {\n                    reject(this._transformer.transformErrorResponse(error));\n                } else {\n                    resolve(this._transformer.transformResponse(response));\n                }\n            });\n        });\n    }\n\n    private _loadInstrumentsWithAddress(requestContext: InstrumentRequestContext, shippingAddress: Address): Promise<Response<InstrumentsResponseBody>> {\n        const payload = {\n            ...requestContext,\n            shippingAddress: mapToInternalAddress(shippingAddress),\n        };\n\n        return new Promise((resolve, reject) => {\n            this._client.loadInstrumentsWithAddress(payload, (error: Response<RawInstrumentErrorResponseBody>, response: Response<RawInstrumentsResponseBody>) => {\n                if (error) {\n                    reject(this._transformer.transformErrorResponse(error));\n                } else {\n                    resolve(this._transformer.transformResponse(response));\n                }\n            });\n        });\n    }\n}\n","import { Address } from '../address';\nimport { BillingAddressSelector } from '../billing';\nimport { Cart, CartSelector } from '../cart';\nimport { selector } from '../common/selector';\nimport { ConfigSelector } from '../config';\nimport { StoreConfig } from '../config/config';\nimport { Coupon, CouponSelector, GiftCertificate, GiftCertificateSelector } from '../coupon';\nimport { Customer, CustomerSelector } from '../customer';\nimport { FormField, FormSelector } from '../form';\nimport { Country, CountrySelector } from '../geography';\nimport { Order, OrderSelector } from '../order';\nimport { PaymentMethod, PaymentMethodSelector, PaymentSelector } from '../payment';\nimport { Instrument, InstrumentSelector } from '../payment/instrument';\nimport {\n    Consignment,\n    ConsignmentSelector,\n    ShippingAddressSelector,\n    ShippingCountrySelector,\n    ShippingOption,\n} from '../shipping';\n\nimport Checkout from './checkout';\nimport CheckoutSelector from './checkout-selector';\nimport InternalCheckoutSelectors from './internal-checkout-selectors';\n\n/**\n * Responsible for getting the state of the current checkout.\n *\n * This object has a set of methods that allow you to get a specific piece of\n * checkout information, such as shipping and billing details.\n */\n@selector\nexport default class CheckoutStoreSelector {\n    private _billingAddress: BillingAddressSelector;\n    private _cart: CartSelector;\n    private _checkout: CheckoutSelector;\n    private _config: ConfigSelector;\n    private _consignments: ConsignmentSelector;\n    private _countries: CountrySelector;\n    private _coupons: CouponSelector;\n    private _customer: CustomerSelector;\n    private _form: FormSelector;\n    private _giftCertificates: GiftCertificateSelector;\n    private _instruments: InstrumentSelector;\n    private _order: OrderSelector;\n    private _payment: PaymentSelector;\n    private _paymentMethods: PaymentMethodSelector;\n    private _shippingAddress: ShippingAddressSelector;\n    private _shippingCountries: ShippingCountrySelector;\n\n    /**\n     * @internal\n     */\n    constructor(selectors: InternalCheckoutSelectors) {\n        this._billingAddress = selectors.billingAddress;\n        this._cart = selectors.cart;\n        this._checkout = selectors.checkout;\n        this._config = selectors.config;\n        this._consignments = selectors.consignments;\n        this._countries = selectors.countries;\n        this._coupons = selectors.coupons;\n        this._customer = selectors.customer;\n        this._form = selectors.form;\n        this._giftCertificates = selectors.giftCertificates;\n        this._instruments = selectors.instruments;\n        this._order = selectors.order;\n        this._payment = selectors.payment;\n        this._paymentMethods = selectors.paymentMethods;\n        this._shippingAddress = selectors.shippingAddress;\n        this._shippingCountries = selectors.shippingCountries;\n    }\n\n    /**\n     * Gets the current checkout.\n     *\n     * @returns The current checkout if it is loaded, otherwise undefined.\n     */\n    getCheckout(): Checkout | undefined {\n        return this._checkout.getCheckout();\n    }\n\n    /**\n     * Gets the current order.\n     *\n     * @returns The current order if it is loaded, otherwise undefined.\n     */\n    getOrder(): Order | undefined {\n        return this._order.getOrder();\n    }\n\n    /**\n     * Gets the checkout configuration of a store.\n     *\n     * @returns The configuration object if it is loaded, otherwise undefined.\n     */\n    getConfig(): StoreConfig | undefined {\n        return this._config.getStoreConfig();\n    }\n\n    /**\n     * Gets the shipping address of the current checkout.\n     *\n     * If the address is partially complete, it may not have shipping options\n     * associated with it.\n     *\n     * @returns The shipping address object if it is loaded, otherwise\n     * undefined.\n     */\n    getShippingAddress(): Address | undefined {\n        const shippingAddress = this._shippingAddress.getShippingAddress();\n        const context = this._config.getContextConfig();\n\n        if (!shippingAddress) {\n            if (!context || !context.geoCountryCode) {\n                return;\n            }\n\n            return {\n                firstName: '',\n                lastName: '',\n                company: '',\n                address1: '',\n                address2: '',\n                city: '',\n                stateOrProvince: '',\n                stateOrProvinceCode: '',\n                postalCode: '',\n                country: '',\n                phone: '',\n                customFields: [],\n                countryCode: context.geoCountryCode,\n            };\n        }\n\n        return shippingAddress;\n    }\n\n    /**\n     * Gets a list of shipping options available for the shipping address.\n     *\n     * If there is no shipping address assigned to the current checkout, the\n     * list of shipping options will be empty.\n     *\n     * @returns The list of shipping options if any, otherwise undefined.\n     */\n    getShippingOptions(): ShippingOption[] | undefined {\n        const consignments = this._consignments.getConsignments();\n\n        if (consignments && consignments.length) {\n            return consignments[0].availableShippingOptions;\n        }\n\n        return;\n    }\n\n    /**\n     * Gets a list of consignments.\n     *\n     * If there are no consignments created for to the current checkout, the\n     * list will be empty.\n     *\n     * @returns The list of consignments if any, otherwise undefined.\n     */\n    getConsignments(): Consignment[] | undefined {\n        return this._consignments.getConsignments();\n    }\n\n    /**\n     * Gets the selected shipping option for the current checkout.\n     *\n     * @returns The shipping option object if there is a selected option,\n     * otherwise undefined.\n     */\n    getSelectedShippingOption(): ShippingOption | undefined {\n        const consignments = this._consignments.getConsignments();\n\n        if (!consignments || !consignments.length) {\n            return;\n        }\n\n        return consignments[0].selectedShippingOption;\n    }\n\n    /**\n     * Gets a list of countries available for shipping.\n     *\n     * @returns The list of countries if it is loaded, otherwise undefined.\n     */\n    getShippingCountries(): Country[] | undefined {\n        return this._shippingCountries.getShippingCountries();\n    }\n\n    /**\n     * Gets the billing address of an order.\n     *\n     * @returns The billing address object if it is loaded, otherwise undefined.\n     */\n    getBillingAddress(): Address | undefined {\n        return this._billingAddress.getBillingAddress();\n    }\n\n    /**\n     * Gets a list of countries available for billing.\n     *\n     * @returns The list of countries if it is loaded, otherwise undefined.\n     */\n    getBillingCountries(): Country[] | undefined {\n        return this._countries.getCountries();\n    }\n\n    /**\n     * Gets a list of payment methods available for checkout.\n     *\n     * @returns The list of payment methods if it is loaded, otherwise undefined.\n     */\n    getPaymentMethods(): PaymentMethod[] | undefined {\n        return this._paymentMethods.getPaymentMethods();\n    }\n\n    /**\n     * Gets a payment method by an id.\n     *\n     * The method returns undefined if unable to find a payment method with the\n     * specified id, either because it is not available for the customer, or it\n     * is not loaded.\n     *\n     * @param methodId - The identifier of the payment method.\n     * @param gatewayId - The identifier of a payment provider providing the\n     * payment method.\n     * @returns The payment method object if loaded and available, otherwise,\n     * undefined.\n     */\n    getPaymentMethod(methodId: string, gatewayId?: string): PaymentMethod | undefined {\n        return this._paymentMethods.getPaymentMethod(methodId, gatewayId);\n    }\n\n    /**\n     * Gets the payment method that is selected for checkout.\n     *\n     * @returns The payment method object if there is a selected method;\n     * undefined if otherwise.\n     */\n    getSelectedPaymentMethod(): PaymentMethod | undefined {\n        const payment = this._payment.getPaymentId();\n\n        return payment && this._paymentMethods.getPaymentMethod(payment.providerId, payment.gatewayId);\n    }\n\n    /**\n     * Gets the current cart.\n     *\n     * @returns The current cart object if it is loaded, otherwise undefined.\n     */\n    getCart(): Cart | undefined {\n        return this._cart.getCart();\n    }\n\n    /**\n     * Gets a list of coupons that are applied to the current checkout.\n     *\n     * @returns The list of applied coupons if there is any, otherwise undefined.\n     */\n    getCoupons(): Coupon[] | undefined {\n        return this._coupons.getCoupons();\n    }\n\n    /**\n     * Gets a list of gift certificates that are applied to the current checkout.\n     *\n     * @returns The list of applied gift certificates if there is any, otherwise undefined.\n     */\n    getGiftCertificates(): GiftCertificate[] | undefined {\n        return this._giftCertificates.getGiftCertificates();\n    }\n\n    /**\n     * Gets the current customer.\n     *\n     * @returns The current customer object if it is loaded, otherwise\n     * undefined.\n     */\n    getCustomer(): Customer | undefined {\n        return this._customer.getCustomer();\n    }\n\n    /**\n     * Checks if payment data is required or not.\n     *\n     * If payment data is required, customers should be prompted to enter their\n     * payment details.\n     *\n     * ```js\n     * if (state.checkout.isPaymentDataRequired()) {\n     *     // Render payment form\n     * } else {\n     *     // Render \"Payment is not required for this order\" message\n     * }\n     * ```\n     *\n     * @param useStoreCredit - If true, check whether payment data is required\n     * with store credit applied; otherwise, check without store credit.\n     * @returns True if payment data is required, otherwise false.\n     */\n    isPaymentDataRequired(useStoreCredit?: boolean): boolean {\n        return this._payment.isPaymentDataRequired(useStoreCredit);\n    }\n\n    /**\n     * Checks if payment data is submitted or not.\n     *\n     * If payment data is already submitted using a payment method, customers\n     * should not be prompted to enter their payment details again.\n     *\n     * @param methodId - The identifier of the payment method.\n     * @param gatewayId - The identifier of a payment provider providing the\n     * payment method.\n     * @returns True if payment data is submitted, otherwise false.\n     */\n    isPaymentDataSubmitted(methodId: string, gatewayId?: string): boolean {\n        return this._payment.isPaymentDataSubmitted(this.getPaymentMethod(methodId, gatewayId));\n    }\n\n    /**\n     * Gets a list of payment instruments associated with the current customer.\n     *\n     * @returns The list of payment instruments if it is loaded, otherwise undefined.\n     */\n    getInstruments(): Instrument[] | undefined {\n        return this._instruments.getInstruments();\n    }\n\n    /**\n     * Gets a set of form fields that should be presented to customers in order\n     * to capture their billing address for a specific country.\n     *\n     * @param countryCode - A 2-letter country code (ISO 3166-1 alpha-2).\n     * @returns The set of billing address form fields if it is loaded,\n     * otherwise undefined.\n     */\n    getBillingAddressFields(countryCode: string): FormField[] {\n        return this._form.getBillingAddressFields(this.getBillingCountries(), countryCode);\n    }\n\n    /**\n     * Gets a set of form fields that should be presented to customers in order\n     * to capture their shipping address for a specific country.\n     *\n     * @param countryCode - A 2-letter country code (ISO 3166-1 alpha-2).\n     * @returns The set of shipping address form fields if it is loaded,\n     * otherwise undefined.\n     */\n    getShippingAddressFields(countryCode: string): FormField[] {\n        return this._form.getShippingAddressFields(this.getShippingCountries(), countryCode);\n    }\n}\n","import { BillingAddressSelector } from '../billing';\nimport { CartSelector } from '../cart';\nimport { selector } from '../common/selector';\nimport { ConfigSelector } from '../config';\nimport { CouponSelector, GiftCertificateSelector } from '../coupon';\nimport { CustomerStrategySelector } from '../customer';\nimport { CountrySelector } from '../geography';\nimport { OrderSelector } from '../order';\nimport { PaymentMethodSelector, PaymentStrategySelector } from '../payment';\nimport { InstrumentSelector } from '../payment/instrument';\nimport { ConsignmentSelector, ShippingCountrySelector, ShippingStrategySelector } from '../shipping';\n\nimport CheckoutSelector from './checkout-selector';\nimport InternalCheckoutSelectors from './internal-checkout-selectors';\n\n/**\n * Responsible for getting the error of any asynchronous checkout action, if\n * there is any.\n *\n * This object has a set of getters that would return an error if an action is\n * not executed successfully. For example, if you are unable to submit an order,\n * you can use this object to retrieve the reason for the failure.\n */\n@selector\nexport default class CheckoutStoreErrorSelector {\n    private _billingAddress: BillingAddressSelector;\n    private _cart: CartSelector;\n    private _checkout: CheckoutSelector;\n    private _config: ConfigSelector;\n    private _consignments: ConsignmentSelector;\n    private _countries: CountrySelector;\n    private _coupons: CouponSelector;\n    private _customerStrategies: CustomerStrategySelector;\n    private _giftCertificates: GiftCertificateSelector;\n    private _instruments: InstrumentSelector;\n    private _order: OrderSelector;\n    private _paymentMethods: PaymentMethodSelector;\n    private _paymentStrategies: PaymentStrategySelector;\n    private _shippingCountries: ShippingCountrySelector;\n    private _shippingStrategies: ShippingStrategySelector;\n\n    /**\n     * @internal\n     */\n    constructor(selectors: InternalCheckoutSelectors) {\n        this._billingAddress = selectors.billingAddress;\n        this._cart = selectors.cart;\n        this._checkout = selectors.checkout;\n        this._config = selectors.config;\n        this._consignments = selectors.consignments;\n        this._countries = selectors.countries;\n        this._coupons = selectors.coupons;\n        this._customerStrategies = selectors.customerStrategies;\n        this._giftCertificates = selectors.giftCertificates;\n        this._instruments = selectors.instruments;\n        this._order = selectors.order;\n        this._paymentMethods = selectors.paymentMethods;\n        this._paymentStrategies = selectors.paymentStrategies;\n        this._shippingCountries = selectors.shippingCountries;\n        this._shippingStrategies = selectors.shippingStrategies;\n    }\n\n    /**\n     * Gets the error of any checkout action that has failed.\n     *\n     * @returns The error object if unable to perform any checkout action,\n     * otherwise undefined.\n     */\n    getError(): Error | undefined {\n        return this.getLoadCheckoutError() ||\n            this.getSubmitOrderError() ||\n            this.getFinalizeOrderError() ||\n            this.getLoadOrderError() ||\n            this.getLoadCartError() ||\n            this.getLoadBillingCountriesError() ||\n            this.getLoadShippingCountriesError() ||\n            this.getLoadPaymentMethodsError() ||\n            this.getLoadPaymentMethodError() ||\n            this.getInitializePaymentError() ||\n            this.getLoadShippingOptionsError() ||\n            this.getSelectShippingOptionError() ||\n            this.getSignInError() ||\n            this.getSignOutError() ||\n            this.getInitializeCustomerError() ||\n            this.getUpdateShippingAddressError() ||\n            this.getUpdateBillingAddressError() ||\n            this.getContinueAsGuestError() ||\n            this.getUpdateConsignmentError() ||\n            this.getCreateConsignmentsError() ||\n            this.getDeleteConsignmentError() ||\n            this.getInitializeShippingError() ||\n            this.getApplyCouponError() ||\n            this.getRemoveCouponError() ||\n            this.getApplyGiftCertificateError() ||\n            this.getRemoveGiftCertificateError() ||\n            this.getLoadInstrumentsError() ||\n            this.getDeleteInstrumentError() ||\n            this.getLoadConfigError();\n    }\n\n    /**\n     * Returns an error if unable to load the current checkout.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadCheckoutError(): Error | undefined {\n        return this._checkout.getLoadError();\n    }\n\n    /**\n     * Returns an error if unable to update the current checkout.\n     *\n     * @returns The error object if unable to update, otherwise undefined.\n     */\n    getUpdateCheckoutError(): Error | undefined {\n        return this._checkout.getUpdateError();\n    }\n\n    /**\n     * Returns an error if unable to submit the current order.\n     *\n     * @returns The error object if unable to submit, otherwise undefined.\n     */\n    getSubmitOrderError(): Error | undefined {\n        return this._paymentStrategies.getExecuteError();\n    }\n\n    /**\n     * Returns an error if unable to finalize the current order.\n     *\n     * @returns The error object if unable to finalize, otherwise undefined.\n     */\n    getFinalizeOrderError(): Error | undefined {\n        return this._paymentStrategies.getFinalizeError();\n    }\n\n    /**\n     * Returns an error if unable to load the current order.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadOrderError(): Error | undefined {\n        return this._order.getLoadError();\n    }\n\n    /**\n     * Returns an error if unable to load the current cart.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadCartError(): Error | undefined {\n        return this._cart.getLoadError();\n    }\n\n    /**\n     * Returns an error if unable to load billing countries.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadBillingCountriesError(): Error | undefined {\n        return this._countries.getLoadError();\n    }\n\n    /**\n     * Returns an error if unable to load shipping countries.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadShippingCountriesError(): Error | undefined {\n        return this._shippingCountries.getLoadError();\n    }\n\n    /**\n     * Returns an error if unable to load payment methods.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadPaymentMethodsError(): Error | undefined {\n        return this._paymentMethods.getLoadError();\n    }\n\n    /**\n     * Returns an error if unable to load a specific payment method.\n     *\n     * @param methodId - The identifier of the payment method to load.\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadPaymentMethodError(methodId?: string): Error | undefined {\n        return this._paymentMethods.getLoadMethodError(methodId);\n    }\n\n    /**\n     * Returns an error if unable to initialize a specific payment method.\n     *\n     * @param methodId - The identifier of the payment method to initialize.\n     * @returns The error object if unable to initialize, otherwise undefined.\n     */\n    getInitializePaymentError(methodId?: string): Error | undefined {\n        return this._paymentStrategies.getInitializeError(methodId);\n    }\n\n    /**\n     * Returns an error if unable to sign in.\n     *\n     * @returns The error object if unable to sign in, otherwise undefined.\n     */\n    getSignInError(): Error | undefined {\n        return this._customerStrategies.getSignInError();\n    }\n\n    /**\n     * Returns an error if unable to sign out.\n     *\n     * @returns The error object if unable to sign out, otherwise undefined.\n     */\n    getSignOutError(): Error | undefined {\n        return this._customerStrategies.getSignOutError();\n    }\n\n    /**\n     * Returns an error if unable to initialize the customer step of a checkout\n     * process.\n     *\n     * @param methodId - The identifer of the initialization method to execute.\n     * @returns The error object if unable to initialize, otherwise undefined.\n     */\n    getInitializeCustomerError(methodId?: string): Error | undefined {\n        return this._customerStrategies.getInitializeError(methodId);\n    }\n\n    /**\n     * Returns an error if unable to load shipping options.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadShippingOptionsError(): Error | undefined {\n        return this._consignments.getLoadShippingOptionsError();\n    }\n\n    /**\n     * Returns an error if unable to select a shipping option.\n     *\n     * A consignment ID should be provided when checking for an error for a\n     * specific consignment, otherwise it will check for all available consignments.\n     *\n     * @param consignmentId - The identifier of the consignment to be checked.\n     * @returns The error object if unable to select, otherwise undefined.\n     */\n    getSelectShippingOptionError(consignmentId?: string): Error | undefined {\n        return this._shippingStrategies.getSelectOptionError() ||\n            this._consignments.getUpdateShippingOptionError(consignmentId);\n    }\n\n    /**\n     * Returns an error if unable to continue as guest.\n     *\n     * @returns The error object if unable to continue, otherwise undefined.\n     */\n    getContinueAsGuestError(): Error | undefined {\n        return this._billingAddress.getContinueAsGuestError();\n    }\n\n    /**\n     * Returns an error if unable to update billing address.\n     *\n     * @returns The error object if unable to update, otherwise undefined.\n     */\n    getUpdateBillingAddressError(): Error | undefined {\n        return this._billingAddress.getUpdateError();\n    }\n\n    /**\n     * Returns an error if unable to update shipping address.\n     *\n     * @returns The error object if unable to update, otherwise undefined.\n     */\n    getUpdateShippingAddressError(): Error | undefined {\n        return this._shippingStrategies.getUpdateAddressError();\n    }\n\n    /**\n     * Returns an error if unable to delete a consignment.\n     *\n     * A consignment ID should be provided when checking for an error for a\n     * specific consignment, otherwise it will check for all available consignments.\n     *\n     * @param consignmentId - The identifier of the consignment to be checked.\n     * @returns The error object if unable to delete, otherwise undefined.\n     */\n    getDeleteConsignmentError(consignmentId?: string): Error | undefined {\n        return this._consignments.getDeleteError(consignmentId);\n    }\n\n    /**\n     * Returns an error if unable to update a consignment.\n     *\n     * A consignment ID should be provided when checking for an error for a\n     * specific consignment, otherwise it will check for all available consignments.\n     *\n     * @param consignmentId - The identifier of the consignment to be checked.\n     * @returns The error object if unable to update, otherwise undefined.\n     */\n    getUpdateConsignmentError(consignmentId?: string): Error | undefined {\n        return this._consignments.getUpdateError(consignmentId);\n    }\n\n    /**\n     * Returns an error if unable to create consignments.\n     *\n     * @returns The error object if unable to create, otherwise undefined.\n     */\n    getCreateConsignmentsError(): Error | undefined {\n        return this._consignments.getCreateError();\n    }\n\n    /**\n     * Returns an error if unable to initialize the shipping step of a checkout\n     * process.\n     *\n     * @param methodId - The identifer of the initialization method to execute.\n     * @returns The error object if unable to initialize, otherwise undefined.\n     */\n    getInitializeShippingError(methodId?: string): Error | undefined {\n        return this._shippingStrategies.getInitializeError(methodId);\n    }\n\n    /**\n     * Returns an error if unable to apply a coupon code.\n     *\n     * @returns The error object if unable to apply, otherwise undefined.\n     */\n    getApplyCouponError(): Error | undefined {\n        return this._coupons.getApplyError();\n    }\n\n    /**\n     * Returns an error if unable to remove a coupon code.\n     *\n     * @returns The error object if unable to remove, otherwise undefined.\n     */\n    getRemoveCouponError(): Error | undefined {\n        return this._coupons.getRemoveError();\n    }\n\n    /**\n     * Returns an error if unable to apply a gift certificate.\n     *\n     * @returns The error object if unable to apply, otherwise undefined.\n     */\n    getApplyGiftCertificateError(): Error | undefined {\n        return this._giftCertificates.getApplyError();\n    }\n\n    /**\n     * Returns an error if unable to remove a gift certificate.\n     *\n     * @returns The error object if unable to remove, otherwise undefined.\n     */\n    getRemoveGiftCertificateError(): Error | undefined {\n        return this._giftCertificates.getRemoveError();\n    }\n\n    /**\n     * Returns an error if unable to load payment instruments.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadInstrumentsError(): Error | undefined {\n        return this._instruments.getLoadError();\n    }\n\n    /**\n     * Returns an error if unable to delete a payment instrument.\n     *\n     * @param instrumentId - The identifier of the payment instrument to delete.\n     * @returns The error object if unable to delete, otherwise undefined.\n     */\n    getDeleteInstrumentError(instrumentId?: string): Error | undefined {\n        return this._instruments.getDeleteError(instrumentId);\n    }\n\n    /**\n     * Returns an error if unable to load the checkout configuration of a store.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadConfigError(): Error | undefined {\n        return this._config.getLoadError();\n    }\n}\n","import { BillingAddressSelector } from '../billing';\nimport { CartSelector } from '../cart';\nimport { selector } from '../common/selector';\nimport { ConfigSelector } from '../config';\nimport { CouponSelector, GiftCertificateSelector } from '../coupon';\nimport { CustomerStrategySelector } from '../customer';\nimport { CountrySelector } from '../geography';\nimport { OrderSelector } from '../order';\nimport { PaymentMethodSelector, PaymentStrategySelector } from '../payment';\nimport { InstrumentSelector } from '../payment/instrument';\nimport { ConsignmentSelector, ShippingCountrySelector, ShippingStrategySelector } from '../shipping';\n\nimport CheckoutSelector from './checkout-selector';\nimport InternalCheckoutSelectors from './internal-checkout-selectors';\n\n/**\n * Responsible for checking the statuses of various asynchronous actions related\n * to checkout.\n *\n * This object has a set of getters that return true if an action is in\n * progress. For example, you can check whether a customer is submitting an\n * order and waiting for the request to complete.\n */\n@selector\nexport default class CheckoutStoreStatusSelector {\n    private _billingAddress: BillingAddressSelector;\n    private _cart: CartSelector;\n    private _checkout: CheckoutSelector;\n    private _config: ConfigSelector;\n    private _consignments: ConsignmentSelector;\n    private _countries: CountrySelector;\n    private _coupons: CouponSelector;\n    private _customerStrategies: CustomerStrategySelector;\n    private _giftCertificates: GiftCertificateSelector;\n    private _instruments: InstrumentSelector;\n    private _order: OrderSelector;\n    private _paymentMethods: PaymentMethodSelector;\n    private _paymentStrategies: PaymentStrategySelector;\n    private _shippingCountries: ShippingCountrySelector;\n    private _shippingStrategies: ShippingStrategySelector;\n\n    /**\n     * @internal\n     */\n    constructor(selectors: InternalCheckoutSelectors) {\n        this._billingAddress = selectors.billingAddress;\n        this._cart = selectors.cart;\n        this._checkout = selectors.checkout;\n        this._config = selectors.config;\n        this._consignments = selectors.consignments;\n        this._countries = selectors.countries;\n        this._coupons = selectors.coupons;\n        this._customerStrategies = selectors.customerStrategies;\n        this._giftCertificates = selectors.giftCertificates;\n        this._instruments = selectors.instruments;\n        this._order = selectors.order;\n        this._paymentMethods = selectors.paymentMethods;\n        this._paymentStrategies = selectors.paymentStrategies;\n        this._shippingCountries = selectors.shippingCountries;\n        this._shippingStrategies = selectors.shippingStrategies;\n    }\n\n    /**\n     * Checks whether any checkout action is pending.\n     *\n     * @returns True if there is a pending action, otherwise false.\n     */\n    isPending(): boolean {\n        return this.isLoadingCheckout() ||\n            this.isSubmittingOrder() ||\n            this.isFinalizingOrder() ||\n            this.isLoadingOrder() ||\n            this.isLoadingCart() ||\n            this.isLoadingBillingCountries() ||\n            this.isLoadingShippingCountries() ||\n            this.isLoadingPaymentMethods() ||\n            this.isLoadingPaymentMethod() ||\n            this.isInitializingPayment() ||\n            this.isLoadingShippingOptions() ||\n            this.isSelectingShippingOption() ||\n            this.isSigningIn() ||\n            this.isSigningOut() ||\n            this.isInitializingCustomer() ||\n            this.isUpdatingBillingAddress() ||\n            this.isContinuingAsGuest() ||\n            this.isUpdatingShippingAddress() ||\n            this.isUpdatingConsignment() ||\n            this.isCreatingConsignments() ||\n            this.isDeletingConsignment() ||\n            this.isInitializingShipping() ||\n            this.isApplyingCoupon() ||\n            this.isRemovingCoupon() ||\n            this.isApplyingGiftCertificate() ||\n            this.isRemovingGiftCertificate() ||\n            this.isLoadingInstruments() ||\n            this.isDeletingInstrument() ||\n            this.isLoadingConfig() ||\n            this.isCustomerStepPending() ||\n            this.isPaymentStepPending();\n    }\n\n    /**\n     * Checks whether the current checkout is loading.\n     *\n     * @returns True if the current checkout is loading, otherwise false.\n     */\n    isLoadingCheckout(): boolean {\n        return this._checkout.isLoading();\n    }\n\n    /**\n     * Checks whether the current checkout is being updated.\n     *\n     * @returns True if the current checkout is being updated, otherwise false.\n     */\n    isUpdatingCheckout(): boolean {\n        return this._checkout.isUpdating();\n    }\n\n    /**\n     * Checks whether the current order is submitting.\n     *\n     * @returns True if the current order is submitting, otherwise false.\n     */\n    isSubmittingOrder(): boolean {\n        return this._paymentStrategies.isExecuting();\n    }\n\n    /**\n     * Checks whether the current order is finalizing.\n     *\n     * @returns True if the current order is finalizing, otherwise false.\n     */\n    isFinalizingOrder(): boolean {\n        return this._paymentStrategies.isFinalizing();\n    }\n\n    /**\n     * Checks whether the current order is loading.\n     *\n     * @returns True if the current order is loading, otherwise false.\n     */\n    isLoadingOrder(): boolean {\n        return this._order.isLoading();\n    }\n\n    /**\n     * Checks whether the current cart is loading.\n     *\n     * @returns True if the current cart is loading, otherwise false.\n     */\n    isLoadingCart(): boolean {\n        return this._cart.isLoading();\n    }\n\n    /**\n     * Checks whether billing countries are loading.\n     *\n     * @returns True if billing countries are loading, otherwise false.\n     */\n    isLoadingBillingCountries(): boolean {\n        return this._countries.isLoading();\n    }\n\n    /**\n     * Checks whether shipping countries are loading.\n     *\n     * @returns True if shipping countries are loading, otherwise false.\n     */\n    isLoadingShippingCountries(): boolean {\n        return this._shippingCountries.isLoading();\n    }\n\n    /**\n     * Checks whether payment methods are loading.\n     *\n     * @returns True if payment methods are loading, otherwise false.\n     */\n    isLoadingPaymentMethods(): boolean {\n        return this._paymentMethods.isLoading();\n    }\n\n    /**\n     * Checks whether a specific or any payment method is loading.\n     *\n     * The method returns true if no ID is provided and at least one payment\n     * method is loading.\n     *\n     * @param methodId - The identifier of the payment method to check.\n     * @returns True if the payment method is loading, otherwise false.\n     */\n    isLoadingPaymentMethod(methodId?: string): boolean {\n        return this._paymentMethods.isLoadingMethod(methodId);\n    }\n\n    /**\n     * Checks whether a specific or any payment method is initializing.\n     *\n     * The method returns true if no ID is provided and at least one payment\n     * method is initializing.\n     *\n     * @param methodId - The identifier of the payment method to check.\n     * @returns True if the payment method is initializing, otherwise false.\n     */\n    isInitializingPayment(methodId?: string): boolean {\n        return this._paymentStrategies.isInitializing(methodId);\n    }\n\n    /**\n     * Checks whether the current customer is signing in.\n     *\n     * If an ID is provided, the method also checks whether the customer is\n     * signing in using a specific customer method with the same ID.\n     *\n     * @param methodId - The identifier of the method used for signing in the\n     * current customer.\n     * @returns True if the customer is signing in, otherwise false.\n     */\n    isSigningIn(methodId?: string): boolean {\n        return this._customerStrategies.isSigningIn(methodId);\n    }\n\n    /**\n     * Checks whether the current customer is signing out.\n     *\n     * If an ID is provided, the method also checks whether the customer is\n     * signing out using a specific customer method with the same ID.\n     *\n     * @param methodId - The identifier of the method used for signing out the\n     * current customer.\n     * @returns True if the customer is signing out, otherwise false.\n     */\n    isSigningOut(methodId?: string): boolean {\n        return this._customerStrategies.isSigningOut(methodId);\n    }\n\n    /**\n     * Checks whether the customer step is initializing.\n     *\n     * If an ID is provided, the method also checks whether the customer step is\n     * initializing using a specific customer method with the same ID.\n     *\n     * @param methodId - The identifier of the method used for initializing the\n     * customer step of checkout.\n     * @returns True if the customer step is initializing, otherwise false.\n     */\n    isInitializingCustomer(methodId?: string): boolean {\n        return this._customerStrategies.isInitializing(methodId);\n    }\n\n    /**\n     * Checks whether shipping options are loading.\n     *\n     * @returns True if shipping options are loading, otherwise false.\n     */\n    isLoadingShippingOptions(): boolean {\n        return this._consignments.isLoadingShippingOptions();\n    }\n\n    /**\n     * Checks whether a shipping option is being selected.\n     *\n     * A consignment ID should be provided when checking if a shipping option\n     * is being selected for a specific consignment, otherwise it will check\n     * for all consignments.\n     *\n     * @param consignmentId - The identifier of the consignment to be checked.\n     * @returns True if selecting a shipping option, otherwise false.\n     */\n    isSelectingShippingOption(consignmentId?: string): boolean {\n        return this._shippingStrategies.isSelectingOption() ||\n            this._consignments.isUpdatingShippingOption(consignmentId);\n    }\n\n    /**\n     * Checks whether the billing address is being updated.\n     *\n     * @returns True if updating their billing address, otherwise false.\n     */\n    isUpdatingBillingAddress(): boolean {\n        return this._billingAddress.isUpdating();\n    }\n\n    /**\n     * Checks whether the shopper is continuing out as a guest.\n     *\n     * @returns True if continuing as guest, otherwise false.\n     */\n    isContinuingAsGuest(): boolean {\n        return this._billingAddress.isContinuingAsGuest();\n    }\n\n    /**\n     * Checks the shipping address is being updated.\n     *\n     * @returns True if updating their shipping address, otherwise false.\n     */\n    isUpdatingShippingAddress(): boolean {\n        return this._shippingStrategies.isUpdatingAddress();\n    }\n\n    /**\n     * Checks whether a given/any consignment is being updated.\n     *\n     * A consignment ID should be provided when checking for a specific consignment,\n     * otherwise it will check for any consignment.\n     *\n     * @param consignmentId - The identifier of the consignment to be checked.\n     * @returns True if updating consignment(s), otherwise false.\n     */\n    isUpdatingConsignment(consignmentId?: string): boolean {\n        return this._consignments.isUpdating(consignmentId);\n    }\n\n    /**\n     * Checks whether a given/any consignment is being deleted.\n     *\n     * A consignment ID should be provided when checking for a specific consignment,\n     * otherwise it will check for any consignment.\n     *\n     * @param consignmentId - The identifier of the consignment to be checked.\n     * @returns True if deleting consignment(s), otherwise false.\n     */\n    isDeletingConsignment(consignmentId?: string): boolean {\n        return this._consignments.isDeleting(consignmentId);\n    }\n\n    /**\n     * Checks whether a given/any consignment is being updated.\n     *\n     * A consignment ID should be provided when checking for a specific consignment,\n     * otherwise it will check for any consignment.\n     *\n     * @returns True if creating consignments, otherwise false.\n     */\n    isCreatingConsignments(): boolean {\n        return this._consignments.isCreating();\n    }\n\n    /**\n     * Checks whether the shipping step of a checkout process is initializing.\n     *\n     * If an identifier is provided, the method also checks whether the shipping\n     * step is initializing using a specific shipping method with the same\n     * identifier.\n     *\n     * @param methodId - The identifer of the initialization method to check.\n     * @returns True if the shipping step is initializing, otherwise false.\n     */\n    isInitializingShipping(methodId?: string) {\n        return this._shippingStrategies.isInitializing(methodId);\n    }\n\n    /**\n     * Checks whether the current customer is applying a coupon code.\n     *\n     * @returns True if applying a coupon code, otherwise false.\n     */\n    isApplyingCoupon(): boolean {\n        return this._coupons.isApplying();\n    }\n\n    /**\n     * Checks whether the current customer is removing a coupon code.\n     *\n     * @returns True if removing a coupon code, otherwise false.\n     */\n    isRemovingCoupon(): boolean {\n        return this._coupons.isRemoving();\n    }\n\n    /**\n     * Checks whether the current customer is applying a gift certificate.\n     *\n     * @returns True if applying a gift certificate, otherwise false.\n     */\n    isApplyingGiftCertificate(): boolean {\n        return this._giftCertificates.isApplying();\n    }\n\n    /**\n     * Checks whether the current customer is removing a gift certificate.\n     *\n     * @returns True if removing a gift certificate, otherwise false.\n     */\n    isRemovingGiftCertificate(): boolean {\n        return this._giftCertificates.isRemoving();\n    }\n\n    /**\n     * Checks whether the current customer's payment instruments are loading.\n     *\n     * @returns True if payment instruments are loading, otherwise false.\n     */\n    isLoadingInstruments(): boolean {\n        return this._instruments.isLoading();\n    }\n\n    /**\n     * Checks whether the current customer is deleting a payment instrument.\n     *\n     * @returns True if deleting a payment instrument, otherwise false.\n     */\n    isDeletingInstrument(instrumentId?: string): boolean {\n        return this._instruments.isDeleting(instrumentId);\n    }\n\n    /**\n     * Checks whether the checkout configuration of a store is loading.\n     *\n     * @returns True if the configuration is loading, otherwise false.\n     */\n    isLoadingConfig(): boolean {\n        return this._config.isLoading();\n    }\n\n    /**\n     * Checks whether the customer step of a checkout is in a pending state.\n     *\n     * The customer step is considered to be pending if it is in the process of\n     * initializing, signing in, signing out, and/or interacting with a customer\n     * widget.\n     *\n     * @returns True if the customer step is pending, otherwise false.\n     */\n    isCustomerStepPending(): boolean {\n        return this._customerStrategies.isInitializing() ||\n            this._customerStrategies.isSigningIn() ||\n            this._customerStrategies.isSigningOut() ||\n            this._customerStrategies.isWidgetInteracting();\n    }\n\n    /**\n     * Checks whether the payment step of a checkout is in a pending state.\n     *\n     * The payment step is considered to be pending if it is in the process of\n     * initializing, submitting an order, finalizing an order, and/or\n     * interacting with a payment widget.\n     *\n     * @returns True if the payment step is pending, otherwise false.\n     */\n    isPaymentStepPending(): boolean {\n        return this._paymentStrategies.isInitializing() ||\n            this._paymentStrategies.isExecuting() ||\n            this._paymentStrategies.isFinalizing() ||\n            this._paymentStrategies.isWidgetInteracting();\n    }\n}\n","import {\n    CheckoutSelectors,\n    CheckoutStoreErrorSelector,\n    CheckoutStoreSelector,\n    CheckoutStoreStatusSelector,\n    InternalCheckoutSelectors,\n} from '../checkout';\n\nexport default function createCheckoutSelectors(selectors: InternalCheckoutSelectors): CheckoutSelectors {\n    const data = new CheckoutStoreSelector(selectors);\n    const errors = new CheckoutStoreErrorSelector(selectors);\n    const statuses = new CheckoutStoreStatusSelector(selectors);\n\n    return {\n        data,\n        errors,\n        statuses,\n    };\n}\n","import { toSingleLine } from '../utility';\n\nexport default class ErrorMessageTransformer<TError extends Error = Error> {\n    constructor(\n        private _messageCustomizer: (type: TError) => string\n    ) {}\n\n    transform(error: TError): TError {\n        error.message = toSingleLine(this._messageCustomizer(error));\n\n        return error;\n    }\n}\n","export default function toSingleLine(input?: string) {\n    if (!input) {\n        return '';\n    }\n\n    return input.split(/(?:\\r\\n|\\n|\\r)/)\n        .map(line => line.replace(/^\\s+/gm, ''))\n        .join(' ')\n        .trim();\n}\n","import { Action, ThunkAction } from '@bigcommerce/data-store';\nimport { Observable } from 'rxjs/Observable';\n\nimport { AddressRequestBody } from '../address';\nimport { BillingAddressActionCreator, BillingAddressRequestBody } from '../billing';\nimport { ErrorMessageTransformer } from '../common/error';\nimport { RequestOptions } from '../common/http-request';\nimport { ConfigActionCreator } from '../config';\nimport { CouponActionCreator, GiftCertificateActionCreator } from '../coupon';\nimport { CustomerCredentials, CustomerInitializeOptions, CustomerRequestOptions, CustomerStrategyActionCreator, GuestCredentials } from '../customer';\nimport { CountryActionCreator } from '../geography';\nimport { OrderActionCreator, OrderRequestBody } from '../order';\nimport { PaymentInitializeOptions, PaymentMethodActionCreator, PaymentRequestOptions, PaymentStrategyActionCreator } from '../payment';\nimport { InstrumentActionCreator } from '../payment/instrument';\nimport { ConsignmentsRequestBody, ConsignmentActionCreator, ShippingCountryActionCreator, ShippingInitializeOptions, ShippingRequestOptions, ShippingStrategyActionCreator } from '../shipping';\nimport { ConsignmentAssignmentRequestBody, ConsignmentUpdateRequestBody } from '../shipping/consignment';\n\nimport { CheckoutRequestBody } from './checkout';\nimport CheckoutActionCreator from './checkout-action-creator';\nimport CheckoutSelectors from './checkout-selectors';\nimport CheckoutStore from './checkout-store';\nimport createCheckoutSelectors from './create-checkout-selectors';\nimport createCheckoutServiceErrorTransformer from './create-checkout-service-error-transformer';\nimport InternalCheckoutSelectors from './internal-checkout-selectors';\n\n/**\n * Responsible for completing the checkout process for the current customer.\n *\n * This object can be used to collect all information that is required for\n * checkout, such as shipping and billing information. It can also be used to\n * retrieve the current checkout state and subscribe to its changes.\n */\nexport default class CheckoutService {\n    private _state: CheckoutSelectors;\n    private _errorTransformer: ErrorMessageTransformer;\n\n    /**\n     * @internal\n     */\n    constructor(\n        private _store: CheckoutStore,\n        private _billingAddressActionCreator: BillingAddressActionCreator,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _configActionCreator: ConfigActionCreator,\n        private _consignmentActionCreator: ConsignmentActionCreator,\n        private _countryActionCreator: CountryActionCreator,\n        private _couponActionCreator: CouponActionCreator,\n        private _customerStrategyActionCreator: CustomerStrategyActionCreator,\n        private _giftCertificateActionCreator: GiftCertificateActionCreator,\n        private _instrumentActionCreator: InstrumentActionCreator,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _paymentStrategyActionCreator: PaymentStrategyActionCreator,\n        private _shippingCountryActionCreator: ShippingCountryActionCreator,\n        private _shippingStrategyActionCreator: ShippingStrategyActionCreator\n    ) {\n        this._state = createCheckoutSelectors(this._store.getState());\n        this._errorTransformer = createCheckoutServiceErrorTransformer();\n\n        this._store.subscribe(state => {\n            this._state = createCheckoutSelectors(state);\n        });\n    }\n\n    /**\n     * Returns a snapshot of the current checkout state.\n     *\n     * The method returns a new instance every time there is a change in the\n     * checkout state. You can query the state by calling any of its getter\n     * methods.\n     *\n     * ```js\n     * const state = service.getState();\n     *\n     * console.log(state.data.getOrder());\n     * console.log(state.errors.getSubmitOrderError());\n     * console.log(state.statuses.isSubmittingOrder());\n     * ```\n     *\n     * @returns The current customer's checkout state\n     */\n    getState(): CheckoutSelectors {\n        return this._state;\n    }\n\n    /**\n     * Notifies all subscribers with the current state.\n     *\n     * When this method gets called, the subscribers get called regardless if\n     * they have any filters applied.\n     */\n    notifyState(): void {\n        this._store.notifyState();\n    }\n\n    /**\n     * Subscribes to any changes to the current state.\n     *\n     * The method registers a callback function and executes it every time there\n     * is a change in the checkout state.\n     *\n     * ```js\n     * service.subscribe(state => {\n     *     console.log(state.data.getCart());\n     * });\n     * ```\n     *\n     * The method can be configured to notify subscribers only regarding\n     * relevant changes, by providing a filter function.\n     *\n     * ```js\n     * const filter = state => state.data.getCart();\n     *\n     * // Only trigger the subscriber when the cart changes.\n     * service.subscribe(state => {\n     *     console.log(state.data.getCart())\n     * }, filter);\n     * ```\n     *\n     * @param subscriber - The function to subscribe to state changes.\n     * @param filters - One or more functions to filter out irrelevant state\n     * changes. If more than one function is provided, the subscriber will only\n     * be triggered if all conditions are met.\n     * @returns A function, if called, will unsubscribe the subscriber.\n     */\n    subscribe(\n        subscriber: (state: CheckoutSelectors) => void,\n        ...filters: Array<(state: CheckoutSelectors) => any>\n    ): () => void {\n        return this._store.subscribe(\n            () => subscriber(this.getState()),\n            ...filters.map(filter => (state: InternalCheckoutSelectors) => filter(createCheckoutSelectors(state)))\n        );\n    }\n\n    /**\n     * Loads the current checkout.\n     *\n     * This method can only be called if there is an active checkout. Also, it\n     * can only retrieve data that belongs to the current customer. When it is\n     * successfully executed, you can retrieve the data by calling\n     * `CheckoutStoreSelector#getCheckout`.\n     *\n     * ```js\n     * const state = await service.loadCheckout('0cfd6c06-57c3-4e29-8d7a-de55cc8a9052');\n     *\n     * console.log(state.data.getCheckout());\n     * ```\n     *\n     * @param id - The identifier of the checkout to load, or the default checkout if not provided.\n     * @param options - Options for loading the current checkout.\n     * @returns A promise that resolves to the current state.\n     */\n    loadCheckout(id?: string, options?: RequestOptions): Promise<CheckoutSelectors> {\n        return this._dispatch(id ?\n            this._checkoutActionCreator.loadCheckout(id, options) :\n            this._checkoutActionCreator.loadDefaultCheckout(options)\n        );\n    }\n\n    /**\n     * Updates specific properties of the current checkout.\n     *\n     * ```js\n     * const state = await service.updateCheckout(checkout);\n     *\n     * console.log(state.data.getCheckout());\n     * ```\n     *\n     * @param payload - The checkout properties to be updated.\n     * @param options - Options for loading the current checkout.\n     * @returns A promise that resolves to the current state.\n     */\n    updateCheckout(payload: CheckoutRequestBody, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._checkoutActionCreator.updateCheckout(payload, options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Loads an order by an id.\n     *\n     * The method can only retrieve an order if the order belongs to the current\n     * customer. If it is successfully executed, the data can be retrieved by\n     * calling `CheckoutStoreSelector#getOrder`.\n     *\n     * ```js\n     * const state = await service.loadOrder(123);\n     *\n     * console.log(state.data.getOrder());\n     * ```\n     *\n     * @param orderId - The identifier of the order to load.\n     * @param options - Options for loading the order.\n     * @returns A promise that resolves to the current state.\n     */\n    loadOrder(orderId: number, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const loadCheckoutAction = this._orderActionCreator.loadOrder(orderId, options);\n        const loadConfigAction = this._configActionCreator.loadConfig(options);\n\n        return Promise.all([\n            this._dispatch(loadCheckoutAction),\n            this._dispatch(loadConfigAction, { queueId: 'config' }),\n        ])\n            .then(() => this.getState());\n    }\n\n    /**\n     * Submits an order, thereby completing a checkout process.\n     *\n     * Before you can submit an order, you must initialize the payment method\n     * chosen by the customer by calling `CheckoutService#initializePayment`.\n     *\n     * ```js\n     * await service.initializePayment({ methodId: 'braintree' });\n     * await service.submitOrder({\n     *     methodId: 'braintree',\n     *     payment: {\n     *         paymentData: {\n     *             ccExpiry: { month: 10, year: 20 },\n     *             ccName: 'BigCommerce',\n     *             ccNumber: '4111111111111111',\n     *             ccType: 'visa',\n     *             ccCvv: 123,\n     *         },\n     *     },\n     * });\n     * ```\n     *\n     * You are not required to include `paymentData` if the order does not\n     * require additional payment details. For example, the customer has already\n     * entered their payment details on the cart page using one of the hosted\n     * payment methods, such as PayPal. Or the customer has applied a gift\n     * certificate that exceeds the grand total amount.\n     *\n     * If the order is submitted successfully, you can retrieve the newly\n     * created order by calling `CheckoutStoreSelector#getOrder`.\n     *\n     * ```js\n     * const state = await service.submitOrder(payload);\n     *\n     * console.log(state.data.getOrder());\n     * ```\n     *\n     * @param payload - The request payload to submit for the current order.\n     * @param options - Options for submitting the current order.\n     * @returns A promise that resolves to the current state.\n     */\n    submitOrder(payload: OrderRequestBody, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._paymentStrategyActionCreator.execute(payload, options);\n\n        return this._dispatch(action, { queueId: 'paymentStrategy' });\n    }\n\n    /**\n     * Finalizes the submission process for an order.\n     *\n     * This method is only required for certain hosted payment methods that\n     * require a customer to enter their credit card details on their website.\n     * You need to call this method once the customer has redirected back to\n     * checkout in order to complete the checkout process.\n     *\n     * If the method is called before order finalization is required or for a\n     * payment method that does not require order finalization, an error will be\n     * thrown. Conversely, if the method is called successfully, you should\n     * immediately redirect the customer to the order confirmation page.\n     *\n     * ```js\n     * try {\n     *     await service.finalizeOrderIfNeeded();\n     *\n     *     window.location.assign('/order-confirmation');\n     * } catch (error) {\n     *     if (error.type !== 'order_finalization_not_required') {\n     *         throw error;\n     *     }\n     * }\n     * ```\n     *\n     * @param options - Options for finalizing the current order.\n     * @returns A promise that resolves to the current state.\n     * @throws `OrderFinalizationNotRequiredError` error if order finalization\n     * is not required for the current order at the time of execution.\n     */\n    finalizeOrderIfNeeded(options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._paymentStrategyActionCreator.finalize(options);\n\n        return this._dispatch(action, { queueId: 'paymentStrategy' });\n    }\n\n    /**\n     * Loads a list of payment methods available for checkout.\n     *\n     * If a customer enters their payment details before navigating to the\n     * checkout page (i.e.: using PayPal checkout button on the cart page), only\n     * one payment method will be available for the customer - the selected\n     * payment method. Otherwise, by default, all payment methods configured by\n     * the merchant will be available for the customer.\n     *\n     * Once the method is executed successfully, you can call\n     * `CheckoutStoreSelector#getPaymentMethods` to retrieve the list of payment\n     * methods.\n     *\n     * ```js\n     * const state = service.loadPaymentMethods();\n     *\n     * console.log(state.data.getPaymentMethods());\n     * ```\n     *\n     * @param options - Options for loading the payment methods that are\n     * available to the current customer.\n     * @returns A promise that resolves to the current state.\n     */\n    loadPaymentMethods(options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._paymentMethodActionCreator.loadPaymentMethods(options);\n\n        return this._dispatch(action, { queueId: 'paymentMethods' });\n    }\n\n    /**\n     * Loads a payment method by an id.\n     *\n     * This method does not work with multi-option payment providers. Due to its\n     * limitation, it is deprecated and will be removed in the future.\n     *\n     * @deprecated\n     * @internal\n     * @param methodId - The identifier for the payment method to load.\n     * @param options - Options for loading the payment method.\n     * @returns A promise that resolves to the current state.\n     */\n    loadPaymentMethod(methodId: string, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._paymentMethodActionCreator.loadPaymentMethod(methodId, options);\n\n        return this._dispatch(action, { queueId: 'paymentMethods' });\n    }\n\n    /**\n     * Initializes the payment step of a checkout process.\n     *\n     * Before a payment method can accept payment details, it must first be\n     * initialized. Some payment methods require you to provide additional\n     * initialization options. For example, Amazon requires a container ID in\n     * order to initialize their payment widget.\n     *\n     * ```js\n     * await service.initializePayment({\n     *     methodId: 'amazon',\n     *     amazon: {\n     *         container: 'walletWidget',\n     *     },\n     * });\n     * ```\n     *\n     * @param options - Options for initializing the payment step of checkout.\n     * @returns A promise that resolves to the current state.\n     */\n    initializePayment(options: PaymentInitializeOptions): Promise<CheckoutSelectors> {\n        const action = this._paymentStrategyActionCreator.initialize(options);\n\n        return this._dispatch(action, { queueId: 'paymentStrategy' });\n    }\n\n    /**\n     * De-initializes the payment step of a checkout process.\n     *\n     * The method should be called once you no longer require a payment method\n     * to be initialized. It can perform any necessary clean-up behind the\n     * scene, i.e.: remove DOM nodes or event handlers that are attached as a\n     * result of payment initialization.\n     *\n     * ```js\n     * await service.deinitializePayment({\n     *     methodId: 'amazon',\n     * });\n     * ```\n     *\n     * @param options - Options for deinitializing the payment step of checkout.\n     * @returns A promise that resolves to the current state.\n     */\n    deinitializePayment(options: PaymentRequestOptions): Promise<CheckoutSelectors> {\n        const action = this._paymentStrategyActionCreator.deinitialize(options);\n\n        return this._dispatch(action, { queueId: 'paymentStrategy' });\n    }\n\n    /**\n     * Loads a list of countries available for billing.\n     *\n     * Once you make a successful request, you will be able to retrieve the list\n     * of countries by calling `CheckoutStoreSelector#getBillingCountries`.\n     *\n     * ```js\n     * const state = await service.loadBillingCountries();\n     *\n     * console.log(state.data.getBillingCountries());\n     * ```\n     *\n     * @param options - Options for loading the available billing countries.\n     * @returns A promise that resolves to the current state.\n     */\n    loadBillingCountries(options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._countryActionCreator.loadCountries(options);\n\n        return this._dispatch(action, { queueId: 'billingCountries' });\n    }\n\n    /**\n     * Loads a list of countries available for shipping.\n     *\n     * The list is determined based on the shipping zones configured by a\n     * merchant. Once you make a successful call, you will be able to retrieve\n     * the list of available shipping countries by calling\n     * `CheckoutStoreSelector#getShippingCountries`.\n     *\n     * ```js\n     * const state = await service.loadShippingCountries();\n     *\n     * console.log(state.data.getShippingCountries());\n     * ```\n     *\n     * @param options - Options for loading the available shipping countries.\n     * @returns A promise that resolves to the current state.\n     */\n    loadShippingCountries(options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._shippingCountryActionCreator.loadCountries(options);\n\n        return this._dispatch(action, { queueId: 'shippingCountries' });\n    }\n\n    /**\n     * Loads a set of form fields that should be presented to customers in order\n     * to capture their billing address.\n     *\n     * Once the method has been executed successfully, you can call\n     * `CheckoutStoreSelector#getBillingAddressFields` to retrieve the set of\n     * form fields.\n     *\n     * ```js\n     * const state = service.loadBillingAddressFields();\n     *\n     * console.log(state.data.getBillingAddressFields('US'));\n     * ```\n     *\n     * @param options - Options for loading the billing address form fields.\n     * @returns A promise that resolves to the current state.\n     */\n    loadBillingAddressFields(options?: RequestOptions): Promise<CheckoutSelectors> {\n        return this.loadBillingCountries(options);\n    }\n\n    /**\n     * Loads a set of form fields that should be presented to customers in order\n     * to capture their shipping address.\n     *\n     * Once the method has been executed successfully, you can call\n     * `CheckoutStoreSelector#getShippingAddressFields` to retrieve the set of\n     * form fields.\n     *\n     * ```js\n     * const state = service.loadShippingAddressFields();\n     *\n     * console.log(state.data.getShippingAddressFields('US'));\n     * ```\n     *\n     * @param options - Options for loading the shipping address form fields.\n     * @returns A promise that resolves to the current state.\n     */\n    loadShippingAddressFields(options?: RequestOptions): Promise<CheckoutSelectors> {\n        return this.loadShippingCountries(options);\n    }\n\n    /**\n     * Initializes the sign-in step of a checkout process.\n     *\n     * Some payment methods, such as Amazon, have their own sign-in flow. In\n     * order to support them, this method must be called.\n     *\n     * ```js\n     * await service.initializeCustomer({\n     *     methodId: 'amazon',\n     *     amazon: {\n     *         container: 'signInButton',\n     *     },\n     * });\n     * ```\n     *\n     * @param options - Options for initializing the customer step of checkout.\n     * @returns A promise that resolves to the current state.\n     */\n    initializeCustomer(options?: CustomerInitializeOptions): Promise<CheckoutSelectors> {\n        const action = this._customerStrategyActionCreator.initialize(options);\n\n        return this._dispatch(action, { queueId: 'customerStrategy' });\n    }\n\n    /**\n     * De-initializes the sign-in step of a checkout process.\n     *\n     * It should be called once you no longer want to prompt customers to sign\n     * in. It can perform any necessary clean-up behind the scene, i.e.: remove\n     * DOM nodes or event handlers that are attached as a result of customer\n     * initialization.\n     *\n     * ```js\n     * await service.deinitializeCustomer({\n     *     methodId: 'amazon',\n     * });\n     * ```\n     *\n     * @param options - Options for deinitializing the customer step of checkout.\n     * @returns A promise that resolves to the current state.\n     */\n    deinitializeCustomer(options?: CustomerRequestOptions): Promise<CheckoutSelectors> {\n        const action = this._customerStrategyActionCreator.deinitialize(options);\n\n        return this._dispatch(action, { queueId: 'customerStrategy' });\n    }\n\n    /**\n     * Continues to check out as a guest.\n     *\n     * The customer is required to provide their email address in order to\n     * continue. Once they provide their email address, it will be stored as a\n     * part of their billing address.\n     *\n     * @param credentials - The guest credentials to use.\n     * @param options - Options for continuing as a guest.\n     * @returns A promise that resolves to the current state.\n     */\n    continueAsGuest(credentials: GuestCredentials, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._billingAddressActionCreator.continueAsGuest(credentials, options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Signs into a customer's registered account.\n     *\n     * Once the customer is signed in successfully, the checkout state will be\n     * populated with information associated with the customer, such as their\n     * saved addresses. You can call `CheckoutStoreSelector#getCustomer` to\n     * retrieve the data.\n     *\n     * ```js\n     * const state = await service.signInCustomer({\n     *     email: 'foo@bar.com',\n     *     password: 'password123',\n     * });\n     *\n     * console.log(state.data.getCustomer());\n     * ```\n     *\n     * @param credentials - The credentials to be used for signing in the customer.\n     * @param options - Options for signing in the customer.\n     * @returns A promise that resolves to the current state.\n     */\n    signInCustomer(credentials: CustomerCredentials, options?: CustomerRequestOptions): Promise<CheckoutSelectors> {\n        const action = this._customerStrategyActionCreator.signIn(credentials, options);\n\n        return this._dispatch(action, { queueId: 'customerStrategy' });\n    }\n\n    /**\n     * Signs out the current customer if they are previously signed in.\n     *\n     * Once the customer is successfully signed out, the checkout state will be\n     * reset automatically.\n     *\n     * ```js\n     * const state = await service.signOutCustomer();\n     *\n     * // The returned object should not contain information about the previously signed-in customer.\n     * console.log(state.data.getCustomer());\n     * ```\n     *\n     * @param options - Options for signing out the customer.\n     * @returns A promise that resolves to the current state.\n     */\n    signOutCustomer(options?: CustomerRequestOptions): Promise<CheckoutSelectors> {\n        const action = this._customerStrategyActionCreator.signOut(options);\n\n        return this._dispatch(action, { queueId: 'customerStrategy' });\n    }\n\n    /**\n     * Loads a list of shipping options available for checkout.\n     *\n     * Available shipping options can only be determined once a customer\n     * provides their shipping address. If the method is executed successfully,\n     * `CheckoutStoreSelector#getShippingOptions` can be called to retrieve the\n     * list of shipping options.\n     *\n     * ```js\n     * const state = await service.loadShippingOptions();\n     *\n     * console.log(state.data.getShippingOptions());\n     * ```\n     *\n     * @param options - Options for loading the available shipping options.\n     * @returns A promise that resolves to the current state.\n     */\n    loadShippingOptions(options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._consignmentActionCreator.loadShippingOptions(options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Initializes the shipping step of a checkout process.\n     *\n     * Some payment methods, such as Amazon, can provide shipping information to\n     * be used for checkout. In order to support them, this method must be\n     * called.\n     *\n     * ```js\n     * await service.initializeShipping({\n     *     methodId: 'amazon',\n     *     amazon: {\n     *         container: 'addressBook',\n     *     },\n     * });\n     * ```\n     *\n     * @param options - Options for initializing the shipping step of checkout.\n     * @returns A promise that resolves to the current state.\n     */\n    initializeShipping(options?: ShippingInitializeOptions): Promise<CheckoutSelectors> {\n        const action = this._shippingStrategyActionCreator.initialize(options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * De-initializes the shipping step of a checkout process.\n     *\n     * It should be called once you no longer need to collect shipping details.\n     * It can perform any necessary clean-up behind the scene, i.e.: remove DOM\n     * nodes or event handlers that are attached as a result of shipping\n     * initialization.\n     *\n     * ```js\n     * await service.deinitializeShipping({\n     *     methodId: 'amazon',\n     * });\n     * ```\n     *\n     * @param options - Options for deinitializing the shipping step of checkout.\n     * @returns A promise that resolves to the current state.\n     */\n    deinitializeShipping(options?: ShippingRequestOptions): Promise<CheckoutSelectors> {\n        const action = this._shippingStrategyActionCreator.deinitialize(options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Selects a shipping option for the current address.\n     *\n     * If a shipping option has an additional cost, the quote for the current\n     * order will be adjusted once the option is selected.\n     *\n     * ```js\n     * const state = await service.selectShippingOption('address-id', 'shipping-option-id');\n     *\n     * console.log(state.data.getSelectedShippingOption());\n     * ```\n     *\n     * @param shippingOptionId - The identifier of the shipping option to\n     * select.\n     * @param options - Options for selecting the shipping option.\n     * @returns A promise that resolves to the current state.\n     */\n    selectShippingOption(shippingOptionId: string, options?: ShippingRequestOptions): Promise<CheckoutSelectors> {\n        const action = this._shippingStrategyActionCreator.selectOption(shippingOptionId, options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Updates the shipping address for the current checkout.\n     *\n     * When a customer updates their shipping address for an order, they will\n     * see an updated list of shipping options and the cost for each option,\n     * unless no options are available. If the update is successful, you can\n     * call `CheckoutStoreSelector#getShippingAddress` to retrieve the address.\n     *\n     * If the shipping address changes and the selected shipping option becomes\n     * unavailable for the updated address, the shipping option will be\n     * deselected.\n     *\n     * You can submit an address that is partially complete. The address does\n     * not get validated until you submit the order.\n     *\n     * ```js\n     * const state = await service.updateShippingAddress(address);\n     *\n     * console.log(state.data.getShippingAddress());\n     * ```\n     *\n     * @param address - The address to be used for shipping.\n     * @param options - Options for updating the shipping address.\n     * @returns A promise that resolves to the current state.\n     */\n    updateShippingAddress(address: AddressRequestBody, options?: ShippingRequestOptions): Promise<CheckoutSelectors> {\n        const action = this._shippingStrategyActionCreator.updateAddress(address, options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Creates consignments given a list.\n     *\n     * Note: this is used when items need to be shipped to multiple addresses,\n     * for single shipping address, use `CheckoutService#updateShippingAddress`.\n     *\n     * When consignments are created, an updated list of shipping options will\n     * become available for each consignment, unless no options are available.\n     * If the update is successful, you can call\n     * `CheckoutStoreSelector#getConsignments` to retrieve the updated list of\n     * consignments.'\n     *\n     * Beware that if a consignment includes all line items from another\n     * consignment, that consignment will be deleted as a valid consignment must\n     * include at least one valid line item.\n     *\n     * You can submit an address that is partially complete. The address does\n     * not get validated until you submit the order.\n     *\n     * ```js\n     * const state = await service.createConsignments(consignments);\n     *\n     * console.log(state.data.getConsignments());\n     * ```\n     *\n     * @param consignments - The list of consignments to be created.\n     * @param options - Options for updating the shipping address.\n     * @returns A promise that resolves to the current state.\n     */\n    createConsignments(\n        consignments: ConsignmentsRequestBody,\n        options?: RequestOptions\n    ): Promise<CheckoutSelectors> {\n        const action = this._consignmentActionCreator.createConsignments(consignments, options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Deletes a consignment\n     *\n     * ```js\n     * const state = await service.deleteConsignment('55c96cda6f04c');\n     *\n     * console.log(state.data.getConsignments());\n     * ```\n     *\n     * @param consignmentId - The ID of the consignment to be deleted\n     * @param options - Options for the consignment delete request\n     * @returns A promise that resolves to the current state.\n     */\n    deleteConsignment(\n        consignmentId: string,\n        options?: RequestOptions\n    ): Promise<CheckoutSelectors> {\n        const action = this._consignmentActionCreator.deleteConsignment(consignmentId, options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Updates a specific consignment.\n     *\n     * Note: this is used when items need to be shipped to multiple addresses,\n     * for single shipping address, use `CheckoutService#selectShippingOption`.\n     *\n     * When a shipping address for a consignment is updated, an updated list of\n     * shipping options will become available for the consignment, unless no\n     * options are available. If the update is successful, you can call\n     * `CheckoutStoreSelector#getConsignments` to retrieve updated list of\n     * consignments.\n     *\n     * Beware that if the updated consignment includes all line items from another\n     * consignment, that consignment will be deleted as a valid consignment must\n     * include at least one valid line item.\n     *\n     * If the shipping address changes and the selected shipping option becomes\n     * unavailable for the updated address, the shipping option will be\n     * deselected.\n     *\n     * You can submit an address that is partially complete. The address does\n     * not get validated until you submit the order.\n     *\n     * ```js\n     * const state = await service.updateConsignment(consignment);\n     *\n     * console.log(state.data.getConsignments());\n     * ```\n     *\n     * @param consignment - The consignment data that will be used.\n     * @param options - Options for updating the shipping address.\n     * @returns A promise that resolves to the current state.\n     */\n    updateConsignment(\n        consignment: ConsignmentUpdateRequestBody,\n        options?: RequestOptions\n    ): Promise<CheckoutSelectors> {\n        const action = this._consignmentActionCreator.updateConsignment(consignment, options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Convenience method that assigns items to be shipped to a specific address.\n     *\n     * Note: this method finds an existing consignment that matches the provided address\n     * and assigns the provided items. If no consignment matches the address, a new one\n     * will be created.\n     *\n     * @param consignment - The consignment data that will be used.\n     * @param options - Options for the request\n     * @returns A promise that resolves to the current state.\n     */\n    assignItemsToAddress(\n        consignment: ConsignmentAssignmentRequestBody,\n        options?: RequestOptions\n    ): Promise<CheckoutSelectors> {\n        const action = this._consignmentActionCreator.assignItemsByAddress(consignment, options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Selects a shipping option for a given consignment.\n     *\n     * Note: this is used when items need to be shipped to multiple addresses,\n     * for single shipping address, use `CheckoutService#updateShippingAddres`.\n     *\n     * If a shipping option has an additional cost, the quote for the current\n     * order will be adjusted once the option is selected.\n     *\n     * ```js\n     * const state = await service.selectConsignmentShippingOption(consignmentId, optionId);\n     *\n     * console.log(state.data.getConsignments());\n     * ```\n     *\n     * @param consignmentId - The identified of the consignment to be updated.\n     * @param shippingOptionId - The identifier of the shipping option to\n     * select.\n     * @param options - Options for selecting the shipping option.\n     * @returns A promise that resolves to the current state.\n     */\n    selectConsignmentShippingOption(\n        consignmentId: string,\n        shippingOptionId: string,\n        options?: ShippingRequestOptions\n    ): Promise<CheckoutSelectors> {\n        const action = this._consignmentActionCreator.updateShippingOption({\n            id: consignmentId,\n            shippingOptionId,\n        }, options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Updates the billing address for the current checkout.\n     *\n     * A customer must provide their billing address before they can proceed to\n     * pay for their order.\n     *\n     * You can submit an address that is partially complete. The address does\n     * not get validated until you submit the order.\n     *\n     * ```js\n     * const state = await service.updateBillingAddress(address);\n     *\n     * console.log(state.data.getBillingAddress());\n     * ```\n     *\n     * @param address - The address to be used for billing.\n     * @param options - Options for updating the billing address.\n     * @returns A promise that resolves to the current state.\n     */\n    updateBillingAddress(address: BillingAddressRequestBody, options: RequestOptions = {}): Promise<CheckoutSelectors> {\n        const action = this._billingAddressActionCreator.updateAddress(address, options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Applies a coupon code to the current checkout.\n     *\n     * Once the coupon code gets applied, the quote for the current checkout will\n     * be adjusted accordingly. The same coupon code cannot be applied more than\n     * once.\n     *\n     * ```js\n     * await service.applyCoupon('COUPON');\n     * ```\n     *\n     * @param code - The coupon code to apply to the current checkout.\n     * @param options - Options for applying the coupon code.\n     * @returns A promise that resolves to the current state.\n     */\n    applyCoupon(code: string, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._couponActionCreator.applyCoupon(code, options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Removes a coupon code from the current checkout.\n     *\n     * Once the coupon code gets removed, the quote for the current checkout will\n     * be adjusted accordingly.\n     *\n     * ```js\n     * await service.removeCoupon('COUPON');\n     * ```\n     *\n     * @param code - The coupon code to remove from the current checkout.\n     * @param options - Options for removing the coupon code.\n     * @returns A promise that resolves to the current state.\n     */\n    removeCoupon(code: string, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._couponActionCreator.removeCoupon(code, options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Applies a gift certificate to the current checkout.\n     *\n     * Once the gift certificate gets applied, the quote for the current\n     * checkout will be adjusted accordingly.\n     *\n     * ```js\n     * await service.applyGiftCertificate('GIFT_CERTIFICATE');\n     * ```\n     *\n     * @param code - The gift certificate to apply to the current checkout.\n     * @param options - Options for applying the gift certificate.\n     * @returns A promise that resolves to the current state.\n     */\n    applyGiftCertificate(code: string, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._giftCertificateActionCreator.applyGiftCertificate(code, options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Removes a gift certificate from an order.\n     *\n     * Once the gift certificate gets removed, the quote for the current\n     * checkout will be adjusted accordingly.\n     *\n     * ```js\n     * await service.removeGiftCertificate('GIFT_CERTIFICATE');\n     * ```\n     *\n     * @param code - The gift certificate to remove from the current checkout.\n     * @param options - Options for removing the gift certificate.\n     * @returns A promise that resolves to the current state.\n     */\n    removeGiftCertificate(code: string, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._giftCertificateActionCreator.removeGiftCertificate(code, options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Loads a list of payment instruments associated with a customer.\n     *\n     * Once the method has been called successfully, you can retrieve the list\n     * of payment instruments by calling `CheckoutStoreSelector#getInstruments`.\n     * If the customer does not have any payment instruments on record, i.e.:\n     * credit card, you will get an empty list instead.\n     *\n     * ```js\n     * const state = service.loadInstruments();\n     *\n     * console.log(state.data.getInstruments());\n     * ```\n     *\n     * @returns A promise that resolves to the current state.\n     */\n    loadInstruments(): Promise<CheckoutSelectors> {\n        const action = this._instrumentActionCreator.loadInstruments();\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Deletes a payment instrument by an id.\n     *\n     * Once an instrument gets removed, it can no longer be retrieved using\n     * `CheckoutStoreSelector#getInstruments`.\n     *\n     * ```js\n     * const state = service.deleteInstrument('123');\n     *\n     * console.log(state.data.getInstruments());\n     * ```\n     *\n     * @param instrumentId - The identifier of the payment instrument to delete.\n     * @returns A promise that resolves to the current state.\n     */\n    deleteInstrument(instrumentId: string): Promise<CheckoutSelectors> {\n        const action = this._instrumentActionCreator.deleteInstrument(instrumentId);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Dispatches an action through the data store and returns the current state\n     * once the action is dispatched.\n     *\n     * @param action - The action to dispatch.\n     * @returns A promise that resolves to the current state.\n     */\n    private _dispatch(action: Observable<Action> | ThunkAction<Action>, options?: { queueId?: string }): Promise<CheckoutSelectors> {\n        return this._store.dispatch(action, options)\n            .then(() => this.getState())\n            .catch(error => {\n                throw this._errorTransformer.transform(error);\n            });\n    }\n}\n","import { ErrorMessageTransformer } from '../common/error';\nimport { MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType } from '../common/error/errors';\nimport { getEnvironment } from '../common/utility';\n\nexport type CheckoutServiceErrorType = MissingDataError | NotInitializedError;\nexport type CheckoutServiceErrorTransformer = ErrorMessageTransformer<CheckoutServiceErrorType | Error>;\n\nexport default function createCheckoutServiceErrorTransformer(\n    isDevelopment: boolean = getEnvironment() === 'development'\n): CheckoutServiceErrorTransformer {\n    return new ErrorMessageTransformer(error => {\n        if (!isDevelopment || !isCheckoutServiceError(error)) {\n            return error.message;\n        }\n\n        switch (error.subtype || error.type) {\n        case MissingDataErrorType.MissingConsignments:\n            return `\n                ${error.message}\n                The data could be unavailable because no shipping address has been provided.\n                To fix this, create a consignment or update the shipping address before performing\n                the same action again.\n            `;\n\n        case MissingDataErrorType.MissingCart:\n        case MissingDataErrorType.MissingCheckout:\n            return `\n                ${error.message}\n                The data could be unavailable because it has not loaded from the server yet.\n                To fix this issue, you can try calling \\`CheckoutService#loadCheckout\\`\n                before performing the same action again.\n            `;\n\n        case MissingDataErrorType.MissingCheckoutConfig:\n            return `\n                ${error.message}\n                The data could be unavailable because it has not loaded from the server yet.\n                To fix this issue, you need to make sure \\`CheckoutService\\` is initialized\n                properly by calling \\`CheckoutService#loadCheckout\\` before performing any\n                other actions.\n            `;\n\n        case MissingDataErrorType.MissingOrder:\n            return `\n                ${error.message}\n                The data could be unavailable because it has not loaded from the server yet.\n                To fix this issue, you can try calling \\`CheckoutService#loadOrder\\`\n                before performing the same action again.\n            `;\n\n        case MissingDataErrorType.MissingOrderId:\n            return `\n                ${error.message}\n                The data could be unavailable because no order has been created yet. You have\n                to first create the order before you can perform the action.\n            `;\n\n        case MissingDataErrorType.MissingPaymentMethod:\n            return `\n                ${error.message}\n                The data could be unavailable because it has not loaded from the server, or\n                configured by the merchant yet. To fix the former issue, you can try calling\n                \\`CheckoutService#loadPaymentMethods\\` before performing the same action again.\n            `;\n\n        case NotInitializedErrorType.CustomerNotInitialized:\n            return `\n                In order to initialize the customer step of checkout, you need to call\n                \\`CheckoutService#initializeCustomer\\`. Afterwards, you should be able to\n                submit customer details.\n            `;\n\n        case NotInitializedErrorType.PaymentNotInitialized:\n            return `\n                ${error.message}\n                In order to initialize the payment step of checkout, you need to call\n                \\`CheckoutService#initializePayment\\`. Afterwards, you should be able to\n                submit payment details.\n            `;\n\n        case NotInitializedErrorType.ShippingNotInitialized:\n            return `\n                ${error.message}\n                In order to initialize the shipping step of checkout, you need to call\n                \\`CheckoutService#initializeShipping\\`. Afterwards, you should be able to\n                submit shipping details.\n            `;\n\n        default:\n            return error.message;\n        }\n    });\n}\n\nfunction isCheckoutServiceError(error: any): error is CheckoutServiceErrorType {\n    return !!(error.subtype || error.type);\n}\n","import { createRequestSender } from '@bigcommerce/request-sender';\n\nimport { BillingAddressActionCreator, BillingAddressRequestSender } from '../billing';\nimport { getDefaultLogger } from '../common/log';\nimport { getEnvironment } from '../common/utility';\nimport { ConfigActionCreator, ConfigRequestSender, ConfigState } from '../config';\nimport { CouponActionCreator, CouponRequestSender, GiftCertificateActionCreator, GiftCertificateRequestSender } from '../coupon';\nimport { createCustomerStrategyRegistry, CustomerStrategyActionCreator } from '../customer';\nimport { CountryActionCreator, CountryRequestSender } from '../geography';\nimport { OrderActionCreator, OrderRequestSender } from '../order';\nimport { createPaymentClient, createPaymentStrategyRegistry, PaymentMethodActionCreator, PaymentMethodRequestSender, PaymentStrategyActionCreator } from '../payment';\nimport { InstrumentActionCreator, InstrumentRequestSender } from '../payment/instrument';\nimport { createShippingStrategyRegistry, ConsignmentActionCreator, ConsignmentRequestSender, ShippingCountryActionCreator, ShippingCountryRequestSender, ShippingStrategyActionCreator } from '../shipping';\n\nimport CheckoutActionCreator from './checkout-action-creator';\nimport CheckoutRequestSender from './checkout-request-sender';\nimport CheckoutService from './checkout-service';\nimport CheckoutValidator from './checkout-validator';\nimport createCheckoutStore from './create-checkout-store';\n\n/**\n * Creates an instance of `CheckoutService`.\n *\n * ```js\n * const service = createCheckoutService();\n *\n * service.subscribe(state => {\n *     console.log(state);\n * });\n *\n * service.loadCheckout();\n * ```\n *\n * @param options - A set of construction options.\n * @returns an instance of `CheckoutService`.\n */\nexport default function createCheckoutService(options?: CheckoutServiceOptions): CheckoutService {\n    if (document.location.protocol !== 'https:') {\n        getDefaultLogger().warn('The BigCommerce Checkout SDK should not be used on a non-HTTPS page');\n    }\n\n    if (getEnvironment() !== 'production') {\n        getDefaultLogger().warn('Note that the development build is not optimized. To create a production build, set process.env.NODE_ENV to `production`.');\n    }\n\n    const config: ConfigState = {\n        meta: {\n            externalSource: options && options.externalSource,\n        },\n        errors: {},\n        statuses: {},\n    };\n    const { locale = '', shouldWarnMutation = true } = options || {};\n    const requestSender = createRequestSender({ host: options && options.host });\n    const store = createCheckoutStore({ config }, { shouldWarnMutation });\n    const paymentClient = createPaymentClient(store);\n    const orderRequestSender = new OrderRequestSender(requestSender);\n    const checkoutRequestSender = new CheckoutRequestSender(requestSender);\n    const configActionCreator = new ConfigActionCreator(new ConfigRequestSender(requestSender));\n    const orderActionCreator = new OrderActionCreator(orderRequestSender, new CheckoutValidator(checkoutRequestSender));\n\n    return new CheckoutService(\n        store,\n        new BillingAddressActionCreator(new BillingAddressRequestSender(requestSender)),\n        new CheckoutActionCreator(checkoutRequestSender, configActionCreator),\n        configActionCreator,\n        new ConsignmentActionCreator(new ConsignmentRequestSender(requestSender), checkoutRequestSender),\n        new CountryActionCreator(new CountryRequestSender(requestSender, { locale })),\n        new CouponActionCreator(new CouponRequestSender(requestSender)),\n        new CustomerStrategyActionCreator(createCustomerStrategyRegistry(store, requestSender)),\n        new GiftCertificateActionCreator(new GiftCertificateRequestSender(requestSender)),\n        new InstrumentActionCreator(new InstrumentRequestSender(paymentClient, requestSender)),\n        orderActionCreator,\n        new PaymentMethodActionCreator(new PaymentMethodRequestSender(requestSender)),\n        new PaymentStrategyActionCreator(\n            createPaymentStrategyRegistry(store, paymentClient, requestSender),\n            orderActionCreator\n        ),\n        new ShippingCountryActionCreator(new ShippingCountryRequestSender(requestSender, { locale })),\n        new ShippingStrategyActionCreator(createShippingStrategyRegistry(store, requestSender))\n    );\n}\n\nexport interface CheckoutServiceOptions {\n    locale?: string;\n    host?: string;\n    shouldWarnMutation?: boolean;\n    externalSource?: string;\n}\n","/// <reference path=\"../payment/bigpay-client.d.ts\" />\nimport { createClient as createBigpayClient } from '@bigcommerce/bigpay-client';\n\nimport { CheckoutStore } from '../checkout';\n\nexport default function createPaymentClient(store: CheckoutStore) {\n    const paymentClient = createBigpayClient();\n\n    store.subscribe(\n        state => {\n            const config = state.config.getStoreConfig();\n\n            if (config) {\n                paymentClient.setHost(config.paymentSettings.bigpayBaseUrl);\n            }\n        },\n        state => state.config.getStoreConfig()\n    );\n\n    return paymentClient;\n}\n","export const LOAD_COUNTRIES_REQUESTED = 'LOAD_COUNTRIES_REQUESTED';\nexport const LOAD_COUNTRIES_SUCCEEDED = 'LOAD_COUNTRIES_SUCCEEDED';\nexport const LOAD_COUNTRIES_FAILED = 'LOAD_COUNTRIES_FAILED';\n","export const LOAD_SHIPPING_COUNTRIES_REQUESTED = 'LOAD_SHIPPING_COUNTRIES_REQUESTED';\nexport const LOAD_SHIPPING_COUNTRIES_SUCCEEDED = 'LOAD_SHIPPING_COUNTRIES_SUCCEEDED';\nexport const LOAD_SHIPPING_COUNTRIES_FAILED = 'LOAD_SHIPPING_COUNTRIES_FAILED';\n","module.exports = require(\"rxjs/observable/defer\");","export const ACKNOWLEDGE = 'ACKNOWLEDGE';\nexport const FINALIZE = 'FINALIZE';\nexport const INITIALIZE = 'INITIALIZE';\n","module.exports = require(\"rxjs/observable/from\");","export default interface PaymentStrategyState {\n    errors: PaymentStrategyErrorsState;\n    statuses: PaymentStrategyStatusesState;\n}\n\nexport interface PaymentStrategyErrorsState {\n    deinitializeError?: Error;\n    deinitializeMethodId?: string;\n    executeError?: Error;\n    executeMethodId?: string;\n    finalizeError?: Error;\n    finalizeMethodId?: string;\n    initializeError?: Error;\n    initializeMethodId?: string;\n    widgetInteractionError?: Error;\n    widgetInteractionMethodId?: string;\n}\n\nexport interface PaymentStrategyStatusesState {\n    deinitializeMethodId?: string;\n    executeMethodId?: string;\n    finalizeMethodId?: string;\n    initializeMethodId?: string;\n    isDeinitializing?: boolean;\n    isExecuting?: boolean;\n    isFinalizing?: boolean;\n    isInitializing?: boolean;\n    isWidgetInteracting?: boolean;\n    widgetInteractionMethodId?: string;\n}\n\nexport const DEFAULT_STATE: PaymentStrategyState = {\n    errors: {},\n    statuses: {},\n};\n","const DEFAULT_INCLUDES = [\n    'cart.lineItems.physicalItems.options',\n    'cart.lineItems.digitalItems.options',\n    'customer',\n    'payments',\n    'promotions.banners',\n];\n\nexport default DEFAULT_INCLUDES;\n","module.exports = require(\"@bigcommerce/script-loader\");","import { Action } from '@bigcommerce/data-store';\n\nimport { LoadCheckoutAction } from '../checkout';\n\nimport { InternalCustomerResponseData } from './internal-customer-responses';\n\nexport enum CustomerActionType {\n    SignInCustomerRequested = 'SIGN_IN_CUSTOMER_REQUESTED',\n    SignInCustomerSucceeded = 'SIGN_IN_CUSTOMER_SUCCEEDED',\n    SignInCustomerFailed = 'SIGN_IN_CUSTOMER_FAILED',\n\n    SignOutCustomerRequested = 'SIGN_OUT_CUSTOMER_REQUESTED',\n    SignOutCustomerSucceeded = 'SIGN_OUT_CUSTOMER_SUCCEEDED',\n    SignOutCustomerFailed = 'SIGN_OUT_CUSTOMER_FAILED',\n}\n\nexport type CustomerAction =\n    SignInCustomerAction |\n    SignOutCustomerAction;\n\nexport type SignInCustomerAction =\n    SignInCustomerRequestedAction |\n    SignInCustomerSucceededAction |\n    SignInCustomerFailedAction |\n    LoadCheckoutAction;\n\nexport type SignOutCustomerAction =\n    SignOutCustomerRequestedAction |\n    SignOutCustomerSucceededAction |\n    SignOutCustomerFailedAction |\n    LoadCheckoutAction;\n\nexport interface SignInCustomerRequestedAction extends Action {\n    type: CustomerActionType.SignInCustomerRequested;\n}\n\nexport interface SignInCustomerSucceededAction extends Action<InternalCustomerResponseData> {\n    type: CustomerActionType.SignInCustomerSucceeded;\n}\n\nexport interface SignInCustomerFailedAction extends Action<Error> {\n    type: CustomerActionType.SignInCustomerFailed;\n}\n\nexport interface SignOutCustomerRequestedAction extends Action {\n    type: CustomerActionType.SignOutCustomerRequested;\n}\n\nexport interface SignOutCustomerSucceededAction extends Action<InternalCustomerResponseData> {\n    type: CustomerActionType.SignOutCustomerSucceeded;\n}\n\nexport interface SignOutCustomerFailedAction extends Action<Error> {\n    type: CustomerActionType.SignOutCustomerFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { LoadOrderAction } from '../order';\n\nimport PaymentResponseBody from './payment-response-body';\n\nexport enum PaymentActionType {\n    SubmitPaymentRequested = 'SUBMIT_PAYMENT_REQUESTED',\n    SubmitPaymentSucceeded = 'SUBMIT_PAYMENT_SUCCEEDED',\n    SubmitPaymentFailed = 'SUBMIT_PAYMENT_FAILED',\n\n    InitializeOffsitePaymentRequested = 'INITIALIZE_OFFSITE_PAYMENT_REQUESTED',\n    InitializeOffsitePaymentSucceeded = 'INITIALIZE_OFFSITE_PAYMENT_SUCCEEDED',\n    InitializeOffsitePaymentFailed = 'INITIALIZE_OFFSITE_PAYMENT_FAILED',\n}\n\nexport type PaymentAction = SubmitPaymentAction |\n    InitializeOffsitePaymentAction;\n\nexport type SubmitPaymentAction =\n    SubmitPaymentRequestedAction |\n    SubmitPaymentSucceededAction |\n    SubmitPaymentFailedAction |\n    LoadOrderAction;\n\nexport type InitializeOffsitePaymentAction =\n    InitializeOffsitePaymentRequestedAction |\n    InitializeOffsitePaymentSucceededAction |\n    InitializeOffsitePaymentFailedAction;\n\nexport interface SubmitPaymentRequestedAction extends Action {\n    type: PaymentActionType.SubmitPaymentRequested;\n}\n\nexport interface SubmitPaymentSucceededAction extends Action<PaymentResponseBody> {\n    type: PaymentActionType.SubmitPaymentSucceeded;\n}\n\nexport interface SubmitPaymentFailedAction extends Action<Error> {\n    type: PaymentActionType.SubmitPaymentFailed;\n}\n\nexport interface InitializeOffsitePaymentRequestedAction extends Action {\n    type: PaymentActionType.InitializeOffsitePaymentRequested;\n}\n\nexport interface InitializeOffsitePaymentSucceededAction extends Action {\n    type: PaymentActionType.InitializeOffsitePaymentSucceeded;\n}\n\nexport interface InitializeOffsitePaymentFailedAction extends Action<Error> {\n    type: PaymentActionType.InitializeOffsitePaymentFailed;\n}\n","module.exports = require(\"@bigcommerce/request-sender\");","export const HOSTED = 'PAYMENT_TYPE_HOSTED';\nexport const OFFLINE = 'PAYMENT_TYPE_OFFLINE';\n","module.exports = require(\"@bigcommerce/form-poster\");","import IframeEvent from './iframe-event';\n\nexport default function isIframeEvent<TEvent extends IframeEvent<TType>, TType extends string>(\n    object: any,\n    type: TType\n): object is TEvent {\n    return object.type === type;\n}\n","export default class CacheKeyResolver {\n    private _lastId = 0;\n    private _maps: CacheKeyMap[] = [];\n\n    getKey(...args: any[]): string {\n        const { index, map, parentMaps } = this._resolveMap(...args);\n\n        if (map && map.cacheKey) {\n            map.usedCount++;\n\n            return map.cacheKey;\n        }\n\n        return this._generateKey(parentMaps, args.slice(index));\n    }\n\n    getUsedCount(...args: any[]): number {\n        const { map } = this._resolveMap(...args);\n\n        return map ? map.usedCount : 0;\n    }\n\n    private _resolveMap(...args: any[]): ResolveResult {\n        let index = 0;\n        let parentMaps = this._maps;\n\n        while (parentMaps.length) {\n            let isMatched = false;\n\n            for (const map of parentMaps) {\n                if (map.value !== args[index]) {\n                    continue;\n                }\n\n                if ((args.length === 0 || index === args.length - 1) && map.cacheKey) {\n                    return { index, map, parentMaps };\n                }\n\n                isMatched = true;\n                parentMaps = map.maps;\n                index++;\n\n                break;\n            }\n\n            if (!isMatched) {\n                break;\n            }\n        }\n\n        return { index, parentMaps };\n    }\n\n    private _generateKey(maps: CacheKeyMap[], args: any[]): string {\n        let index = 0;\n        let parentMaps = maps;\n        let map!: CacheKeyMap;\n\n        do {\n            map = {\n                usedCount: 1,\n                value: args[index],\n                maps: [],\n            };\n\n            parentMaps.push(map);\n\n            parentMaps = map.maps;\n            index++;\n        } while (index < args.length);\n\n        map.cacheKey = `${++this._lastId}`;\n\n        return map.cacheKey;\n    }\n}\n\ninterface CacheKeyMap {\n    maps: CacheKeyMap[];\n    value: any;\n    usedCount: number;\n    cacheKey?: string;\n}\n\ninterface ResolveResult {\n    index: number;\n    parentMaps: CacheKeyMap[];\n    map?: CacheKeyMap;\n}\n","import { InternalCheckoutSelectors } from '../checkout';\nimport { selector } from '../common/selector';\n\nimport CheckoutButtonSelector from './checkout-button-selector';\n\n@selector\nexport default class CheckoutButtonErrorSelector {\n    private _checkoutButton: CheckoutButtonSelector;\n\n    /**\n     * @internal\n     */\n    constructor(selectors: InternalCheckoutSelectors) {\n        this._checkoutButton = selectors.checkoutButton;\n    }\n\n    getInitializeButtonError(methodId?: string): Error | undefined {\n        return this._checkoutButton.getInitializeError(methodId);\n    }\n\n    getDeinitializeButtonError(methodId?: string): Error | undefined {\n        return this._checkoutButton.getDeinitializeError(methodId);\n    }\n}\n","import { InternalCheckoutSelectors } from '../checkout';\nimport { selector } from '../common/selector';\n\nimport CheckoutButtonSelector from './checkout-button-selector';\n\n@selector\nexport default class CheckoutButtonStatusSelector {\n    private _checkoutButton: CheckoutButtonSelector;\n\n    /**\n     * @internal\n     */\n    constructor(selectors: InternalCheckoutSelectors) {\n        this._checkoutButton = selectors.checkoutButton;\n    }\n\n    isInitializingButton(methodId?: string): boolean {\n        return this._checkoutButton.isInitializing(methodId);\n    }\n\n    isDeinitializingButton(methodId?: string): boolean {\n        return this._checkoutButton.isDeinitializing(methodId);\n    }\n}\n","import { InternalCheckoutSelectors } from '../checkout';\n\nimport CheckoutButtonErrorSelector from './checkout-button-error-selector';\nimport CheckoutButtonSelectors from './checkout-button-selectors';\nimport CheckoutButtonStatusSelector from './checkout-button-status-selector';\n\nexport default function createCheckoutButtonSelectors(selectors: InternalCheckoutSelectors): CheckoutButtonSelectors {\n    const errors = new CheckoutButtonErrorSelector(selectors);\n    const statuses = new CheckoutButtonStatusSelector(selectors);\n\n    return {\n        errors,\n        statuses,\n    };\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../checkout';\n\nimport { CheckoutButtonInitializeOptions, CheckoutButtonOptions } from './checkout-button-options';\nimport CheckoutButtonSelectors from './checkout-button-selectors';\nimport CheckoutButtonStrategyActionCreator from './checkout-button-strategy-action-creator';\nimport createCheckoutButtonSelectors from './create-checkout-button-selectors';\n\nexport default class CheckoutButtonInitializer {\n    private _state: CheckoutButtonSelectors;\n\n    /**\n     * @internal\n     */\n    constructor(\n        private _store: CheckoutStore,\n        private _buttonStrategyActionCreator: CheckoutButtonStrategyActionCreator\n    ) {\n        this._state = createCheckoutButtonSelectors(this._store.getState());\n\n        this._store.subscribe(state => {\n            this._state = createCheckoutButtonSelectors(state);\n        });\n    }\n\n    /**\n     * Returns a snapshot of the current state.\n     *\n     * The method returns a new instance every time there is a change in the\n     * state. You can query the state by calling any of its getter methods.\n     *\n     * ```js\n     * const state = service.getState();\n     *\n     * console.log(state.errors.getInitializeButtonError());\n     * console.log(state.statuses.isInitializingButton());\n     * ```\n     *\n     * @returns The current customer's checkout state\n     */\n    getState(): CheckoutButtonSelectors {\n        return this._state;\n    }\n\n    /**\n     * Subscribes to any changes to the current state.\n     *\n     * The method registers a callback function and executes it every time there\n     * is a change in the current state.\n     *\n     * ```js\n     * service.subscribe(state => {\n     *     console.log(state.statuses.isInitializingButton());\n     * });\n     * ```\n     *\n     * The method can be configured to notify subscribers only regarding\n     * relevant changes, by providing a filter function.\n     *\n     * ```js\n     * const filter = state => state.errors.getInitializeButtonError();\n     *\n     * // Only trigger the subscriber when the cart changes.\n     * service.subscribe(state => {\n     *     console.log(state.errors.getInitializeButtonError())\n     * }, filter);\n     * ```\n     *\n     * @param subscriber - The function to subscribe to state changes.\n     * @param filters - One or more functions to filter out irrelevant state\n     * changes. If more than one function is provided, the subscriber will only\n     * be triggered if all conditions are met.\n     * @returns A function, if called, will unsubscribe the subscriber.\n     */\n    subscribe(\n        subscriber: (state: CheckoutButtonSelectors) => void,\n        ...filters: Array<(state: CheckoutButtonSelectors) => any>\n    ): () => void {\n        return this._store.subscribe(\n            () => subscriber(this.getState()),\n            state => state.checkoutButton.getState(),\n            ...filters.map(filter => (state: InternalCheckoutSelectors) => filter(createCheckoutButtonSelectors(state)))\n        );\n    }\n\n    /**\n     * Initializes the checkout button of a payment method.\n     *\n     * When the checkout button is initialized, it will be inserted into the DOM,\n     * ready to be interacted with by the customer.\n     *\n     * ```js\n     * initializer.initializeButton({\n     *     methodId: 'braintreepaypal',\n     *     braintreepaypal: {\n     *         container: '#checkoutButton',\n     *     },\n     * });\n     * ```\n     *\n     * @param options - Options for initializing the checkout button.\n     * @returns A promise that resolves to the current state.\n     */\n    initializeButton(options: CheckoutButtonInitializeOptions): Promise<CheckoutButtonSelectors> {\n        const action = this._buttonStrategyActionCreator.initialize(options);\n\n        return this._store.dispatch(action, { queueId: `${options.methodId}ButtonStrategy` })\n            .then(() => this.getState());\n    }\n\n    /**\n     * De-initializes the checkout button by performing any necessary clean-ups.\n     *\n     * ```js\n     * await service.deinitializeButton({\n     *     methodId: 'braintreepaypal',\n     * });\n     * ```\n     *\n     * @param options - Options for deinitializing the checkout button.\n     * @returns A promise that resolves to the current state.\n     */\n    deinitializeButton(options: CheckoutButtonOptions): Promise<CheckoutButtonSelectors> {\n        const action = this._buttonStrategyActionCreator.deinitialize(options);\n\n        return this._store.dispatch(action, { queueId: `${options.methodId}ButtonStrategy` })\n            .then(() => this.getState());\n    }\n}\n","import { createAction } from '@bigcommerce/data-store';\nimport { concat } from 'rxjs/observable/concat';\nimport { defer } from 'rxjs/observable/defer';\nimport { of } from 'rxjs/observable/of';\nimport { catchError } from 'rxjs/operators';\nimport { Observable } from 'rxjs/Observable';\n\nimport { throwErrorAction } from '../common/error';\nimport { Registry } from '../common/registry';\nimport { PaymentMethodActionCreator } from '../payment';\n\nimport { CheckoutButtonActionType, DeinitializeButtonAction, InitializeButtonAction } from './checkout-button-actions';\nimport { CheckoutButtonInitializeOptions, CheckoutButtonOptions } from './checkout-button-options';\nimport { CheckoutButtonStrategy } from './strategies';\n\nexport default class CheckoutButtonStrategyActionCreator {\n    constructor(\n        private _registry: Registry<CheckoutButtonStrategy>,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator\n    ) {}\n\n    initialize(options: CheckoutButtonInitializeOptions): Observable<InitializeButtonAction> {\n        const meta = { methodId: options.methodId };\n\n        return concat(\n            of(createAction(CheckoutButtonActionType.InitializeButtonRequested, undefined, meta)),\n            this._paymentMethodActionCreator.loadPaymentMethod(options.methodId, options),\n            defer(() => this._registry.get(options.methodId).initialize(options)\n                .then(() => createAction(CheckoutButtonActionType.InitializeButtonSucceeded, undefined, meta)))\n        ).pipe(\n            catchError(error => throwErrorAction(CheckoutButtonActionType.InitializeButtonFailed, error, meta))\n        );\n    }\n\n    deinitialize(options: CheckoutButtonOptions): Observable<DeinitializeButtonAction> {\n        const meta = { methodId: options.methodId };\n\n        return concat(\n            of(createAction(CheckoutButtonActionType.DeinitializeButtonRequested, undefined, meta)),\n            defer(() => this._registry.get(options.methodId).deinitialize(options)\n                .then(() => createAction(CheckoutButtonActionType.DeinitializeButtonSucceeded, undefined, meta)))\n        ).pipe(\n            catchError(error => throwErrorAction(CheckoutButtonActionType.DeinitializeButtonFailed, error, meta))\n        );\n    }\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\nimport { pick } from 'lodash';\n\nimport { Address, LegacyAddress } from '../../address';\nimport { CheckoutActionCreator, CheckoutStore } from '../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType, StandardError } from '../../common/error/errors';\nimport { PaymentMethod } from '../../payment';\nimport { BraintreeAddress, BraintreeError, BraintreePaypalCheckout, BraintreeSDKCreator, BraintreeTokenizePayload } from '../../payment/strategies/braintree';\nimport { PaypalAuthorizeData, PaypalScriptLoader } from '../../payment/strategies/paypal';\nimport { CheckoutButtonInitializeOptions, CheckoutButtonOptions } from '../checkout-button-options';\n\nimport CheckoutButtonStrategy from './checkout-button-strategy';\n\nexport default class BraintreePaypalButtonStrategy extends CheckoutButtonStrategy {\n    private _paypalCheckout?: BraintreePaypalCheckout;\n    private _paymentMethod?: PaymentMethod;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _braintreeSDKCreator: BraintreeSDKCreator,\n        private _paypalScriptLoader: PaypalScriptLoader,\n        private _formPoster: FormPoster,\n        private _offerCredit: boolean = false\n    ) {\n        super();\n    }\n\n    initialize(options: CheckoutButtonInitializeOptions): Promise<void> {\n        if (this._isInitialized) {\n            return super.initialize(options);\n        }\n\n        const paypalOptions = this._offerCredit ? options.braintreepaypalcredit : options.braintreepaypal;\n        const state = this._store.getState();\n        const paymentMethod = this._paymentMethod = state.paymentMethods.getPaymentMethod(options.methodId);\n\n        if (!paypalOptions) {\n            throw new InvalidArgumentError();\n        }\n\n        if (!paymentMethod || !paymentMethod.clientToken) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        this._braintreeSDKCreator.initialize(paymentMethod.clientToken);\n\n        return Promise.all([\n            this._braintreeSDKCreator.getPaypalCheckout(),\n            this._paypalScriptLoader.loadPaypal(),\n        ])\n            .then(([paypalCheckout, paypal]) => {\n                this._paypalCheckout = paypalCheckout;\n\n                return paypal.Button.render({\n                    env: paymentMethod.config.testMode ? 'sandbox' : 'production',\n                    commit: paypalOptions.shouldProcessPayment ? true : false,\n                    style: {\n                        shape: 'rect',\n                        label: this._offerCredit ? 'credit' : undefined,\n                        ...pick(paypalOptions.style, 'layout', 'size', 'color', 'label', 'shape', 'tagline', 'fundingicons'),\n                    },\n                    payment: () => this._setupPayment(paypalOptions.onPaymentError),\n                    onAuthorize: data => this._tokenizePayment(data, paypalOptions.shouldProcessPayment, paypalOptions.onAuthorizeError),\n                }, paypalOptions.container);\n            })\n            .then(() => super.initialize(options));\n    }\n\n    deinitialize(options: CheckoutButtonOptions): Promise<void> {\n        if (!this._isInitialized) {\n            return super.deinitialize(options);\n        }\n\n        this._paypalCheckout = undefined;\n        this._paymentMethod = undefined;\n\n        this._braintreeSDKCreator.teardown();\n\n        return super.deinitialize(options);\n    }\n\n    private _setupPayment(onError?: (error: BraintreeError | StandardError) => void): Promise<string> {\n        return this._store.dispatch(this._checkoutActionCreator.loadDefaultCheckout())\n            .then(state => {\n                const checkout = state.checkout.getCheckout();\n                const config = state.config.getStoreConfig();\n                const customer = state.customer.getCustomer();\n                const address = customer && customer.addresses && customer.addresses[0];\n\n                if (!this._paypalCheckout) {\n                    throw new NotInitializedError(NotInitializedErrorType.CheckoutButtonNotInitialized);\n                }\n\n                if (!checkout) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                }\n\n                if (!config) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n                }\n\n                return this._paypalCheckout.createPayment({\n                    flow: 'checkout',\n                    enableShippingAddress: true,\n                    shippingAddressEditable: false,\n                    shippingAddressOverride: address ? this._mapToBraintreeAddress(address) : undefined,\n                    amount: checkout.grandTotal,\n                    currency: config.currency.code,\n                    offerCredit: this._offerCredit,\n                });\n            })\n            .catch(error => {\n                if (onError) {\n                    onError(error);\n                }\n\n                throw error;\n            });\n    }\n\n    private _tokenizePayment(\n        data: PaypalAuthorizeData,\n        shouldProcessPayment?: boolean,\n        onError?: (error: BraintreeError | StandardError) => void\n    ): Promise<BraintreeTokenizePayload> {\n        if (!this._paypalCheckout || !this._paymentMethod) {\n            throw new NotInitializedError(NotInitializedErrorType.CheckoutButtonNotInitialized);\n        }\n\n        const methodId = this._paymentMethod.id;\n\n        return Promise.all([\n            this._paypalCheckout.tokenizePayment(data),\n            this._braintreeSDKCreator.getDataCollector({ paypal: true }),\n        ])\n            .then(([payload, { deviceData }]) => {\n                this._formPoster.postForm('/checkout.php', {\n                    payment_type: 'paypal',\n                    provider: methodId,\n                    action: shouldProcessPayment ? 'process_payment' : 'set_external_checkout',\n                    nonce: payload.nonce,\n                    device_data: deviceData,\n                    shipping_address: JSON.stringify(this._mapToLegacyShippingAddress(payload)),\n                    billing_address: JSON.stringify(this._mapToLegacyBillingAddress(payload)),\n                });\n\n                return payload;\n            })\n            .catch(error => {\n                if (onError) {\n                    onError(error);\n                }\n\n                throw error;\n            });\n    }\n\n    private _mapToLegacyShippingAddress(payload: BraintreeTokenizePayload): Partial<LegacyAddress> {\n        const shippingAddress = payload.details.shippingAddress;\n        const recipientName = shippingAddress && shippingAddress.recipientName || '';\n        const [firstName, lastName] = recipientName.split(' ');\n\n        return {\n            email: payload.details.email,\n            first_name: firstName,\n            last_name: lastName,\n            phone_number: shippingAddress && shippingAddress.phone || payload.details.phone,\n            address_line_1: shippingAddress && shippingAddress.line1,\n            address_line_2: shippingAddress && shippingAddress.line2,\n            city: shippingAddress && shippingAddress.city,\n            state: shippingAddress && shippingAddress.state,\n            country_code: shippingAddress && shippingAddress.countryCode,\n            postal_code: shippingAddress && shippingAddress.postalCode,\n        };\n    }\n\n    private _mapToLegacyBillingAddress(payload: BraintreeTokenizePayload): Partial<LegacyAddress> {\n        const billingAddress = payload.details.billingAddress;\n        const shippingAddress = payload.details.shippingAddress;\n\n        if (billingAddress) {\n            return {\n                email: payload.details.email,\n                first_name: billingAddress.firstName || payload.details.firstName,\n                last_name: billingAddress.lastName || payload.details.lastName,\n                phone_number: billingAddress.phone || payload.details.phone,\n                address_line_1: billingAddress.line1,\n                address_line_2: billingAddress.line2,\n                city: billingAddress.city,\n                state: billingAddress.state,\n                country_code: billingAddress.countryCode,\n                postal_code: billingAddress.postalCode,\n            };\n        }\n\n        return {\n            email: payload.details.email,\n            first_name: payload.details.firstName,\n            last_name: payload.details.lastName,\n            phone_number: payload.details.phone,\n            address_line_1: shippingAddress && shippingAddress.line1,\n            address_line_2: shippingAddress && shippingAddress.line2,\n            city: shippingAddress && shippingAddress.city,\n            state: shippingAddress && shippingAddress.state,\n            country_code: shippingAddress && shippingAddress.countryCode,\n            postal_code: shippingAddress && shippingAddress.postalCode,\n        };\n    }\n\n    private _mapToBraintreeAddress(address: Address): BraintreeAddress {\n        return {\n            line1: address.address1,\n            line2: address.address2,\n            city: address.city,\n            state: address.stateOrProvinceCode,\n            postalCode: address.postalCode,\n            countryCode: address.countryCode,\n            phone: address.phone,\n            recipientName: `${address.firstName} ${address.lastName}`,\n        };\n    }\n}\n","import { CheckoutButtonInitializeOptions, CheckoutButtonOptions } from '../checkout-button-options';\n\nexport default abstract class CheckoutButtonStrategy {\n    protected _isInitialized = false;\n\n    initialize(options: CheckoutButtonInitializeOptions): Promise<void> {\n        this._isInitialized = true;\n\n        return Promise.resolve();\n    }\n\n    deinitialize(options: CheckoutButtonOptions): Promise<void> {\n        this._isInitialized = false;\n\n        return Promise.resolve();\n    }\n}\n","import { createRequestSender } from '@bigcommerce/request-sender';\n\nimport { createCheckoutStore } from '../checkout';\nimport { PaymentMethodActionCreator, PaymentMethodRequestSender } from '../payment';\n\nimport CheckoutButtonInitializer from './checkout-button-initializer';\nimport CheckoutButtonInitializerOptions from './checkout-button-initializer-options';\nimport CheckoutButtonStrategyActionCreator from './checkout-button-strategy-action-creator';\nimport createCheckoutButtonRegistry from './create-checkout-button-registry';\n\n/**\n * Creates an instance of `CheckoutButtonInitializer`.\n *\n * ```js\n * const initializer = createCheckoutButtonInitializer();\n *\n * initializer.initializeButton({\n *     methodId: 'braintreepaypal',\n *     braintreepaypal: {\n *         container: '#checkoutButton',\n *     },\n * });\n * ```\n *\n * Please note that `CheckoutButtonInitializer` is currently in an early stage\n * of development. Therefore the API is unstable and not ready for public\n * consumption.\n *\n * @alpha\n * @param options - A set of construction options.\n * @returns an instance of `CheckoutButtonInitializer`.\n */\nexport default function createCheckoutButtonInitializer(\n    options?: CheckoutButtonInitializerOptions\n): CheckoutButtonInitializer {\n    const store = createCheckoutStore();\n    const requestSender = createRequestSender({ host: options && options.host });\n\n    return new CheckoutButtonInitializer(\n        store,\n        new CheckoutButtonStrategyActionCreator(\n            createCheckoutButtonRegistry(store, requestSender),\n            new PaymentMethodActionCreator(new PaymentMethodRequestSender(requestSender))\n        )\n    );\n}\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { RequestSender } from '@bigcommerce/request-sender';\nimport { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport { CheckoutActionCreator, CheckoutRequestSender, CheckoutStore } from '../checkout';\nimport { Registry } from '../common/registry';\nimport { ConfigActionCreator, ConfigRequestSender } from '../config';\nimport { BraintreeScriptLoader, BraintreeSDKCreator } from '../payment/strategies/braintree';\nimport { PaypalScriptLoader } from '../payment/strategies/paypal';\n\nimport { BraintreePaypalButtonStrategy, CheckoutButtonStrategy } from './strategies';\n\nexport default function createCheckoutButtonRegistry(\n    store: CheckoutStore,\n    requestSender: RequestSender\n): Registry<CheckoutButtonStrategy> {\n    const registry = new Registry<CheckoutButtonStrategy>();\n    const scriptLoader = getScriptLoader();\n    const checkoutActionCreator = new CheckoutActionCreator(\n        new CheckoutRequestSender(requestSender),\n        new ConfigActionCreator(new ConfigRequestSender(requestSender))\n    );\n\n    registry.register('braintreepaypal', () =>\n        new BraintreePaypalButtonStrategy(\n            store,\n            checkoutActionCreator,\n            new BraintreeSDKCreator(new BraintreeScriptLoader(scriptLoader)),\n            new PaypalScriptLoader(scriptLoader),\n            createFormPoster()\n        )\n    );\n\n    registry.register('braintreepaypalcredit', () =>\n        new BraintreePaypalButtonStrategy(\n            store,\n            checkoutActionCreator,\n            new BraintreeSDKCreator(new BraintreeScriptLoader(scriptLoader)),\n            new PaypalScriptLoader(scriptLoader),\n            createFormPoster(),\n            true\n        )\n    );\n\n    return registry;\n}\n","import InternalLineItem from './internal-line-item';\nimport { LineItem } from './line-item';\nimport LineItemMap from './line-item-map';\nimport mapGiftCertificateToInternalLineItem from './map-gift-certificate-to-internal-line-item';\nimport mapToInternalLineItem from './map-to-internal-line-item';\n\nexport default function mapToInternalLineItems(\n    itemMap: LineItemMap,\n    decimalPlaces: number,\n    idKey: keyof LineItem = 'id'\n): InternalLineItem[] {\n    return (Object.keys(itemMap) as Array<keyof LineItemMap>)\n        .reduce((result, key) => [\n            ...result,\n            ...(itemMap[key] as LineItem[]).map((item: any) => {\n                if (key === 'giftCertificates') {\n                    return mapGiftCertificateToInternalLineItem(item, decimalPlaces);\n                }\n\n                return mapToInternalLineItem(\n                    item,\n                    mapToInternalLineItemType(key),\n                    decimalPlaces,\n                    idKey\n                );\n            }),\n        ], [] as InternalLineItem[]);\n}\n\nfunction mapToInternalLineItemType(type: string): string {\n    switch (type) {\n        case 'physicalItems':\n            return 'ItemPhysicalEntity';\n\n        case 'digitalItems':\n            return 'ItemDigitalEntity';\n\n        case 'giftCertificates':\n            return 'ItemGiftCertificateEntity';\n\n        default:\n            return '';\n    }\n}\n","import { Action } from '@bigcommerce/data-store';\nimport { from } from 'rxjs/observable/from';\nimport { catchError } from 'rxjs/operators';\nimport { Observable, Subscribable } from 'rxjs/Observable';\n\nimport { RequestErrorFactory } from '../common/error';\n\nexport default function createActionTransformer(\n    requestErrorFactory: RequestErrorFactory\n): (action: Subscribable<Action>) => Observable<Action> {\n    return action$ => from(action$).pipe(catchError<Action, never>(action => {\n        if (action instanceof Error || action.payload instanceof Error) {\n            throw action;\n        }\n\n        if (isResponse(action.payload)) {\n            throw { ...action, payload: requestErrorFactory.createError(action.payload) };\n        }\n\n        throw action;\n    }));\n}\n\nfunction isResponse(object: any) {\n    if (!object || typeof object !== 'object') {\n        return false;\n    }\n\n    return ['body', 'headers', 'status', 'statusText'].every(key =>\n        object.hasOwnProperty(key)\n    );\n}\n","import { BillingAddressSelector } from '../billing';\nimport { CartSelector } from '../cart';\nimport { selector } from '../common/selector';\nimport { CouponSelector, GiftCertificateSelector } from '../coupon';\nimport { CustomerSelector } from '../customer';\nimport { ConsignmentSelector } from '../shipping';\n\nimport Checkout from './checkout';\nimport CheckoutState from './checkout-state';\n\n@selector\nexport default class CheckoutSelector {\n    constructor(\n        private _checkout: CheckoutState,\n        private _billingAddress: BillingAddressSelector,\n        private _cart: CartSelector,\n        private _consignments: ConsignmentSelector,\n        private _coupons: CouponSelector,\n        private _customer: CustomerSelector,\n        private _giftCertificates: GiftCertificateSelector\n    ) {}\n\n    getCheckout(): Checkout | undefined {\n        const { data } = this._checkout;\n        const billingAddress = this._billingAddress.getBillingAddress();\n        const cart = this._cart.getCart();\n        const customer = this._customer.getCustomer();\n        const consignments = this._consignments.getConsignments() || [];\n        const coupons = this._coupons.getCoupons() || [];\n        const giftCertificates = this._giftCertificates.getGiftCertificates() || [];\n\n        if (!data || !cart || !customer) {\n            return;\n        }\n\n        return {\n            ...data,\n            billingAddress,\n            cart,\n            customer,\n            consignments,\n            coupons,\n            giftCertificates,\n        };\n    }\n\n    getLoadError(): Error | undefined {\n        return this._checkout.errors.loadError;\n    }\n\n    isLoading(): boolean {\n        return this._checkout.statuses.isLoading === true;\n    }\n\n    getUpdateError(): Error | undefined {\n        return this._checkout.errors.updateError;\n    }\n\n    isUpdating(): boolean {\n        return this._checkout.statuses.isUpdating === true;\n    }\n}\n","import { combineReducers, Action } from '@bigcommerce/data-store';\nimport { omit } from 'lodash';\n\nimport { BillingAddressAction, BillingAddressActionType } from '../billing';\nimport { CouponAction, CouponActionType, GiftCertificateAction, GiftCertificateActionType } from '../coupon';\nimport { OrderAction, OrderActionType } from '../order';\nimport { ConsignmentAction, ConsignmentActionType } from '../shipping';\n\nimport { CheckoutAction, CheckoutActionType } from './checkout-actions';\nimport CheckoutState, { CheckoutDataState, CheckoutErrorsState, CheckoutStatusesState } from './checkout-state';\n\nconst DEFAULT_STATE: CheckoutState = {\n    errors: {},\n    statuses: {},\n};\n\nexport default function checkoutReducer(\n    state: CheckoutState = DEFAULT_STATE,\n    action: Action\n): CheckoutState {\n    const reducer = combineReducers<CheckoutState>({\n        data: dataReducer,\n        errors: errorsReducer,\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: CheckoutDataState | undefined,\n    action: CheckoutAction | BillingAddressAction | ConsignmentAction | CouponAction | GiftCertificateAction | OrderAction\n): CheckoutDataState | undefined {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case CheckoutActionType.UpdateCheckoutSucceeded:\n    case BillingAddressActionType.UpdateBillingAddressSucceeded:\n    case CouponActionType.ApplyCouponSucceeded:\n    case CouponActionType.RemoveCouponSucceeded:\n    case ConsignmentActionType.CreateConsignmentsSucceeded:\n    case ConsignmentActionType.UpdateConsignmentSucceeded:\n    case ConsignmentActionType.DeleteConsignmentSucceeded:\n    case ConsignmentActionType.UpdateShippingOptionSucceeded:\n    case GiftCertificateActionType.ApplyGiftCertificateSucceeded:\n    case GiftCertificateActionType.RemoveGiftCertificateSucceeded:\n        return action.payload\n            ? omit({ ...data, ...action.payload }, ['billingAddress', 'cart', 'consignments', 'customer', 'coupons', 'giftCertifcates'])\n            : data;\n\n    case OrderActionType.SubmitOrderSucceeded:\n        return action.payload && data\n            ? { ...data, orderId: action.payload.order.orderId }\n            : data;\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: CheckoutErrorsState = DEFAULT_STATE.errors,\n    action: CheckoutAction | OrderAction\n): CheckoutErrorsState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n        return {\n            ...errors,\n            loadError: undefined,\n        };\n\n    case CheckoutActionType.LoadCheckoutFailed:\n        return {\n            ...errors,\n            loadError: action.payload,\n        };\n\n    case CheckoutActionType.UpdateCheckoutRequested:\n    case CheckoutActionType.UpdateCheckoutSucceeded:\n        return {\n            ...errors,\n            updateError: undefined,\n        };\n\n    case CheckoutActionType.UpdateCheckoutFailed:\n        return {\n            ...errors,\n            updateError: action.payload,\n        };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: CheckoutStatusesState = DEFAULT_STATE.statuses,\n    action: CheckoutAction | OrderAction\n): CheckoutStatusesState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n        return {\n            ...statuses,\n            isLoading: true,\n        };\n\n    case CheckoutActionType.LoadCheckoutFailed:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n        return {\n            ...statuses,\n            isLoading: false,\n        };\n\n    case CheckoutActionType.UpdateCheckoutRequested:\n        return {\n            ...statuses,\n            isUpdating: true,\n        };\n\n    case CheckoutActionType.UpdateCheckoutFailed:\n    case CheckoutActionType.UpdateCheckoutSucceeded:\n        return {\n            ...statuses,\n            isUpdating: false,\n        };\n\n    default:\n        return statuses;\n    }\n}\n","import InternalLineItem from './internal-line-item';\nimport { GiftCertificateItem } from './line-item';\n\nimport { AmountTransformer } from '.';\n\nexport default function mapGiftCertificateToInternalLineItem(\n    item: GiftCertificateItem,\n    decimalPlaces: number\n): InternalLineItem {\n    const amountTransformer = new AmountTransformer(decimalPlaces);\n\n    return {\n        id: item.id,\n        imageUrl: '',\n        name: item.name,\n        amount: item.amount,\n        amountAfterDiscount: item.amount,\n        discount: 0,\n        integerAmount: amountTransformer.toInteger(item.amount),\n        integerAmountAfterDiscount: amountTransformer.toInteger(item.amount),\n        integerDiscount: 0,\n        quantity: 1,\n        sender: item.sender,\n        recipient: item.recipient,\n        type: 'ItemGiftCertificateEntity',\n        attributes: [],\n        variantId: null,\n    };\n}\n","import InternalLineItem from './internal-line-item';\nimport { DigitalItem, LineItem } from './line-item';\n\nimport { AmountTransformer } from '.';\n\nexport default function mapToInternalLineItem(\n    item: LineItem,\n    type: string,\n    decimalPlaces: number,\n    idKey: keyof LineItem = 'id'\n): InternalLineItem {\n    const amountTransformer = new AmountTransformer(decimalPlaces);\n\n    return {\n        id: (item[idKey] as string | number),\n        imageUrl: item.imageUrl,\n        amount: item.extendedListPrice,\n        amountAfterDiscount: item.extendedSalePrice,\n        discount: item.discountAmount,\n        integerAmount: amountTransformer.toInteger(item.extendedListPrice),\n        integerAmountAfterDiscount: amountTransformer.toInteger(item.extendedSalePrice),\n        integerDiscount: amountTransformer.toInteger(item.discountAmount),\n        downloadsPageUrl: (item as DigitalItem).downloadPageUrl,\n        name: item.name,\n        quantity: item.quantity,\n        brand: item.brand,\n        variantId: item.variantId,\n        productId: item.productId,\n        attributes: (item.options || []).map(option => ({\n            name: option.name,\n            value: option.value,\n        })),\n        addedByPromotion: item.addedByPromotion,\n        type,\n    };\n}\n","import { selector } from '../common/selector';\n\nimport BillingAddress from './billing-address';\nimport BillingAddressState from './billing-address-state';\n\n@selector\nexport default class BillingAddressSelector {\n    constructor(\n        private _billingAddress: BillingAddressState\n    ) {}\n\n    getBillingAddress(): BillingAddress | undefined {\n        return this._billingAddress.data;\n    }\n\n    getUpdateError(): Error | undefined {\n        return this._billingAddress.errors.updateError;\n    }\n\n    getContinueAsGuestError(): Error | undefined {\n        return this._billingAddress.errors.continueAsGuestError;\n    }\n\n    getLoadError(): Error | undefined {\n        return this._billingAddress.errors.loadError;\n    }\n\n    isUpdating(): boolean {\n        return !!this._billingAddress.statuses.isUpdating;\n    }\n\n    isContinuingAsGuest(): boolean {\n        return !!this._billingAddress.statuses.isContinuingAsGuest;\n    }\n\n    isLoading(): boolean {\n        return !!this._billingAddress.statuses.isLoading;\n    }\n}\n","import { deepFreeze } from '@bigcommerce/data-store';\n\n// tslint:disable-next-line:ban-types\ntype FunctionProperties<T> = { [K in keyof T]: T[K] extends Function ? T[K] : never };\n\nexport default function createFreezeProxy<T extends object>(target: T): T {\n    return createProxy(target, (target, name) =>\n        (...args: any[]) => deepFreeze(target[name].call(target, ...args))\n    );\n}\n\nexport function createFreezeProxies<T extends { [key: string]: object }>(map: T): T {\n    return Object.keys(map)\n        .reduce((result, key) => {\n            result[key] = createFreezeProxy(map[key]);\n\n            return result;\n        }, {} as T);\n}\n\nfunction createProxy<T extends object>(target: T, trap: (target: FunctionProperties<T>, name: keyof FunctionProperties<T>, proxy: T) => any): T {\n    const proxy = Object.create(target);\n\n    traversePrototypeOf(target, prototype => {\n        Object.getOwnPropertyNames(prototype)\n            .forEach(name => {\n                if (name === 'constructor' || typeof proxy[name] !== 'function' || name.charAt(0) === '_') {\n                    return;\n                }\n\n                proxy[name] = trap(target as FunctionProperties<T>, name as keyof T, proxy);\n            });\n    });\n\n    return proxy;\n}\n\nfunction traversePrototypeOf(target: object, iteratee: (prototype: object) => void): void {\n    let prototype = Object.getPrototypeOf(target);\n\n    while (prototype) {\n        iteratee(prototype);\n\n        prototype = Object.getPrototypeOf(prototype);\n    }\n}\n","import { selector } from '../common/selector';\n\nimport Config, { ContextConfig, StoreConfig } from './config';\nimport ConfigState from './config-state';\n\n@selector\nexport default class ConfigSelector {\n    constructor(\n        private _config: ConfigState\n    ) {}\n\n    getConfig(): Config | undefined {\n        return this._config.data;\n    }\n\n    getStoreConfig(): StoreConfig | undefined {\n        return this._config.data && this._config.data.storeConfig;\n    }\n\n    getContextConfig(): ContextConfig | undefined {\n        return this._config.data && this._config.data.context;\n    }\n\n    getExternalSource(): string | undefined {\n        return this._config.meta && this._config.meta.externalSource;\n    }\n\n    getLoadError(): Error | undefined {\n        return this._config.errors.loadError;\n    }\n\n    isLoading(): boolean {\n        return !!this._config.statuses.isLoading;\n    }\n}\n","import { find } from 'lodash';\n\nimport { selector } from '../common/selector';\nimport { ConfigState } from '../config';\nimport { Country } from '../geography';\n\nimport FormField from './form-field';\n\n@selector\nexport default class FormSelector {\n    constructor(\n        private _config: ConfigState\n    ) {}\n\n    getShippingAddressFields(countries: Country[] = [], countryCode: string): FormField[] {\n        const selectedCountry = find(countries, { code: countryCode });\n        const fields = this._config.data ? this._config.data.storeConfig.formFields.shippingAddressFields : [];\n\n        return fields.map((field: any) => this._processField(field, countries, selectedCountry));\n    }\n\n    getBillingAddressFields(countries: Country[] = [], countryCode: string): FormField[] {\n        const selectedCountry = find(countries, { code: countryCode });\n        const fields = this._config.data ? this._config.data.storeConfig.formFields.billingAddressFields : [];\n\n        return fields.map((field: any) => this._processField(field, countries, selectedCountry));\n    }\n\n    private _processField(field: FormField, countries: Country[], selectedCountry?: Country): FormField {\n        if (field.name === 'countryCode') {\n            return this._processCountry(field, countries, selectedCountry);\n        }\n\n        if (field.name === 'stateOrProvince') {\n            return this._processProvince(field, selectedCountry);\n        }\n\n        if (field.name === 'postalCode') {\n            return this._processsPostCode(field, selectedCountry);\n        }\n\n        return field;\n    }\n\n    private _processCountry(field: FormField, countries: Country[] = [], country?: Country): FormField {\n        if (!countries.length) {\n            return field;\n        }\n\n        const { code = '' } = country || {};\n        const items = countries.map(({ code, name }: any) => ({\n            value: code,\n            label: name,\n        }));\n\n        return {\n            ...field,\n            options: { items },\n            default: code,\n            type: 'array',\n            fieldType: 'dropdown',\n            itemtype: 'string',\n        };\n    }\n\n    private _processProvince(field: FormField, country?: Country): FormField {\n        const { subdivisions = [] } = country || {};\n\n        if (!subdivisions.length) {\n            return {\n                ...field,\n                required: false,\n            };\n        }\n\n        const items = subdivisions.map(({ code, name }: any) => ({\n            value: code,\n            label: name,\n        }));\n\n        return {\n            ...field,\n            name: 'stateOrProvinceCode',\n            options: { items },\n            required: true,\n            type: 'array',\n            fieldType: 'dropdown',\n            itemtype: 'string',\n        };\n    }\n\n    private _processsPostCode(field: FormField, country?: Country): FormField {\n        const { hasPostalCodes = [] } = country || {};\n\n        if (hasPostalCodes === undefined) {\n            return field;\n        }\n\n        return { ...field, required: Boolean(hasPostalCodes) };\n    }\n}\n","import { selector } from '../common/selector';\n\nimport Country from './country';\nimport CountryState from './country-state';\n\n@selector\nexport default class CountrySelector {\n    constructor(\n        private _countries: CountryState\n    ) {}\n\n    getCountries(): Country[] | undefined {\n        return this._countries.data;\n    }\n\n    getLoadError(): Error | undefined {\n        return this._countries.errors.loadError;\n    }\n\n    isLoading(): boolean {\n        return !!this._countries.statuses.isLoading;\n    }\n}\n","import { find } from 'lodash';\n\nimport { CheckoutPayment, CheckoutSelector } from '../checkout';\nimport { selector } from '../common/selector';\nimport { GatewayOrderPayment, InternalOrderPayment, OrderSelector } from '../order';\n\nimport PaymentMethod from './payment-method';\nimport { HOSTED } from './payment-method-types';\nimport { ACKNOWLEDGE, FINALIZE } from './payment-status-types';\n\n@selector\nexport default class PaymentSelector {\n    constructor(\n        private _checkout: CheckoutSelector,\n        private _order: OrderSelector\n    ) {}\n\n    getPaymentId(): { providerId: string, gatewayId?: string } | undefined {\n        const internalPayment = this._getInternalPayment();\n\n        if (internalPayment && internalPayment.id) {\n            return {\n                providerId: internalPayment.id,\n                gatewayId: internalPayment.gateway,\n            };\n        }\n\n        const payment = this._getHostedPayment() || this._getGatewayPayment();\n\n        if (payment && payment.providerId) {\n            return {\n                providerId: payment.providerId,\n                gatewayId: payment.gatewayId,\n            };\n        }\n    }\n\n    getPaymentStatus(): string | undefined {\n        const internalPayment = this._getInternalPayment();\n\n        if (internalPayment && internalPayment.status) {\n            return internalPayment.status.replace('PAYMENT_STATUS_', '');\n        }\n\n        const payment = this._getHostedPayment() || this._getGatewayPayment();\n\n        if (payment) {\n            return payment.detail.step;\n        }\n    }\n\n    getPaymentToken(): string | undefined {\n        const meta = this._order.getOrderMeta();\n\n        return meta && meta.token;\n    }\n\n    getPaymentRedirectUrl(): string | undefined {\n        const payment = this._getInternalPayment();\n\n        return payment && payment.redirectUrl;\n    }\n\n    isPaymentDataRequired(useStoreCredit: boolean = false): boolean {\n        const checkout = this._checkout.getCheckout();\n\n        if (!checkout) {\n            return false;\n        }\n\n        const grandTotal = checkout.grandTotal || 0;\n        const storeCredit = checkout.customer.storeCredit || 0;\n\n        return (useStoreCredit ? grandTotal - storeCredit : grandTotal) > 0;\n    }\n\n    isPaymentDataSubmitted(paymentMethod?: PaymentMethod): boolean {\n        if (paymentMethod && paymentMethod.nonce) {\n            return true;\n        }\n\n        return this.getPaymentStatus() === ACKNOWLEDGE || this.getPaymentStatus() === FINALIZE;\n    }\n\n    private _getInternalPayment(): InternalOrderPayment | undefined {\n        const meta = this._order.getOrderMeta();\n\n        return meta && meta.payment;\n    }\n\n    private _getGatewayPayment(): GatewayOrderPayment | undefined {\n        const order = this._order.getOrder();\n\n        return find(order && order.payments, ({ providerId }) =>\n            providerId !== 'giftcertificate' && providerId !== 'storecredit'\n        ) as GatewayOrderPayment;\n    }\n\n    private _getHostedPayment(): CheckoutPayment | undefined {\n        const checkout = this._checkout.getCheckout();\n\n        return find(checkout && checkout.payments, ({ providerType }) =>\n            providerType === HOSTED\n        );\n    }\n}\n","import { find } from 'lodash';\n\nimport { selector } from '../common/selector';\n\nimport PaymentMethod from './payment-method';\nimport PaymentMethodMeta from './payment-method-meta';\nimport PaymentMethodState from './payment-method-state';\n\n@selector\nexport default class PaymentMethodSelector {\n    constructor(\n        private _paymentMethods: PaymentMethodState\n    ) {}\n\n    getPaymentMethods(): PaymentMethod[] | undefined {\n        return this._paymentMethods.data;\n    }\n\n    getPaymentMethodsMeta(): PaymentMethodMeta | undefined {\n        return this._paymentMethods.meta;\n    }\n\n    getPaymentMethod(methodId: string, gatewayId?: string): PaymentMethod | undefined {\n        return gatewayId ?\n            find(this._paymentMethods.data, { id: methodId, gateway: gatewayId }) :\n            find(this._paymentMethods.data, { id: methodId });\n    }\n\n    getLoadError(): Error | undefined {\n        return this._paymentMethods.errors && this._paymentMethods.errors.loadError;\n    }\n\n    getLoadMethodError(methodId?: string): Error | undefined {\n        if (methodId && this._paymentMethods.errors.loadMethodId !== methodId) {\n            return;\n        }\n\n        return this._paymentMethods.errors.loadMethodError;\n    }\n\n    isLoading(): boolean {\n        return !!this._paymentMethods.statuses.isLoading;\n    }\n\n    isLoadingMethod(methodId?: string): boolean {\n        if (methodId && this._paymentMethods.statuses.loadMethodId !== methodId) {\n            return false;\n        }\n\n        return !!this._paymentMethods.statuses.isLoadingMethod;\n    }\n}\n","import { selector } from '../common/selector';\n\nimport PaymentStrategyState, { DEFAULT_STATE } from './payment-strategy-state';\n\n@selector\nexport default class PaymentStrategySelector {\n    constructor(\n        private _paymentStrategies: PaymentStrategyState = DEFAULT_STATE\n    ) {}\n\n    getInitializeError(methodId?: string): Error | undefined {\n        if (methodId && this._paymentStrategies.errors.initializeMethodId !== methodId) {\n            return;\n        }\n\n        return this._paymentStrategies.errors.initializeError;\n    }\n\n    getExecuteError(methodId?: string): Error | undefined {\n        if (methodId && this._paymentStrategies.errors.executeMethodId !== methodId) {\n            return;\n        }\n\n        return this._paymentStrategies.errors.executeError;\n    }\n\n    getFinalizeError(methodId?: string): Error | undefined {\n        if (methodId && this._paymentStrategies.errors.finalizeMethodId !== methodId) {\n            return;\n        }\n\n        return this._paymentStrategies.errors.finalizeError;\n    }\n\n    getWidgetInteractingError(methodId?: string): Error | undefined {\n        if (methodId && this._paymentStrategies.errors.widgetInteractionMethodId !== methodId) {\n            return;\n        }\n\n        return this._paymentStrategies.errors.widgetInteractionError;\n    }\n\n    isInitializing(methodId?: string): boolean {\n        if (methodId && this._paymentStrategies.statuses.initializeMethodId !== methodId) {\n            return false;\n        }\n\n        return !!this._paymentStrategies.statuses.isInitializing;\n    }\n\n    isExecuting(methodId?: string): boolean {\n        if (methodId && this._paymentStrategies.statuses.executeMethodId !== methodId) {\n            return false;\n        }\n\n        return !!this._paymentStrategies.statuses.isExecuting;\n    }\n\n    isFinalizing(methodId?: string): boolean {\n        if (methodId && this._paymentStrategies.statuses.finalizeMethodId !== methodId) {\n            return false;\n        }\n\n        return !!this._paymentStrategies.statuses.isFinalizing;\n    }\n\n    isWidgetInteracting(methodId?: string): boolean {\n        if (methodId && this._paymentStrategies.statuses.widgetInteractionMethodId !== methodId) {\n            return false;\n        }\n\n        return !!this._paymentStrategies.statuses.isWidgetInteracting;\n    }\n}\n","import Instrument from './instrument';\nimport InstrumentState, { InstrumentMeta } from './instrument-state';\n\nexport default class InstrumentSelector {\n    constructor(\n        private _instruments: InstrumentState\n    ) {}\n\n    getInstruments(): Instrument[] | undefined {\n        return this._instruments.data;\n    }\n\n    getInstrumentsMeta(): InstrumentMeta | undefined {\n        return this._instruments.meta;\n    }\n\n    getLoadError(): Error | undefined {\n        return this._instruments.errors && this._instruments.errors.loadError;\n    }\n\n    getDeleteError(instrumentId?: string): Error | undefined {\n        if (!this._instruments.errors || (instrumentId && this._instruments.errors.failedInstrument !== instrumentId)) {\n            return;\n        }\n\n        return this._instruments.errors.deleteError;\n    }\n\n    isLoading(): boolean {\n        return !!(this._instruments.statuses && this._instruments.statuses.isLoading);\n    }\n\n    isDeleting(instrumentId?: string): boolean {\n        if (!this._instruments.statuses || (instrumentId && this._instruments.statuses.deletingInstrument !== instrumentId)) {\n            return false;\n        }\n\n        return !!this._instruments.statuses.isDeleting;\n    }\n}\n","import { selector } from '../common/selector';\n\nimport RemoteCheckoutState, { RemoteCheckoutStateData } from './remote-checkout-state';\n\n@selector\nexport default class RemoteCheckoutSelector {\n    constructor(\n        private _remoteCheckout: RemoteCheckoutState\n    ) {}\n\n    getCheckout<TMethodId extends keyof RemoteCheckoutStateData>(\n        methodId: TMethodId\n    ): RemoteCheckoutStateData[TMethodId] | undefined {\n        return this._remoteCheckout.data[methodId];\n    }\n}\n","import { BillingAddressSelector } from '../billing';\nimport { CartSelector } from '../cart';\nimport { CheckoutButtonSelector } from '../checkout-buttons';\nimport { createFreezeProxies } from '../common/utility';\nimport { ConfigSelector } from '../config';\nimport { CouponSelector, GiftCertificateSelector } from '../coupon';\nimport { CustomerSelector, CustomerStrategySelector } from '../customer';\nimport { FormSelector } from '../form';\nimport { CountrySelector } from '../geography';\nimport { OrderSelector } from '../order';\nimport { PaymentSelector } from '../payment';\nimport { PaymentMethodSelector, PaymentStrategySelector } from '../payment';\nimport { InstrumentSelector } from '../payment/instrument';\nimport { RemoteCheckoutSelector } from '../remote-checkout';\nimport { ConsignmentSelector, ShippingAddressSelector, ShippingCountrySelector, ShippingStrategySelector } from '../shipping';\n\nimport CheckoutSelector from './checkout-selector';\nimport { CheckoutStoreOptions } from './checkout-store';\nimport CheckoutStoreState from './checkout-store-state';\nimport InternalCheckoutSelectors from './internal-checkout-selectors';\n\nexport default function createInternalCheckoutSelectors(state: CheckoutStoreState, options: CheckoutStoreOptions = {}): InternalCheckoutSelectors {\n    const billingAddress = new BillingAddressSelector(state.billingAddress);\n    const cart = new CartSelector(state.cart);\n    const checkoutButton = new CheckoutButtonSelector(state.checkoutButton);\n    const config = new ConfigSelector(state.config);\n    const countries = new CountrySelector(state.countries);\n    const coupons = new CouponSelector(state.coupons);\n    const customer = new CustomerSelector(state.customer);\n    const customerStrategies = new CustomerStrategySelector(state.customerStrategies);\n    const form = new FormSelector(state.config);\n    const giftCertificates = new GiftCertificateSelector(state.giftCertificates);\n    const instruments = new InstrumentSelector(state.instruments);\n    const paymentMethods = new PaymentMethodSelector(state.paymentMethods);\n    const paymentStrategies = new PaymentStrategySelector(state.paymentStrategies);\n    const shippingAddress = new ShippingAddressSelector(state.consignments);\n    const remoteCheckout = new RemoteCheckoutSelector(state.remoteCheckout);\n    const shippingCountries = new ShippingCountrySelector(state.shippingCountries);\n    const shippingStrategies = new ShippingStrategySelector(state.shippingStrategies);\n\n    // Compose selectors\n    const consignments = new ConsignmentSelector(state.consignments, cart);\n    const checkout = new CheckoutSelector(state.checkout, billingAddress, cart, consignments, coupons, customer, giftCertificates);\n    const order = new OrderSelector(state.order, billingAddress, coupons);\n    const payment = new PaymentSelector(checkout, order);\n\n    const selectors = {\n        billingAddress,\n        cart,\n        checkout,\n        checkoutButton,\n        config,\n        consignments,\n        countries,\n        coupons,\n        customer,\n        customerStrategies,\n        form,\n        giftCertificates,\n        instruments,\n        order,\n        payment,\n        paymentMethods,\n        paymentStrategies,\n        remoteCheckout,\n        shippingAddress,\n        shippingCountries,\n        shippingStrategies,\n    };\n\n    return options.shouldWarnMutation ? createFreezeProxies(selectors) : selectors;\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { ContentType, RequestOptions } from '../common/http-request';\n\nimport Checkout, { CheckoutRequestBody } from './checkout';\nimport CheckoutDefaultIncludes from './checkout-default-includes';\nimport CheckoutParams from './checkout-params';\n\nexport default class CheckoutRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    loadCheckout(id: string, { params, timeout }: RequestOptions<CheckoutParams> = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkout/${id}`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.get(url, {\n            params: {\n                include: CheckoutDefaultIncludes.concat(params && params.include || []).join(','),\n            },\n            headers,\n            timeout,\n        });\n    }\n\n    updateCheckout(id: string, body: CheckoutRequestBody, { params, timeout }: RequestOptions<CheckoutParams> = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkout/${id}`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.put(url, {\n            params: {\n                include: CheckoutDefaultIncludes.concat(params && params.include || []).join(','),\n            },\n            body,\n            headers,\n            timeout,\n        });\n    }\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { concat } from 'rxjs/observable/concat';\nimport { defer } from 'rxjs/observable/defer';\nimport { merge } from 'rxjs/observable/merge';\nimport { of } from 'rxjs/observable/of';\nimport { catchError } from 'rxjs/operators';\nimport { Observable } from 'rxjs/Observable';\n\nimport { throwErrorAction } from '../common/error';\nimport { MissingDataError, MissingDataErrorType, StandardError } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\nimport { ConfigActionCreator } from '../config';\n\nimport { CheckoutRequestBody } from './checkout';\nimport { CheckoutActionType, LoadCheckoutAction, UpdateCheckoutAction } from './checkout-actions';\nimport CheckoutRequestSender from './checkout-request-sender';\nimport InternalCheckoutSelectors from './internal-checkout-selectors';\n\nexport default class CheckoutActionCreator {\n    constructor(\n        private _checkoutRequestSender: CheckoutRequestSender,\n        private _configActionCreator: ConfigActionCreator\n    ) {}\n\n    loadCheckout(\n        id: string,\n        options?: RequestOptions\n    ): ThunkAction<LoadCheckoutAction, InternalCheckoutSelectors> {\n        return store => concat(\n            of(createAction(CheckoutActionType.LoadCheckoutRequested)),\n            merge(\n                this._configActionCreator.loadConfig()(store),\n                defer(() => this._checkoutRequestSender.loadCheckout(id, options)\n                    .then(({ body }) => createAction(CheckoutActionType.LoadCheckoutSucceeded, body)))\n            )\n        ).pipe(\n            catchError(error => throwErrorAction(CheckoutActionType.LoadCheckoutFailed, error))\n        );\n    }\n\n    loadDefaultCheckout(options?: RequestOptions): ThunkAction<LoadCheckoutAction, InternalCheckoutSelectors> {\n        return store => concat(\n            of(createAction(CheckoutActionType.LoadCheckoutRequested)),\n            this._configActionCreator.loadConfig()(store),\n            defer(() => {\n                const state = store.getState();\n                const context = state.config.getContextConfig();\n\n                if (!context || !context.checkoutId) {\n                    throw new StandardError('Unable to load checkout: no cart is available');\n                }\n\n                return this._checkoutRequestSender.loadCheckout(context.checkoutId, options)\n                    .then(({ body }) => createAction(CheckoutActionType.LoadCheckoutSucceeded, body));\n            })\n        ).pipe(\n            catchError(error => throwErrorAction(CheckoutActionType.LoadCheckoutFailed, error))\n        );\n    }\n\n    updateCheckout(\n        body: CheckoutRequestBody,\n        options?: RequestOptions\n    ): ThunkAction<UpdateCheckoutAction, InternalCheckoutSelectors> {\n        return store => new Observable(observer => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(CheckoutActionType.UpdateCheckoutRequested));\n\n            this._checkoutRequestSender.updateCheckout(checkout.id, body, options)\n                .then(({ body }) => {\n                    observer.next(createAction(CheckoutActionType.UpdateCheckoutSucceeded, body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(CheckoutActionType.UpdateCheckoutFailed, response));\n                });\n        });\n    }\n\n    loadCurrentCheckout(options?: RequestOptions): ThunkAction<LoadCheckoutAction, InternalCheckoutSelectors> {\n        return store => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            return this.loadCheckout(checkout.id, options)(store);\n        };\n    }\n}\n","import InternalShippingOption from './internal-shipping-option';\nimport ShippingOption from './shipping-option';\n\nexport default function mapToInternalShippingOption(option: ShippingOption, isSelected: boolean): InternalShippingOption {\n    return {\n        description: option.description,\n        module: option.type,\n        price: option.cost,\n        id: option.id,\n        selected: isSelected,\n        isRecommended: option.isRecommended,\n        imageUrl: option.imageUrl,\n        transitTime: option.transitTime,\n    };\n}\n","import EmbeddedCheckoutStyles from '../embedded-checkout-styles';\n\nexport enum EmbeddedContentEventType {\n    StyleConfigured = 'STYLE_CONFIGURED',\n}\n\nexport interface EmbeddedContentEventMap {\n    [EmbeddedContentEventType.StyleConfigured]: EmbeddedContentStyleConfiguredEvent;\n}\n\nexport type EmbeddedContentEvent = (\n    EmbeddedContentStyleConfiguredEvent\n);\n\nexport interface EmbeddedContentStyleConfiguredEvent {\n    type: EmbeddedContentEventType.StyleConfigured;\n    payload: EmbeddedCheckoutStyles;\n}\n","import { bindDecorator as bind } from '../common/utility';\n\nimport { IframeEventMap } from './iframe-event';\nimport isIframeEvent from './is-iframe-event';\n\nexport default class IframeEventListener<TEventMap extends IframeEventMap<keyof TEventMap>> {\n    private _isListening: boolean;\n    private _listeners: EventListeners<TEventMap>;\n\n    constructor(\n        private _origin: string\n    ) {\n        this._isListening = false;\n        this._listeners = {};\n    }\n\n    listen(): void {\n        if (this._isListening) {\n            return;\n        }\n\n        this._isListening = true;\n\n        window.addEventListener('message', this._handleMessage);\n    }\n\n    stopListen(): void {\n        if (!this._isListening) {\n            return;\n        }\n\n        this._isListening = false;\n\n        window.removeEventListener('message', this._handleMessage);\n    }\n\n    addListener<TType extends keyof TEventMap>(type: TType, listener: (event: TEventMap[TType]) => void): void {\n        let listeners = this._listeners[type];\n\n        if (!listeners) {\n            this._listeners[type] = listeners = [];\n        }\n\n        listeners.push(listener);\n    }\n\n    removeListener<TType extends keyof TEventMap>(type: TType, listener: (event: TEventMap[TType]) => void): void {\n        const listeners = this._listeners[type];\n\n        if (!listeners) {\n            return;\n        }\n\n        const index = listeners.indexOf(listener);\n\n        if (index >= 0) {\n            listeners.splice(index, 1);\n        }\n    }\n\n    trigger<TType extends keyof TEventMap>(event: TEventMap[TType]): void {\n        const listeners = this._listeners[event.type];\n\n        if (!listeners) {\n            return;\n        }\n\n        listeners.forEach(listener => listener(event));\n    }\n\n    @bind\n    private _handleMessage(event: MessageEvent): void {\n        if ((event.origin !== this._origin) || !isIframeEvent(event.data, event.data.type)) {\n            return;\n        }\n\n        this.trigger(event.data);\n    }\n}\n\ntype EventListeners<TEventMap> = {\n    [key in keyof TEventMap]?: Array<(event: TEventMap[keyof TEventMap]) => void>;\n};\n","export default class IframeEventPoster<TEvent> {\n    constructor(\n        private _targetOrigin: string,\n        private _targetWindow?: Window\n    ) {}\n\n    post(event: TEvent): void {\n        if (window === this._targetWindow) {\n            return;\n        }\n\n        if (!this._targetWindow) {\n            throw new Error('Unable to post message becauset target window is not set.');\n        }\n\n        this._targetWindow.postMessage(event, this._targetOrigin);\n    }\n\n    setTarget(window: Window) {\n        this._targetWindow = window;\n    }\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport RequestError from './request-error';\n\nexport default class UnrecoverableError extends RequestError {\n    constructor(response: Response, message?: string) {\n        super(response, message || 'An unexpected error has occurred. The checkout process cannot continue as a result.');\n\n        this.type = 'unrecoverable';\n    }\n}\n","import { Response } from '@bigcommerce/request-sender';\nimport { last } from 'lodash';\n\nimport ErrorResponseBody from './error-response-body';\nimport { RequestError, TimeoutError } from './errors';\n\nexport default class RequestErrorFactory {\n    private _factoryMethods: { [key: string]: ErrorFactoryMethod } = {};\n\n    constructor() {\n        this.register('default', (response, message) => new RequestError(response, message));\n        this.register('timeout', response => new TimeoutError(response));\n    }\n\n    register(type: string, factoryMethod: ErrorFactoryMethod): void {\n        this._factoryMethods[type] = factoryMethod;\n    }\n\n    createError(response: Response, message?: string): Error {\n        const factoryMethod = this._factoryMethods[this._getType(response)] || this._factoryMethods.default;\n\n        return factoryMethod(response, message);\n    }\n\n    private _getType(response: Response<ErrorResponseBody>): string {\n        if (response.status === 0) {\n            return 'timeout';\n        }\n\n        if (response.body && typeof response.body.type === 'string') {\n            return last(response.body.type.split('/')) || 'default';\n        }\n\n        const error = last(response.body && response.body.errors);\n\n        return error && error.code ? error.code : 'default';\n    }\n}\n\nexport type ErrorFactoryMethod = (response: Response, message?: string) => Error;\n","import { combineReducers } from '@bigcommerce/data-store';\n\nimport { CheckoutAction, CheckoutActionType } from '../checkout';\nimport { OrderAction, OrderActionType } from '../order';\n\nimport BillingAddress from './billing-address';\nimport { BillingAddressAction, BillingAddressActionType } from './billing-address-actions';\nimport BillingAddressState, { BillingAddressErrorsState, BillingAddressStatusesState } from './billing-address-state';\n\nconst DEFAULT_STATE: BillingAddressState = {\n    errors: {},\n    statuses: {},\n};\n\nexport default function billingAddressReducer(\n    state: BillingAddressState = DEFAULT_STATE,\n    action: CheckoutAction | BillingAddressAction | OrderAction\n): BillingAddressState {\n    const reducer = combineReducers<BillingAddressState, CheckoutAction | BillingAddressAction | OrderAction>({\n        data: dataReducer,\n        errors: errorsReducer,\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: BillingAddress | undefined,\n    action: CheckoutAction | BillingAddressAction | OrderAction\n): BillingAddress | undefined {\n    switch (action.type) {\n    case BillingAddressActionType.UpdateBillingAddressSucceeded:\n    case BillingAddressActionType.ContinueAsGuestSucceeded:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case OrderActionType.LoadOrderSucceeded:\n        return action.payload ? action.payload.billingAddress : data;\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: BillingAddressErrorsState = DEFAULT_STATE.errors,\n    action: CheckoutAction | BillingAddressAction | OrderAction\n): BillingAddressErrorsState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n        return { ...errors, loadError: undefined };\n\n    case CheckoutActionType.LoadCheckoutFailed:\n        return { ...errors, loadError: action.payload };\n\n    case BillingAddressActionType.UpdateBillingAddressRequested:\n    case BillingAddressActionType.UpdateBillingAddressSucceeded:\n        return { ...errors, updateError: undefined };\n\n    case BillingAddressActionType.UpdateBillingAddressFailed:\n        return { ...errors, updateError: action.payload };\n\n    case BillingAddressActionType.ContinueAsGuestRequested:\n    case BillingAddressActionType.ContinueAsGuestSucceeded:\n        return { ...errors, continueAsGuestError: undefined };\n\n    case BillingAddressActionType.ContinueAsGuestFailed:\n        return { ...errors, continueAsGuestError: action.payload };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: BillingAddressStatusesState = DEFAULT_STATE.statuses,\n    action: CheckoutAction | BillingAddressAction | OrderAction\n): BillingAddressStatusesState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n        return { ...statuses, isLoading: true };\n\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case CheckoutActionType.LoadCheckoutFailed:\n        return { ...statuses, isLoading: false };\n\n    case BillingAddressActionType.UpdateBillingAddressRequested:\n        return { ...statuses, isUpdating: true };\n\n    case BillingAddressActionType.UpdateBillingAddressFailed:\n    case BillingAddressActionType.UpdateBillingAddressSucceeded:\n        return { ...statuses, isUpdating: false };\n\n    case BillingAddressActionType.ContinueAsGuestRequested:\n        return { ...statuses, isContinuingAsGuest: true };\n\n    case BillingAddressActionType.ContinueAsGuestFailed:\n    case BillingAddressActionType.ContinueAsGuestSucceeded:\n        return { ...statuses, isContinuingAsGuest: false };\n\n    default:\n        return statuses;\n    }\n}\n","import { combineReducers } from '@bigcommerce/data-store';\n\nimport Config from './config';\nimport { ConfigActionType, LoadConfigAction } from './config-actions';\nimport ConfigState, { ConfigErrorsState, ConfigStatusesState } from './config-state';\n\nconst DEFAULT_STATE: ConfigState = {\n    meta: {},\n    errors: {},\n    statuses: {},\n};\n\nexport default function configReducer(\n    state: ConfigState = DEFAULT_STATE,\n    action: LoadConfigAction\n): ConfigState {\n    const reducer = combineReducers<ConfigState, LoadConfigAction>({\n        data: dataReducer,\n        errors: errorsReducer,\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Config | undefined,\n    action: LoadConfigAction\n): Config | undefined {\n    switch (action.type) {\n    case ConfigActionType.LoadConfigSucceeded:\n        return action.payload ? action.payload : data;\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: ConfigErrorsState = DEFAULT_STATE.errors,\n    action: LoadConfigAction\n): ConfigErrorsState {\n    switch (action.type) {\n    case ConfigActionType.LoadConfigSucceeded:\n        return { ...errors, loadError: undefined };\n\n    case ConfigActionType.LoadConfigFailed:\n        return { ...errors, loadError: action.payload };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: ConfigStatusesState = DEFAULT_STATE.statuses,\n    action: LoadConfigAction\n): ConfigStatusesState {\n    switch (action.type) {\n    case ConfigActionType.LoadConfigRequested:\n        return { ...statuses, isLoading: true };\n\n    case ConfigActionType.LoadConfigSucceeded:\n    case ConfigActionType.LoadConfigFailed:\n        return { ...statuses, isLoading: false };\n\n    default:\n        return statuses;\n    }\n}\n","import { combineReducers, Action } from '@bigcommerce/data-store';\n\nimport Country from './country';\nimport * as actionTypes from './country-action-types';\nimport CountryState, { CountryErrorsState, CountryStatusesState } from './country-state';\n\nconst DEFAULT_STATE: CountryState = {\n    errors: {},\n    statuses: {},\n};\n\n/**\n * @todo Convert this file into TypeScript properly\n * i.e.: Action\n */\nexport default function countryReducer(state: CountryState = DEFAULT_STATE, action: Action): CountryState {\n    const reducer = combineReducers<CountryState>({\n        data: dataReducer,\n        errors: errorsReducer,\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(data: Country[] | undefined, action: Action): Country[] | undefined {\n    switch (action.type) {\n    case actionTypes.LOAD_COUNTRIES_SUCCEEDED:\n        return action.payload || [];\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(errors: CountryErrorsState = DEFAULT_STATE.errors, action: Action): CountryErrorsState {\n    switch (action.type) {\n    case actionTypes.LOAD_COUNTRIES_REQUESTED:\n    case actionTypes.LOAD_COUNTRIES_SUCCEEDED:\n        return { ...errors, loadError: undefined };\n\n    case actionTypes.LOAD_COUNTRIES_FAILED:\n        return { ...errors, loadError: action.payload };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(statuses: CountryStatusesState = DEFAULT_STATE.statuses, action: Action): CountryStatusesState {\n    switch (action.type) {\n    case actionTypes.LOAD_COUNTRIES_REQUESTED:\n        return { ...statuses, isLoading: true };\n\n    case actionTypes.LOAD_COUNTRIES_SUCCEEDED:\n    case actionTypes.LOAD_COUNTRIES_FAILED:\n        return { ...statuses, isLoading: false };\n\n    default:\n        return statuses;\n    }\n}\n","import { combineReducers } from '@bigcommerce/data-store';\n\nimport { PaymentAction, PaymentActionType } from './payment-actions';\nimport PaymentResponseBody from './payment-response-body';\nimport PaymentState from './payment-state';\n\nexport default function paymentReducer(state: PaymentState = {}, action: PaymentAction): PaymentState {\n    const reducer = combineReducers<PaymentState, PaymentAction>({\n        data: dataReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(data: PaymentResponseBody | undefined, action: PaymentAction): PaymentResponseBody | undefined {\n    switch (action.type) {\n    case PaymentActionType.SubmitPaymentSucceeded:\n        return action.payload;\n\n    default:\n        return data;\n    }\n}\n","import { combineReducers, Action } from '@bigcommerce/data-store';\n\nimport { mergeOrPush } from '../common/utility';\n\nimport PaymentMethod from './payment-method';\nimport { PaymentMethodAction, PaymentMethodActionType } from './payment-method-actions';\nimport PaymentMethodMeta from './payment-method-meta';\nimport PaymentMethodState, { PaymentMethodErrorsState, PaymentMethodStatusesState } from './payment-method-state';\n\nconst DEFAULT_STATE: PaymentMethodState = {\n    errors: {},\n    statuses: {},\n};\n\nexport default function paymentMethodReducer(\n    state: PaymentMethodState = DEFAULT_STATE,\n    action: Action\n): PaymentMethodState {\n    const reducer = combineReducers<PaymentMethodState>({\n        data: dataReducer,\n        errors: errorsReducer,\n        meta: metaReducer,\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: PaymentMethod[] | undefined,\n    action: PaymentMethodAction\n): PaymentMethod[] | undefined {\n    switch (action.type) {\n    case PaymentMethodActionType.LoadPaymentMethodSucceeded:\n        return action.payload ?\n            mergeOrPush(data || [], action.payload, {\n                id: action.payload.id,\n                gateway: action.payload.gateway,\n            }) :\n            data;\n\n    case PaymentMethodActionType.LoadPaymentMethodsSucceeded:\n        return action.payload ? action.payload : [];\n\n    default:\n        return data;\n    }\n}\n\nfunction metaReducer(\n    meta: PaymentMethodMeta | undefined,\n    action: PaymentMethodAction\n): PaymentMethodMeta | undefined {\n    switch (action.type) {\n    case PaymentMethodActionType.LoadPaymentMethodsSucceeded:\n        return action.meta ? { ...meta, ...action.meta } : meta;\n\n    default:\n        return meta;\n    }\n}\n\nfunction errorsReducer(\n    errors: PaymentMethodErrorsState = DEFAULT_STATE.errors,\n    action: PaymentMethodAction\n): PaymentMethodErrorsState {\n    switch (action.type) {\n    case PaymentMethodActionType.LoadPaymentMethodsRequested:\n    case PaymentMethodActionType.LoadPaymentMethodsSucceeded:\n        return { ...errors, loadError: undefined };\n\n    case PaymentMethodActionType.LoadPaymentMethodsFailed:\n        return { ...errors, loadError: action.payload };\n\n    case PaymentMethodActionType.LoadPaymentMethodRequested:\n    case PaymentMethodActionType.LoadPaymentMethodSucceeded:\n        return {\n            ...errors,\n            loadMethodId: undefined,\n            loadMethodError: undefined,\n        };\n\n    case PaymentMethodActionType.LoadPaymentMethodFailed:\n        return {\n            ...errors,\n            loadMethodId: action.meta.methodId,\n            loadMethodError: action.payload,\n        };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: PaymentMethodStatusesState = DEFAULT_STATE.statuses,\n    action: PaymentMethodAction\n): PaymentMethodStatusesState {\n    switch (action.type) {\n    case PaymentMethodActionType.LoadPaymentMethodsRequested:\n        return { ...statuses, isLoading: true };\n\n    case PaymentMethodActionType.LoadPaymentMethodsSucceeded:\n    case PaymentMethodActionType.LoadPaymentMethodsFailed:\n        return { ...statuses, isLoading: false };\n\n    case PaymentMethodActionType.LoadPaymentMethodRequested:\n        return {\n            ...statuses,\n            isLoadingMethod: true,\n            loadMethodId: action.meta.methodId,\n        };\n\n    case PaymentMethodActionType.LoadPaymentMethodSucceeded:\n    case PaymentMethodActionType.LoadPaymentMethodFailed:\n        return {\n            ...statuses,\n            isLoadingMethod: false,\n            loadMethodId: undefined,\n        };\n\n    default:\n        return statuses;\n    }\n}\n","import { assign, findIndex, isPlainObject, pickBy } from 'lodash';\n\nimport { PartialDeep } from '../types';\n\n/**\n * Push an item to an array if it doesn't exist in the array. Otherwise, merge\n * with the existing item in the array. This function always returns a new array.\n */\nexport default function mergeOrPush<T extends object>(\n    array: T[],\n    item: T,\n    predicate: ((item: T) => boolean) | PartialDeep<T>\n): T[] {\n    const index = findIndex(array, typeof predicate === 'object' ? pickBy(predicate) : predicate);\n    const newArray = [...array];\n\n    if (index === -1) {\n        newArray.push(item);\n    } else {\n        newArray[index] = isPlainObject(item) ? assign({}, array[index], item) : item;\n    }\n\n    return newArray;\n}\n","import { combineReducers } from '@bigcommerce/data-store';\n\nimport { PaymentStrategyAction, PaymentStrategyActionType } from './payment-strategy-actions';\nimport PaymentStrategyState, { DEFAULT_STATE, PaymentStrategyErrorsState, PaymentStrategyStatusesState } from './payment-strategy-state';\n\nexport default function paymentStrategyReducer(\n    state: PaymentStrategyState = DEFAULT_STATE,\n    action: PaymentStrategyAction\n): PaymentStrategyState {\n    const reducer = combineReducers<PaymentStrategyState, PaymentStrategyAction>({\n        errors: errorsReducer,\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction errorsReducer(\n    errors: PaymentStrategyErrorsState = DEFAULT_STATE.errors,\n    action: PaymentStrategyAction\n): PaymentStrategyErrorsState {\n    switch (action.type) {\n    case PaymentStrategyActionType.InitializeRequested:\n    case PaymentStrategyActionType.InitializeSucceeded:\n        return {\n            ...errors,\n            initializeError: undefined,\n            initializeMethodId: undefined,\n        };\n\n    case PaymentStrategyActionType.InitializeFailed:\n        return {\n            ...errors,\n            initializeError: action.payload,\n            initializeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case PaymentStrategyActionType.DeinitializeRequested:\n    case PaymentStrategyActionType.DeinitializeSucceeded:\n        return {\n            ...errors,\n            deinitializeError: undefined,\n            deinitializeMethodId: undefined,\n        };\n\n    case PaymentStrategyActionType.DeinitializeFailed:\n        return {\n            ...errors,\n            deinitializeError: action.payload,\n            deinitializeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case PaymentStrategyActionType.ExecuteRequested:\n    case PaymentStrategyActionType.ExecuteSucceeded:\n        return {\n            ...errors,\n            executeError: undefined,\n            executeMethodId: undefined,\n        };\n\n    case PaymentStrategyActionType.ExecuteFailed:\n        return {\n            ...errors,\n            executeError: action.payload,\n            executeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case PaymentStrategyActionType.FinalizeRequested:\n    case PaymentStrategyActionType.FinalizeSucceeded:\n        return {\n            ...errors,\n            finalizeError: undefined,\n            finalizeMethodId: undefined,\n        };\n\n    case PaymentStrategyActionType.FinalizeFailed:\n        return {\n            ...errors,\n            finalizeError: action.payload,\n            finalizeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case PaymentStrategyActionType.WidgetInteractionStarted:\n    case PaymentStrategyActionType.WidgetInteractionFinished:\n        return {\n            ...errors,\n            widgetInteractionError: undefined,\n            widgetInteractionMethodId: undefined,\n        };\n\n    case PaymentStrategyActionType.WidgetInteractionFailed:\n        return {\n            ...errors,\n            widgetInteractionError: action.payload,\n            widgetInteractionMethodId: action.meta.methodId,\n        };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: PaymentStrategyStatusesState = DEFAULT_STATE.statuses,\n    action: PaymentStrategyAction\n): PaymentStrategyStatusesState {\n    switch (action.type) {\n    case PaymentStrategyActionType.InitializeRequested:\n        return {\n            ...statuses,\n            isInitializing: true,\n            initializeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case PaymentStrategyActionType.InitializeFailed:\n    case PaymentStrategyActionType.InitializeSucceeded:\n        return {\n            ...statuses,\n            isInitializing: false,\n            initializeMethodId: undefined,\n        };\n\n    case PaymentStrategyActionType.DeinitializeRequested:\n        return {\n            ...statuses,\n            isDeinitializing: true,\n            deinitializeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case PaymentStrategyActionType.DeinitializeFailed:\n    case PaymentStrategyActionType.DeinitializeSucceeded:\n        return {\n            ...statuses,\n            isDeinitializing: false,\n            deinitializeMethodId: undefined,\n        };\n\n    case PaymentStrategyActionType.ExecuteRequested:\n        return {\n            ...statuses,\n            isExecuting: true,\n            executeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case PaymentStrategyActionType.ExecuteFailed:\n    case PaymentStrategyActionType.ExecuteSucceeded:\n        return {\n            ...statuses,\n            isExecuting: false,\n            executeMethodId: undefined,\n        };\n\n    case PaymentStrategyActionType.FinalizeRequested:\n        return {\n            ...statuses,\n            isFinalizing: true,\n            finalizeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case PaymentStrategyActionType.FinalizeFailed:\n    case PaymentStrategyActionType.FinalizeSucceeded:\n        return {\n            ...statuses,\n            isFinalizing: false,\n            finalizeMethodId: undefined,\n        };\n\n    case PaymentStrategyActionType.WidgetInteractionStarted:\n    return {\n        ...statuses,\n        isWidgetInteracting: true,\n        widgetInteractionMethodId: action.meta.methodId,\n     };\n\n    case PaymentStrategyActionType.WidgetInteractionFinished:\n    case PaymentStrategyActionType.WidgetInteractionFailed:\n     return {\n        ...statuses,\n        isWidgetInteracting: false,\n        widgetInteractionMethodId: undefined,\n     };\n\n    default:\n        return statuses;\n    }\n}\n","import { combineReducers, Action } from '@bigcommerce/data-store';\n\nimport * as actionTypes from './instrument-action-types';\n\nimport Instrument from './instrument';\nimport InstrumentState, { InstrumentErrorState, InstrumentMeta, InstrumentStatusState } from './instrument-state';\n\nconst DEFAULT_STATE = {\n    data: [],\n    errors: {},\n    statuses: {},\n};\n\nexport default function instrumentReducer(state: InstrumentState = DEFAULT_STATE, action: Action): InstrumentState {\n    const reducer = combineReducers<InstrumentState>({\n        data: dataReducer,\n        errors: errorsReducer,\n        meta: metaReducer,\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(data: Instrument[] = DEFAULT_STATE.data, action: Action): Instrument[] {\n    switch (action.type) {\n    case actionTypes.LOAD_INSTRUMENTS_SUCCEEDED:\n        return action.payload.vaultedInstruments || [];\n\n    case actionTypes.DELETE_INSTRUMENT_SUCCEEDED:\n        return data.filter(instrument =>\n            instrument.bigpayToken !== action.meta.instrumentId\n        );\n\n    default:\n        return data;\n    }\n}\n\nfunction metaReducer(meta: InstrumentMeta | undefined, action: Action): InstrumentMeta | undefined {\n    switch (action.type) {\n    case actionTypes.LOAD_INSTRUMENTS_SUCCEEDED:\n    case actionTypes.DELETE_INSTRUMENT_SUCCEEDED:\n        return { ...meta, ...action.meta };\n\n    default:\n        return meta;\n    }\n}\n\nfunction errorsReducer(errors: InstrumentErrorState = DEFAULT_STATE.errors, action: Action): InstrumentErrorState {\n    switch (action.type) {\n    case actionTypes.LOAD_INSTRUMENTS_REQUESTED:\n    case actionTypes.LOAD_INSTRUMENTS_SUCCEEDED:\n        return { ...errors, loadError: undefined };\n\n    case actionTypes.DELETE_INSTRUMENT_REQUESTED:\n    case actionTypes.DELETE_INSTRUMENT_SUCCEEDED:\n        return {\n            ...errors,\n            deleteError: undefined,\n            failedInstrument: undefined,\n        };\n\n    case actionTypes.LOAD_INSTRUMENTS_FAILED:\n        return { ...errors, loadError: action.payload };\n\n    case actionTypes.DELETE_INSTRUMENT_FAILED:\n        return {\n            ...errors,\n            deleteError: action.payload,\n            failedInstrument: action.meta.instrumentId,\n        };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(statuses: InstrumentStatusState = DEFAULT_STATE.statuses, action: Action): InstrumentStatusState {\n    switch (action.type) {\n    case actionTypes.LOAD_INSTRUMENTS_REQUESTED:\n        return { ...statuses, isLoading: true };\n\n    case actionTypes.DELETE_INSTRUMENT_REQUESTED:\n        return {\n            ...statuses,\n            isDeleting: true,\n            deletingInstrument: action.meta.instrumentId,\n        };\n\n    case actionTypes.LOAD_INSTRUMENTS_SUCCEEDED:\n    case actionTypes.LOAD_INSTRUMENTS_FAILED:\n        return { ...statuses, isLoading: false };\n\n    case actionTypes.DELETE_INSTRUMENT_SUCCEEDED:\n    case actionTypes.DELETE_INSTRUMENT_FAILED:\n        return {\n            ...statuses,\n            isDeleting: false,\n            deletingInstrument: undefined,\n        };\n\n    default:\n        return statuses;\n    }\n}\n","import { combineReducers, Action } from '@bigcommerce/data-store';\n\nimport { AfterpayRemoteCheckout, AmazonPayRemoteCheckout } from './methods';\n\nimport * as actionTypes from './remote-checkout-action-types';\nimport RemoteCheckoutState, { RemoteCheckoutStateData } from './remote-checkout-state';\n\nconst DEFAULT_STATE: RemoteCheckoutState = {\n    data: {},\n};\n\ntype RemoteCheckout = AfterpayRemoteCheckout | AmazonPayRemoteCheckout;\n\nexport default function remoteCheckoutReducer(\n    state: RemoteCheckoutState = DEFAULT_STATE,\n    action: Action\n): RemoteCheckoutState {\n    if (!action.meta || !action.meta.methodId) {\n        return state;\n    }\n\n    const reducer = combineReducers<RemoteCheckoutState>({\n        data: combineReducers<RemoteCheckoutStateData>({\n            [action.meta.methodId]: dataReducer,\n        }),\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: RemoteCheckout = {},\n    action: Action\n): RemoteCheckout {\n    switch (action.type) {\n    case actionTypes.INITIALIZE_REMOTE_BILLING_SUCCEEDED:\n        return { ...data, billing: action.payload.billing };\n\n    case actionTypes.INITIALIZE_REMOTE_SHIPPING_SUCCEEDED:\n        return { ...data, shipping: action.payload.shipping };\n\n    case actionTypes.LOAD_REMOTE_SETTINGS_SUCCEEDED:\n        return { ...data, settings: action.payload };\n\n    case actionTypes.UPDATE_REMOTE_CHECKOUT:\n        return { ...data, ...action.payload };\n\n    default:\n        return data;\n    }\n}\n","import { createDataStore } from '@bigcommerce/data-store';\n\nimport { createRequestErrorFactory } from '../common/error';\n\nimport CheckoutStore, { CheckoutStoreOptions } from './checkout-store';\nimport CheckoutStoreState from './checkout-store-state';\nimport createActionTransformer from './create-action-transformer';\nimport createCheckoutStoreReducer from './create-checkout-store-reducer';\nimport createInternalCheckoutSelectors from './create-internal-checkout-selectors';\n\nexport default function createCheckoutStore(\n    initialState: Partial<CheckoutStoreState> = {},\n    options?: CheckoutStoreOptions\n): CheckoutStore {\n    const actionTransformer = createActionTransformer(createRequestErrorFactory());\n    const stateTransformer = (state: CheckoutStoreState) => createInternalCheckoutSelectors(state);\n\n    return createDataStore(\n        createCheckoutStoreReducer(),\n        initialState,\n        { actionTransformer, stateTransformer, ...options }\n    );\n}\n","import { PaymentMethodInvalidError } from '../../payment/errors';\n\nimport { UnrecoverableError } from './errors';\nimport RequestErrorFactory from './request-error-factory';\n\nexport default function createRequestErrorFactory(): RequestErrorFactory {\n    const factory = new RequestErrorFactory();\n\n    const unrecoverableErrorTypes = [\n        'catalog_only',\n        'empty_cart',\n        'invalid_order_id',\n        'invalid_order_token',\n        'missing_order_token',\n        'missing_provider_token',\n        'missing_shipping_method',\n        'order_completion_error',\n        'order_could_not_be_finalized_error',\n        'order_create_failed',\n        'provider_fatal_error',\n        'provider_setup_error',\n        'stock_too_low',\n    ];\n\n    unrecoverableErrorTypes.forEach(type => {\n        factory.register(type, (response, message) => new UnrecoverableError(response, message));\n    });\n\n    factory.register('invalid_payment_provider', response => new PaymentMethodInvalidError(response));\n    factory.register('payment_config_not_found', response => new PaymentMethodInvalidError(response));\n\n    return factory;\n}\n","import { combineReducers, Action, Reducer } from '@bigcommerce/data-store';\n\nimport { billingAddressReducer } from '../billing';\nimport { cartReducer } from '../cart';\nimport { checkoutButtonReducer } from '../checkout-buttons';\nimport { configReducer } from '../config';\nimport { couponReducer, giftCertificateReducer } from '../coupon';\nimport { customerReducer, customerStrategyReducer } from '../customer';\nimport { countryReducer } from '../geography';\nimport { orderReducer } from '../order';\nimport { paymentMethodReducer, paymentReducer, paymentStrategyReducer } from '../payment';\nimport { instrumentReducer } from '../payment/instrument';\nimport { remoteCheckoutReducer } from '../remote-checkout';\nimport { consignmentReducer, shippingCountryReducer, shippingStrategyReducer } from '../shipping';\n\nimport checkoutReducer from './checkout-reducer';\nimport CheckoutStoreState from './checkout-store-state';\n\nexport default function createCheckoutStoreReducer(): Reducer<CheckoutStoreState, Action> {\n    return combineReducers({\n        billingAddress: billingAddressReducer,\n        cart: cartReducer,\n        checkout: checkoutReducer,\n        checkoutButton: checkoutButtonReducer,\n        config: configReducer,\n        consignments: consignmentReducer,\n        countries: countryReducer,\n        coupons: couponReducer,\n        customer: customerReducer,\n        customerStrategies: customerStrategyReducer,\n        giftCertificates: giftCertificateReducer,\n        instruments: instrumentReducer,\n        order: orderReducer,\n        payment: paymentReducer,\n        paymentMethods: paymentMethodReducer,\n        paymentStrategies: paymentStrategyReducer,\n        remoteCheckout: remoteCheckoutReducer,\n        shippingCountries: shippingCountryReducer,\n        shippingStrategies: shippingStrategyReducer,\n    });\n}\n","import { IFrameComponent } from 'iframe-resizer';\n\nimport { EmbeddedCheckoutEventMap, EmbeddedCheckoutEventType } from './embedded-checkout-events';\nimport EmbeddedCheckoutOptions from './embedded-checkout-options';\nimport { EmbeddedContentEvent, EmbeddedContentEventType } from './iframe-content/embedded-content-events';\nimport IframeEventListener from './iframe-event-listener';\nimport IframeEventPoster from './iframe-event-poster';\nimport LoadingIndicator from './loading-indicator';\nimport ResizableIframeCreator from './resizable-iframe-creator';\n\nexport default class EmbeddedCheckout {\n    private _iframe?: IFrameComponent;\n    private _isAttached: boolean;\n\n    /**\n     * @internal\n     */\n    constructor(\n        private _iframeCreator: ResizableIframeCreator,\n        private _messageListener: IframeEventListener<EmbeddedCheckoutEventMap>,\n        private _messagePoster: IframeEventPoster<EmbeddedContentEvent>,\n        private _loadingIndicator: LoadingIndicator,\n        private _options: EmbeddedCheckoutOptions\n    ) {\n        this._isAttached = false;\n\n        if (this._options.onComplete) {\n            this._messageListener.addListener(EmbeddedCheckoutEventType.CheckoutComplete, this._options.onComplete);\n        }\n\n        if (this._options.onError) {\n            this._messageListener.addListener(EmbeddedCheckoutEventType.CheckoutError, this._options.onError);\n        }\n\n        if (this._options.onLoad) {\n            this._messageListener.addListener(EmbeddedCheckoutEventType.CheckoutLoaded, this._options.onLoad);\n        }\n\n        if (this._options.onFrameLoad) {\n            this._messageListener.addListener(EmbeddedCheckoutEventType.FrameLoaded, this._options.onFrameLoad);\n        }\n\n        this._messageListener.addListener(EmbeddedCheckoutEventType.FrameLoaded, () => this._configureStyles());\n    }\n\n    attach(): Promise<this> {\n        if (this._isAttached) {\n            return Promise.resolve(this);\n        }\n\n        this._isAttached = true;\n        this._messageListener.listen();\n        this._loadingIndicator.show(this._options.containerId);\n\n        return this._iframeCreator.createFrame(this._options.url, this._options.containerId)\n            .then(iframe => {\n                this._iframe = iframe;\n\n                this._configureStyles();\n                this._loadingIndicator.hide();\n\n                return this;\n            })\n            .catch(error => {\n                this._isAttached = false;\n\n                this._messageListener.trigger({\n                    type: EmbeddedCheckoutEventType.FrameError,\n                    payload: error,\n                });\n\n                this._loadingIndicator.hide();\n\n                throw error;\n            });\n    }\n\n    detach(): void {\n        if (!this._isAttached) {\n            return;\n        }\n\n        this._isAttached = false;\n        this._messageListener.stopListen();\n\n        if (this._iframe && this._iframe.parentNode) {\n            this._iframe.parentNode.removeChild(this._iframe);\n            this._iframe.iFrameResizer.close();\n        }\n    }\n\n    private _configureStyles(): void {\n        if (!this._iframe || !this._iframe.contentWindow || !this._options.styles) {\n            return;\n        }\n\n        this._messagePoster.setTarget(this._iframe.contentWindow);\n\n        this._messagePoster.post({\n            type: EmbeddedContentEventType.StyleConfigured,\n            payload: this._options.styles,\n        });\n    }\n}\n","import { LoadingIndicatorStyles } from './embedded-checkout-styles';\n\nconst DEFAULT_STYLES: LoadingIndicatorStyles = {\n    size: 70,\n    color: '#d9d9d9',\n    backgroundColor: '#ffffff',\n};\n\nconst ROTATION_ANIMATION = 'embedded-checkout-loading-indicator-rotation';\n\nexport default class LoadingIndicator {\n    private _container: HTMLElement;\n    private _indicator: HTMLElement;\n    private _styles: LoadingIndicatorStyles;\n\n    constructor(\n        options?: { styles?: LoadingIndicatorStyles }\n    ) {\n        this._styles = { ...DEFAULT_STYLES, ...options && options.styles };\n\n        this._defineAnimation();\n\n        this._container = this._buildContainer();\n        this._indicator = this._buildIndicator();\n\n        this._container.appendChild(this._indicator);\n    }\n\n    show(parentId?: string): void {\n        if (parentId) {\n            const parent = document.getElementById(parentId);\n\n            if (!parent) {\n                throw new Error('Unable to attach the loading indicator because the parent ID is not valid.');\n            }\n\n            parent.appendChild(this._container);\n        }\n\n        this._container.style.visibility = 'visible';\n        this._container.style.opacity = '1';\n    }\n\n    hide(): void {\n        const handleTransitionEnd = () => {\n            this._container.style.visibility = 'hidden';\n\n            this._container.removeEventListener('transitionend', handleTransitionEnd);\n        };\n\n        this._container.addEventListener('transitionend', handleTransitionEnd);\n\n        this._container.style.opacity = '0';\n    }\n\n    private _buildContainer(): HTMLElement {\n        const container = document.createElement('div');\n\n        container.style.display = 'block';\n        container.style.bottom = '0';\n        container.style.left = '0';\n        container.style.height = '100%';\n        container.style.width = '100%';\n        container.style.position = 'absolute';\n        container.style.right = '0';\n        container.style.top = '0';\n        container.style.transition = 'all 250ms ease-out';\n        container.style.opacity = '0';\n\n        return container;\n    }\n\n    private _buildIndicator(): HTMLElement {\n        const indicator = document.createElement('div');\n\n        indicator.style.display = 'block';\n        indicator.style.width = `${this._styles.size}px`;\n        indicator.style.height = `${this._styles.size}px`;\n        indicator.style.borderRadius = `${this._styles.size}px`;\n        indicator.style.border = 'solid 1px';\n        indicator.style.borderColor = `${this._styles.backgroundColor} ${this._styles.backgroundColor} ${this._styles.color} ${this._styles.color}`;\n        indicator.style.margin = '0 auto';\n        indicator.style.position = 'absolute';\n        indicator.style.left = '0';\n        indicator.style.right = '0';\n        indicator.style.top = '50%';\n        indicator.style.transform = 'translateY(-50%) rotate(0deg)';\n        indicator.style.transformStyle = 'preserve-3d';\n        indicator.style.animation = `${ROTATION_ANIMATION} 500ms infinite cubic-bezier(0.69, 0.31, 0.56, 0.83)`;\n\n        return indicator;\n    }\n\n    private _defineAnimation(): void {\n        // In order to define CSS animation, we need to insert a stylesheet into the host frame.\n        // We only have to do it once.\n        if (document.getElementById(ROTATION_ANIMATION)) {\n            return;\n        }\n\n        const style = document.createElement('style');\n\n        style.id = ROTATION_ANIMATION;\n\n        document.head.appendChild(style);\n\n        if (style.sheet instanceof CSSStyleSheet) {\n            style.sheet.insertRule(`\n                @keyframes ${ROTATION_ANIMATION} {\n                    0% { transform: translateY(-50%) rotate(0deg); }\n                    100% { transform: translateY(-50%) rotate(360deg); }\n                }\n            `);\n        }\n    }\n}\n","import { InvalidArgumentError } from '../common/error/errors';\n\nexport default function parseOrigin(url: string): string {\n    if (!/^(https?:)?\\/\\//.test(url)) {\n        throw new InvalidArgumentError('The provided URL must be absolute.');\n    }\n\n    // new URL() is not supported in IE11, use anchor tag instead\n    const anchor = document.createElement('a');\n\n    anchor.href = url;\n\n    return `${anchor.protocol}//${anchor.hostname}` + (anchor.port ? `:${anchor.port}` : '');\n}\n","import { StandardError } from '../../common/error/errors';\n\nexport default class NotEmbeddableError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Unable to embed the checkout form.');\n\n        this.type = 'not_embeddable';\n    }\n}\n","import { iframeResizer, IFrameComponent } from 'iframe-resizer';\n\nimport { EmbeddedCheckoutEventType } from './embedded-checkout-events';\nimport { NotEmbeddableError } from './errors';\nimport isIframeEvent from './is-iframe-event';\nimport parseOrigin from './parse-origin';\n\nexport default class ResizableIframeCreator {\n    constructor(\n        private _options?: { timeout: number }\n    ) {}\n\n    createFrame(src: string, containerId: string): Promise<IFrameComponent> {\n        const container = document.getElementById(containerId);\n        const { timeout = 60000 } = this._options || {};\n\n        if (!container) {\n            throw new NotEmbeddableError('Unable to embed the iframe because the container element could not be found.');\n        }\n\n        const iframe = document.createElement('iframe');\n\n        iframe.src = src;\n        iframe.style.border = 'none';\n        iframe.style.display = 'none';\n        iframe.style.width = '100%';\n\n        container.appendChild(iframe);\n\n        return this._toResizableFrame(iframe, timeout)\n            .catch(error => {\n                container.removeChild(iframe);\n\n                throw error;\n            });\n    }\n\n    private _toResizableFrame(iframe: HTMLIFrameElement, timeoutInterval: number): Promise<IFrameComponent> {\n        // Can't simply listen to `load` event because it always gets triggered even if there's an error.\n        // Instead, listen to the `load` inside the iframe and let the parent frame know when it happens.\n        return new Promise((resolve, reject) => {\n            const timeout = window.setTimeout(() => {\n                reject(new NotEmbeddableError('Unable to embed the iframe because the content could not be loaded.'));\n            }, timeoutInterval);\n\n            const handleMessage = (event: MessageEvent) => {\n                if (event.origin !== parseOrigin(iframe.src)) {\n                    return;\n                }\n\n                if (isIframeEvent(event.data, EmbeddedCheckoutEventType.FrameError)) {\n                    teardown();\n                    reject(new NotEmbeddableError(event.data.payload.message));\n                }\n\n                if (isIframeEvent(event.data, EmbeddedCheckoutEventType.FrameLoaded)) {\n                    iframe.style.display = '';\n\n                    const iframes = iframeResizer({\n                        scrolling: false,\n                        sizeWidth: false,\n                        heightCalculationMethod: 'lowestElement',\n                    }, iframe);\n\n                    teardown();\n                    resolve(iframes[iframes.length - 1]);\n                }\n            };\n\n            const teardown = () => {\n                window.removeEventListener('message', handleMessage);\n                window.clearTimeout(timeout);\n            };\n\n            window.addEventListener('message', handleMessage);\n        });\n    }\n}\n","import EmbeddedCheckout from './embedded-checkout';\nimport { EmbeddedCheckoutEventMap } from './embedded-checkout-events';\nimport EmbeddedCheckoutOptions from './embedded-checkout-options';\nimport { EmbeddedContentEvent } from './iframe-content/embedded-content-events';\nimport IframeEventListener from './iframe-event-listener';\nimport IframeEventPoster from './iframe-event-poster';\nimport LoadingIndicator from './loading-indicator';\nimport parseOrigin from './parse-origin';\nimport ResizableIframeCreator from './resizable-iframe-creator';\n\n/**\n * Embed the checkout form in an iframe.\n *\n * Once the iframe is embedded, it will automatically resize according to the\n * size of the checkout form. It will also notify the parent window when certain\n * events have occurred. i.e.: when the form is loaded and ready to be used.\n *\n * ```js\n * embedCheckout({\n *     url: 'https://checkout/url',\n *     container: 'container-id',\n * });\n * ```\n *\n * Please note that this feature is currently in an early stage of development.\n * Therefore the API is unstable and not ready for public consumption.\n *\n * @alpha\n * @param options - Options for embedding the checkout form.\n * @returns A promise that resolves to an instance of `EmbeddedCheckout`.\n */\nexport default function embedCheckout(options: EmbeddedCheckoutOptions): Promise<EmbeddedCheckout> {\n    const origin = parseOrigin(options.url);\n    const embeddedCheckout = new EmbeddedCheckout(\n        new ResizableIframeCreator(),\n        new IframeEventListener<EmbeddedCheckoutEventMap>(origin),\n        new IframeEventPoster<EmbeddedContentEvent>(origin),\n        new LoadingIndicator({ styles: options.styles && options.styles.loadingIndicator }),\n        options\n    );\n\n    return embeddedCheckout.attach();\n}\n","import { selector } from '../common/selector';\n\nimport Cart from './cart';\nimport CartState from './cart-state';\n\n@selector\nexport default class CartSelector {\n    constructor(\n        private _cart: CartState\n    ) {}\n\n    getCart(): Cart | undefined {\n        return this._cart.data;\n    }\n\n    getLoadError(): Error | undefined {\n        return this._cart.errors.loadError;\n    }\n\n    isLoading(): boolean {\n        return !!this._cart.statuses.isLoading;\n    }\n}\n","import { selector } from '../common/selector';\n\nimport Coupon from './coupon';\nimport CouponState from './coupon-state';\n\n@selector\nexport default class CouponSelector {\n    constructor(\n        private _coupon: CouponState\n    ) {}\n\n    getCoupons(): Coupon[] | undefined {\n        return this._coupon.data;\n    }\n\n    getRemoveError(): Error | undefined {\n        return this._coupon.errors.removeCouponError;\n    }\n\n    getApplyError(): Error | undefined {\n        return this._coupon.errors.applyCouponError;\n    }\n\n    isApplying(): boolean {\n        return !!this._coupon.statuses.isApplyingCoupon;\n    }\n\n    isRemoving(): boolean {\n        return !!this._coupon.statuses.isRemovingCoupon;\n    }\n}\n","import { selector } from '../common/selector';\n\nimport Customer from './customer';\nimport CustomerState from './customer-state';\n\n@selector\nexport default class CustomerSelector {\n    constructor(\n        private _customer: CustomerState\n    ) {}\n\n    getCustomer(): Customer | undefined {\n        return this._customer.data;\n    }\n}\n","import CustomerStrategyState from './customer-strategy-state';\n\nexport default class CustomerStrategySelector {\n    constructor(\n        private _customerStrategies: CustomerStrategyState\n    ) {}\n\n    getSignInError(methodId?: string): Error | undefined {\n        if (methodId && this._customerStrategies.errors.signInMethodId !== methodId) {\n            return;\n        }\n\n        return this._customerStrategies.errors.signInError;\n    }\n\n    getSignOutError(methodId?: string): Error | undefined {\n        if (methodId && this._customerStrategies.errors.signOutMethodId !== methodId) {\n            return;\n        }\n\n        return this._customerStrategies.errors.signOutError;\n    }\n\n    getInitializeError(methodId?: string): Error | undefined {\n        if (methodId && this._customerStrategies.errors.initializeMethodId !== methodId) {\n            return;\n        }\n\n        return this._customerStrategies.errors.initializeError;\n    }\n\n    getWidgetInteractionError(methodId?: string): Error | undefined {\n        if (methodId && this._customerStrategies.errors.widgetInteractionMethodId !== methodId) {\n            return;\n        }\n\n        return this._customerStrategies.errors.widgetInteractionError;\n    }\n\n    isSigningIn(methodId?: string): boolean {\n        if (methodId && this._customerStrategies.statuses.signInMethodId !== methodId) {\n            return false;\n        }\n\n        return !!this._customerStrategies.statuses.isSigningIn;\n    }\n\n    isSigningOut(methodId?: string): boolean {\n        if (methodId && this._customerStrategies.statuses.signOutMethodId !== methodId) {\n            return false;\n        }\n\n        return !!this._customerStrategies.statuses.isSigningOut;\n    }\n\n    isInitializing(methodId?: string): boolean {\n        if (methodId && this._customerStrategies.statuses.initializeMethodId !== methodId) {\n            return false;\n        }\n\n        return !!this._customerStrategies.statuses.isInitializing;\n    }\n\n    isWidgetInteracting(methodId?: string): boolean {\n        if (methodId && this._customerStrategies.statuses.widgetInteractionMethodId !== methodId) {\n            return false;\n        }\n\n        return !!this._customerStrategies.statuses.isWidgetInteracting;\n    }}\n","import { selector } from '../common/selector';\n\nimport GiftCertificate from './gift-certificate';\nimport GiftCertificateState from './gift-certificate-state';\n\n@selector\nexport default class GiftCertificateSelector {\n    constructor(\n        private _giftCertificate: GiftCertificateState\n    ) {}\n\n    getGiftCertificates(): GiftCertificate[] | undefined {\n        return this._giftCertificate.data;\n    }\n\n    getRemoveError(): Error | undefined {\n        return this._giftCertificate.errors.removeGiftCertificateError;\n    }\n\n    getApplyError(): Error | undefined {\n        return this._giftCertificate.errors.applyGiftCertificateError;\n    }\n\n    isApplying(): boolean {\n        return !!this._giftCertificate.statuses.isApplyingGiftCertificate;\n    }\n\n    isRemoving(): boolean {\n        return !!this._giftCertificate.statuses.isRemovingGiftCertificate;\n    }\n}\n","import { selector } from '../common/selector';\n\nimport { Address } from '../address';\n\nimport ConsignmentState from './consignment-state';\n\n@selector\nexport default class ShippingAddressSelector {\n    constructor(\n        private _consignments: ConsignmentState\n    ) {}\n\n    getShippingAddress(): Address | undefined {\n        const consignments = this._consignments.data;\n\n        if (!consignments || !consignments[0]) {\n            return;\n        }\n\n        return consignments[0].shippingAddress;\n    }\n}\n","import { selector } from '../common/selector';\nimport { Country } from '../geography';\n\nimport ShippingCountryState from './shipping-country-state';\n\n@selector\nexport default class ShippingCountrySelector {\n    constructor(\n        private _shippingCountries: ShippingCountryState\n    ) {}\n\n    getShippingCountries(): Country[] | undefined {\n        return this._shippingCountries.data;\n    }\n\n    getLoadError(): Error | undefined {\n        return this._shippingCountries.errors.loadError;\n    }\n\n    isLoading(): boolean {\n        return !!this._shippingCountries.statuses.isLoading;\n    }\n}\n","import { selector } from '../common/selector';\n\nimport ShippingStrategyState from './shipping-strategy-state';\n\n@selector\nexport default class ShippingStrategySelector {\n    constructor(\n        private _shippingStrategies: ShippingStrategyState\n    ) {}\n\n    getUpdateAddressError(methodId?: string): Error | undefined {\n        if (methodId && this._shippingStrategies.errors.updateAddressMethodId !== methodId) {\n            return;\n        }\n\n        return this._shippingStrategies.errors.updateAddressError;\n    }\n\n    getSelectOptionError(methodId?: string): Error | undefined {\n        if (methodId && this._shippingStrategies.errors.selectOptionMethodId !== methodId) {\n            return;\n        }\n\n        return this._shippingStrategies.errors.selectOptionError;\n    }\n\n    getInitializeError(methodId?: string): Error | undefined {\n        if (methodId && this._shippingStrategies.errors.initializeMethodId !== methodId) {\n            return;\n        }\n\n        return this._shippingStrategies.errors.initializeError;\n    }\n\n    isUpdatingAddress(methodId?: string): boolean {\n        if (methodId && this._shippingStrategies.statuses.updateAddressMethodId !== methodId) {\n            return false;\n        }\n\n        return !!this._shippingStrategies.statuses.isUpdatingAddress;\n    }\n\n    isSelectingOption(methodId?: string): boolean {\n        if (methodId && this._shippingStrategies.statuses.selectOptionMethodId !== methodId) {\n            return false;\n        }\n\n        return !!this._shippingStrategies.statuses.isSelectingOption;\n    }\n\n    isInitializing(methodId?: string): boolean {\n        if (methodId && this._shippingStrategies.statuses.initializeMethodId !== methodId) {\n            return false;\n        }\n\n        return !!this._shippingStrategies.statuses.isInitializing;\n    }\n}\n","import { find } from 'lodash';\n\nimport { isAddressEqual, AddressRequestBody } from '../address';\nimport { CartSelector, PhysicalItem } from '../cart';\nimport { selector } from '../common/selector';\n\nimport Consignment from './consignment';\nimport ConsignmentState from './consignment-state';\nimport ShippingOption from './shipping-option';\n\n@selector\nexport default class ConsignmentSelector {\n    constructor(\n        private _consignments: ConsignmentState,\n        private _cart: CartSelector\n    ) {}\n\n    getConsignments(): Consignment[] | undefined {\n        return this._consignments.data;\n    }\n\n    getConsignmentById(id: string): Consignment | undefined {\n        const consignments = this._consignments.data;\n\n        if (!consignments || !consignments.length) {\n            return;\n        }\n\n        return find(consignments, { id });\n    }\n\n    getConsignmentByAddress(address: AddressRequestBody): Consignment | undefined {\n        const consignments = this._consignments.data;\n\n        if (!consignments || !consignments.length) {\n            return;\n        }\n\n        return find(consignments, consignment =>\n            isAddressEqual(consignment.shippingAddress, address)\n        );\n    }\n\n    getShippingOption(): ShippingOption | undefined {\n        const consignments = this._consignments.data;\n\n        if (consignments && consignments.length) {\n            return consignments[0].selectedShippingOption;\n        }\n    }\n\n    getLoadError(): Error | undefined {\n        return this._consignments.errors.loadError;\n    }\n\n    getCreateError(): Error | undefined {\n        return this._consignments.errors.createError;\n    }\n\n    getLoadShippingOptionsError(): Error | undefined {\n        return this._consignments.errors.loadShippingOptionsError;\n    }\n\n    getUnassignedItems(): PhysicalItem[] {\n        const cart = this._cart.getCart();\n\n        if (!cart) {\n            return [];\n        }\n\n        const assignedLineItemIds = (this.getConsignments() || []).reduce(\n            (itemIds, consignment) => itemIds.concat(consignment.lineItemIds),\n            [] as string[]\n        );\n\n        return (cart.lineItems.physicalItems || []).filter(\n            item => assignedLineItemIds.indexOf(item.id as string) < 0\n        );\n    }\n\n    getUpdateError(consignmentId?: string): Error | undefined {\n        if (consignmentId) {\n            return this._consignments.errors.updateError[consignmentId];\n        }\n\n        return find(this._consignments.errors.updateError);\n    }\n\n    getDeleteError(consignmentId?: string): Error | undefined {\n        if (consignmentId) {\n            return this._consignments.errors.deleteError[consignmentId];\n        }\n\n        return find(this._consignments.errors.deleteError);\n    }\n\n    getItemAssignmentError(address: AddressRequestBody): Error | undefined {\n        const consignment = this.getConsignmentByAddress(address);\n\n        return consignment ? this.getUpdateError(consignment.id) : this.getCreateError();\n    }\n\n    getUpdateShippingOptionError(consignmentId?: string): Error | undefined {\n        if (consignmentId) {\n            return this._consignments.errors.updateShippingOptionError[consignmentId];\n        }\n\n        return find(this._consignments.errors.updateShippingOptionError);\n    }\n\n    isLoading(): boolean {\n        return this._consignments.statuses.isLoading === true;\n    }\n\n    isLoadingShippingOptions(): boolean {\n        return this._consignments.statuses.isLoadingShippingOptions === true;\n    }\n\n    isCreating(): boolean {\n        return this._consignments.statuses.isCreating === true;\n    }\n\n    isUpdating(consignmentId?: string): boolean {\n        if (consignmentId) {\n            return this._consignments.statuses.isUpdating[consignmentId] === true;\n        }\n\n        return find(this._consignments.statuses.isUpdating) === true;\n    }\n\n    isDeleting(consignmentId?: string): boolean {\n        if (consignmentId) {\n            return this._consignments.statuses.isDeleting[consignmentId] === true;\n        }\n\n        return find(this._consignments.statuses.isDeleting) === true;\n    }\n\n    isAssigningItems(address: AddressRequestBody): boolean {\n        const consignment = this.getConsignmentByAddress(address);\n\n        return consignment ? this.isUpdating(consignment.id) : this.isCreating();\n    }\n\n    isUpdatingShippingOption(consignmentId?: string): boolean {\n        if (consignmentId) {\n            return this._consignments.statuses.isUpdatingShippingOption[consignmentId] === true;\n        }\n\n        return find(this._consignments.statuses.isUpdatingShippingOption) === true;\n    }\n}\n","import { BillingAddressSelector } from '../billing';\nimport { selector } from '../common/selector';\nimport { CouponSelector } from '../coupon';\n\nimport Order from './order';\nimport OrderState, { OrderMetaState } from './order-state';\n\n@selector\nexport default class OrderSelector {\n    constructor(\n        private _order: OrderState,\n        private _billingAddress: BillingAddressSelector,\n        private _coupons: CouponSelector\n    ) {}\n\n    getOrder(): Order | undefined {\n        const { data } = this._order;\n        const billingAddress = this._billingAddress.getBillingAddress();\n        const coupons = this._coupons.getCoupons() || [];\n\n        if (!data || !billingAddress) {\n            return;\n        }\n\n        return {\n            ...data,\n            billingAddress,\n            coupons,\n        };\n    }\n\n    getOrderMeta(): OrderMetaState | undefined {\n        return this._order.meta;\n    }\n\n    getLoadError(): Error | undefined {\n        return this._order.errors.loadError;\n    }\n\n    isLoading(): boolean {\n        return !!this._order.statuses.isLoading;\n    }\n}\n","import { combineReducers, Action } from '@bigcommerce/data-store';\n\nimport { BillingAddressAction, BillingAddressActionType } from '../billing/billing-address-actions';\nimport { CheckoutAction, CheckoutActionType } from '../checkout';\nimport { CouponAction, CouponActionType } from '../coupon/coupon-actions';\nimport { GiftCertificateAction, GiftCertificateActionType } from '../coupon/gift-certificate-actions';\nimport { ConsignmentAction, ConsignmentActionType } from '../shipping/consignment-actions';\n\nimport Cart from './cart';\nimport CartState, { CartErrorsState, CartStatusesState } from './cart-state';\n\nconst DEFAULT_STATE: CartState = {\n    errors: {},\n    statuses: {},\n};\n\nexport default function cartReducer(\n    state: CartState = DEFAULT_STATE,\n    action: Action\n): CartState {\n    const reducer = combineReducers<CartState>({\n        data: dataReducer,\n        errors: errorsReducer,\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Cart | undefined,\n    action: BillingAddressAction | CheckoutAction | ConsignmentAction | CouponAction | GiftCertificateAction\n): Cart | undefined {\n    switch (action.type) {\n    case BillingAddressActionType.UpdateBillingAddressSucceeded:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case ConsignmentActionType.CreateConsignmentsSucceeded:\n    case ConsignmentActionType.DeleteConsignmentSucceeded:\n    case ConsignmentActionType.UpdateConsignmentSucceeded:\n    case ConsignmentActionType.UpdateShippingOptionSucceeded:\n    case CouponActionType.ApplyCouponSucceeded:\n    case CouponActionType.RemoveCouponSucceeded:\n    case GiftCertificateActionType.ApplyGiftCertificateSucceeded:\n    case GiftCertificateActionType.RemoveGiftCertificateSucceeded:\n        return action.payload ? { ...data, ...action.payload.cart } : data;\n\n    default:\n        return data;\n    }\n}\n\nfunction statusesReducer(\n    statuses: CartStatusesState = DEFAULT_STATE.statuses,\n    action: CheckoutAction\n): CartStatusesState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n        return { ...statuses, isLoading: true };\n\n    case CheckoutActionType.LoadCheckoutFailed:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n        return { ...statuses, isLoading: false };\n\n    default:\n        return statuses;\n    }\n}\n\nfunction errorsReducer(\n    errors: CartErrorsState = DEFAULT_STATE.errors,\n    action: CheckoutAction\n): CartErrorsState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n        return { ...errors, loadError: undefined };\n\n    case CheckoutActionType.LoadCheckoutFailed:\n        return { ...errors, loadError: action.payload };\n\n    default:\n        return errors;\n    }\n}\n","import { combineReducers } from '@bigcommerce/data-store';\n\nimport { CheckoutAction, CheckoutActionType } from '../checkout';\nimport { CustomerAction, CustomerActionType } from '../customer';\n\nimport Consignment from './consignment';\nimport { ConsignmentAction, ConsignmentActionType } from './consignment-actions';\nimport ConsignmentState, { ConsignmentErrorsState, ConsignmentStatusesState } from './consignment-state';\n\nconst DEFAULT_STATE: ConsignmentState = {\n    errors: {\n        updateShippingOptionError: {},\n        updateError: {},\n        deleteError: {},\n    },\n    statuses: {\n        isUpdating: {},\n        isUpdatingShippingOption: {},\n        isDeleting: {},\n    },\n};\n\nexport default function consignmentReducer(\n    state: ConsignmentState = DEFAULT_STATE,\n    action: ConsignmentAction | CheckoutAction\n): ConsignmentState {\n    const reducer = combineReducers<ConsignmentState, ConsignmentAction | CheckoutAction>({\n        data: dataReducer,\n        errors: errorsReducer,\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Consignment[] | undefined,\n    action: ConsignmentAction | CheckoutAction | CustomerAction\n): Consignment[] | undefined {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case ConsignmentActionType.LoadShippingOptionsSucceeded:\n    case ConsignmentActionType.CreateConsignmentsSucceeded:\n    case ConsignmentActionType.UpdateConsignmentSucceeded:\n    case ConsignmentActionType.DeleteConsignmentSucceeded:\n    case ConsignmentActionType.UpdateShippingOptionSucceeded:\n        return action.payload ? action.payload.consignments : data;\n\n    case CustomerActionType.SignOutCustomerSucceeded:\n        return [];\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: ConsignmentErrorsState = DEFAULT_STATE.errors,\n    action: ConsignmentAction | CheckoutAction\n): ConsignmentErrorsState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case ConsignmentActionType.LoadShippingOptionsSucceeded:\n    case ConsignmentActionType.LoadShippingOptionsRequested:\n        return { ...errors, loadError: undefined };\n\n    case CheckoutActionType.LoadCheckoutFailed:\n    case ConsignmentActionType.LoadShippingOptionsFailed:\n        return { ...errors, loadError: action.payload };\n\n    case ConsignmentActionType.CreateConsignmentsRequested:\n    case ConsignmentActionType.CreateConsignmentsSucceeded:\n        return { ...errors, createError: undefined };\n\n    case ConsignmentActionType.CreateConsignmentsFailed:\n        return { ...errors, createError: action.payload };\n\n    case ConsignmentActionType.UpdateConsignmentSucceeded:\n    case ConsignmentActionType.UpdateConsignmentRequested:\n        if (action.meta) {\n            errors.updateError[action.meta.id] = undefined;\n        }\n\n        return errors;\n\n    case ConsignmentActionType.UpdateConsignmentFailed:\n        if (action.meta) {\n            errors.updateError[action.meta.id] = action.payload;\n        }\n\n        return errors;\n\n    case ConsignmentActionType.DeleteConsignmentSucceeded:\n    case ConsignmentActionType.DeleteConsignmentRequested:\n        if (action.meta) {\n            errors.deleteError[action.meta.id] = undefined;\n        }\n\n        return errors;\n\n    case ConsignmentActionType.DeleteConsignmentFailed:\n        if (action.meta) {\n            errors.deleteError[action.meta.id] = action.payload;\n        }\n\n        return errors;\n\n    case ConsignmentActionType.UpdateShippingOptionRequested:\n    case ConsignmentActionType.UpdateShippingOptionSucceeded:\n        if (action.meta) {\n            errors.updateShippingOptionError[action.meta.id] = undefined;\n        }\n\n        return errors;\n\n    case ConsignmentActionType.UpdateShippingOptionFailed:\n        if (action.meta) {\n            errors.updateShippingOptionError[action.meta.id] = action.payload;\n        }\n\n        return errors;\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: ConsignmentStatusesState = DEFAULT_STATE.statuses,\n    action: ConsignmentAction | CheckoutAction\n): ConsignmentStatusesState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n        return { ...statuses, isLoading: true };\n\n    case ConsignmentActionType.LoadShippingOptionsRequested:\n        return { ...statuses, isLoadingShippingOptions: true };\n\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case CheckoutActionType.LoadCheckoutFailed:\n        return { ...statuses, isLoading: false };\n\n    case ConsignmentActionType.LoadShippingOptionsSucceeded:\n    case ConsignmentActionType.LoadShippingOptionsFailed:\n        return { ...statuses, isLoadingShippingOptions: false };\n\n    case ConsignmentActionType.CreateConsignmentsRequested:\n        return { ...statuses, isCreating: true };\n\n    case ConsignmentActionType.CreateConsignmentsSucceeded:\n    case ConsignmentActionType.CreateConsignmentsFailed:\n        return { ...statuses, isCreating: false };\n\n    case ConsignmentActionType.UpdateConsignmentRequested:\n        if (action.meta) {\n            statuses.isUpdating[action.meta.id] = true;\n        }\n\n        return statuses;\n\n    case ConsignmentActionType.UpdateConsignmentSucceeded:\n    case ConsignmentActionType.UpdateConsignmentFailed:\n        if (action.meta) {\n            statuses.isUpdating[action.meta.id] = false;\n        }\n\n        return statuses;\n\n    case ConsignmentActionType.DeleteConsignmentRequested:\n        if (action.meta) {\n            statuses.isDeleting[action.meta.id] = true;\n        }\n\n        return statuses;\n\n    case ConsignmentActionType.DeleteConsignmentSucceeded:\n    case ConsignmentActionType.DeleteConsignmentFailed:\n        if (action.meta) {\n            statuses.isDeleting[action.meta.id] = false;\n        }\n\n        return statuses;\n\n    case ConsignmentActionType.UpdateShippingOptionRequested:\n        if (action.meta) {\n            statuses.isUpdatingShippingOption[action.meta.id] = true;\n        }\n\n        return statuses;\n\n    case ConsignmentActionType.UpdateShippingOptionSucceeded:\n    case ConsignmentActionType.UpdateShippingOptionFailed:\n        if (action.meta) {\n            statuses.isUpdatingShippingOption[action.meta.id] = false;\n        }\n\n        return statuses;\n\n    default:\n        return statuses;\n    }\n}\n","import { combineReducers } from '@bigcommerce/data-store';\n\nimport { CheckoutAction, CheckoutActionType } from '../checkout';\nimport { OrderAction, OrderActionType } from '../order';\n\nimport Coupon from './coupon';\nimport { CouponAction, CouponActionType } from './coupon-actions';\nimport CouponState, { CouponErrorsState, CouponStatusesState } from './coupon-state';\n\nconst DEFAULT_STATE: CouponState = {\n    errors: {},\n    statuses: {},\n};\n\nexport default function couponReducer(\n    state: CouponState = DEFAULT_STATE,\n    action: CouponAction | CheckoutAction | OrderAction\n): CouponState {\n    const reducer = combineReducers<CouponState>({\n        data: dataReducer,\n        errors: errorsReducer,\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Coupon[] | undefined,\n    action: CouponAction | CheckoutAction | OrderAction\n): Coupon[] | undefined {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case CouponActionType.ApplyCouponSucceeded:\n    case CouponActionType.RemoveCouponSucceeded:\n    case OrderActionType.LoadOrderSucceeded:\n        return action.payload ? action.payload.coupons : data;\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: CouponErrorsState = {},\n    action: CouponAction\n): CouponErrorsState {\n    switch (action.type) {\n    case CouponActionType.ApplyCouponRequested:\n    case CouponActionType.ApplyCouponSucceeded:\n        return { ...errors, applyCouponError: undefined };\n\n    case CouponActionType.ApplyCouponFailed:\n        return { ...errors, applyCouponError: action.payload };\n\n    case CouponActionType.RemoveCouponRequested:\n    case CouponActionType.RemoveCouponSucceeded:\n        return { ...errors, removeCouponError: undefined };\n\n    case CouponActionType.RemoveCouponFailed:\n        return { ...errors, removeCouponError: action.payload };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: CouponStatusesState = {},\n    action: CouponAction\n): CouponStatusesState {\n    switch (action.type) {\n    case CouponActionType.ApplyCouponRequested:\n        return { ...statuses, isApplyingCoupon: true };\n\n    case CouponActionType.ApplyCouponSucceeded:\n    case CouponActionType.ApplyCouponFailed:\n        return { ...statuses, isApplyingCoupon: false };\n\n    case CouponActionType.RemoveCouponRequested:\n        return { ...statuses, isRemovingCoupon: true };\n\n    case CouponActionType.RemoveCouponSucceeded:\n    case CouponActionType.RemoveCouponFailed:\n        return { ...statuses, isRemovingCoupon: false };\n\n    default:\n        return statuses;\n    }\n}\n","import { combineReducers } from '@bigcommerce/data-store';\n\nimport { CheckoutAction, CheckoutActionType } from '../checkout';\n\nimport Customer from './customer';\nimport CustomerState from './customer-state';\n\nconst DEFAULT_STATE: CustomerState = {};\n\nexport default function customerReducer(\n    state: CustomerState = DEFAULT_STATE,\n    action: CheckoutAction\n): CustomerState {\n    const reducer = combineReducers<CustomerState, CheckoutAction>({\n        data: dataReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Customer | undefined,\n    action: CheckoutAction\n): Customer | undefined {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutSucceeded:\n        return action.payload ? { ...data, ...action.payload.customer } : data;\n\n    default:\n        return data;\n    }\n}\n","import { combineReducers } from '@bigcommerce/data-store';\n\nimport { CheckoutAction, CheckoutActionType } from '../checkout';\nimport { ConsignmentAction, ConsignmentActionType } from '../shipping/consignment-actions';\n\nimport { CouponAction, CouponActionType } from './coupon-actions';\nimport GiftCertificate from './gift-certificate';\nimport { GiftCertificateAction, GiftCertificateActionType } from './gift-certificate-actions';\nimport GiftCertificateState, { GiftCertificateErrorsState, GiftCertificateStatusesState } from './gift-certificate-state';\n\nconst DEFAULT_STATE: GiftCertificateState = {\n    errors: {},\n    statuses: {},\n};\n\nexport default function giftCertificateReducer(\n    state: GiftCertificateState = DEFAULT_STATE,\n    action: CheckoutAction | GiftCertificateAction | ConsignmentAction | CouponAction\n): GiftCertificateState {\n    const reducer = combineReducers<GiftCertificateState>({\n        data: dataReducer,\n        errors: errorsReducer,\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: GiftCertificate[] | undefined,\n    action: CheckoutAction | GiftCertificateAction | ConsignmentAction | CouponAction\n): GiftCertificate[] | undefined {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case ConsignmentActionType.CreateConsignmentsSucceeded:\n    case ConsignmentActionType.UpdateConsignmentSucceeded:\n    case ConsignmentActionType.DeleteConsignmentSucceeded:\n    case ConsignmentActionType.UpdateShippingOptionSucceeded:\n    case CouponActionType.ApplyCouponSucceeded:\n    case CouponActionType.RemoveCouponSucceeded:\n    case GiftCertificateActionType.ApplyGiftCertificateSucceeded:\n    case GiftCertificateActionType.RemoveGiftCertificateSucceeded:\n        return action.payload ? action.payload.giftCertificates : data;\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: GiftCertificateErrorsState = DEFAULT_STATE.errors,\n    action: GiftCertificateAction\n): GiftCertificateErrorsState {\n    switch (action.type) {\n    case GiftCertificateActionType.ApplyGiftCertificateRequested:\n    case GiftCertificateActionType.ApplyGiftCertificateSucceeded:\n        return { ...errors, applyGiftCertificateError: undefined };\n\n    case GiftCertificateActionType.ApplyGiftCertificateFailed:\n        return { ...errors, applyGiftCertificateError: action.payload };\n\n    case GiftCertificateActionType.RemoveGiftCertificateRequested:\n    case GiftCertificateActionType.RemoveGiftCertificateSucceeded:\n        return { ...errors, removeGiftCertificateError: undefined };\n\n    case GiftCertificateActionType.RemoveGiftCertificateFailed:\n        return { ...errors, removeGiftCertificateError: action.payload };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: GiftCertificateStatusesState = DEFAULT_STATE.statuses,\n    action: GiftCertificateAction\n): GiftCertificateStatusesState {\n    switch (action.type) {\n    case GiftCertificateActionType.ApplyGiftCertificateRequested:\n        return { ...statuses, isApplyingGiftCertificate: true };\n\n    case GiftCertificateActionType.ApplyGiftCertificateSucceeded:\n    case GiftCertificateActionType.ApplyGiftCertificateFailed:\n        return { ...statuses, isApplyingGiftCertificate: false };\n\n    case GiftCertificateActionType.RemoveGiftCertificateRequested:\n        return { ...statuses, isRemovingGiftCertificate: true };\n\n    case GiftCertificateActionType.RemoveGiftCertificateSucceeded:\n    case GiftCertificateActionType.RemoveGiftCertificateFailed:\n        return { ...statuses, isRemovingGiftCertificate: false };\n\n    default:\n        return statuses;\n    }\n}\n","import { combineReducers } from '@bigcommerce/data-store';\nimport { omit } from 'lodash';\n\nimport { OrderAction, OrderActionType } from './order-actions';\nimport OrderState, { OrderDataState, OrderErrorsState, OrderMetaState, OrderStatusesState } from './order-state';\n\nconst DEFAULT_STATE: OrderState = {\n    errors: {},\n    meta: {},\n    statuses: {},\n};\n\nexport default function orderReducer(\n    state: OrderState = DEFAULT_STATE,\n    action: OrderAction\n): OrderState {\n    const reducer = combineReducers<OrderState>({\n        data: dataReducer,\n        errors: errorsReducer,\n        meta: metaReducer,\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: OrderDataState | undefined,\n    action: OrderAction\n): OrderDataState | undefined {\n    switch (action.type) {\n    case OrderActionType.LoadOrderSucceeded:\n    case OrderActionType.LoadOrderPaymentsSucceeded:\n        return action.payload\n            ? omit({ ...data, ...action.payload }, ['billingAddress', 'coupons'])\n            : data;\n\n    default:\n        return data;\n    }\n}\n\nfunction metaReducer(\n    meta: OrderMetaState | undefined,\n    action: OrderAction\n): OrderMetaState | undefined {\n    switch (action.type) {\n    case OrderActionType.FinalizeOrderSucceeded:\n    case OrderActionType.SubmitOrderSucceeded:\n        return action.payload ? {\n            ...meta,\n            ...action.meta,\n            callbackUrl: action.payload.order.callbackUrl,\n            orderToken: action.payload.order.token,\n            payment: action.payload.order && action.payload.order.payment,\n        } : meta;\n\n    default:\n        return meta;\n    }\n}\n\nfunction errorsReducer(\n    errors: OrderErrorsState = DEFAULT_STATE.errors,\n    action: OrderAction\n): OrderErrorsState {\n    switch (action.type) {\n    case OrderActionType.LoadOrderRequested:\n    case OrderActionType.LoadOrderSucceeded:\n    case OrderActionType.LoadOrderPaymentsSucceeded:\n    case OrderActionType.LoadOrderPaymentsRequested:\n        return { ...errors, loadError: undefined };\n\n    case OrderActionType.LoadOrderFailed:\n    case OrderActionType.LoadOrderPaymentsFailed:\n        return { ...errors, loadError: action.payload };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: OrderStatusesState = DEFAULT_STATE.statuses,\n    action: OrderAction\n): OrderStatusesState {\n    switch (action.type) {\n    case OrderActionType.LoadOrderRequested:\n    case OrderActionType.LoadOrderPaymentsRequested:\n        return { ...statuses, isLoading: true };\n\n    case OrderActionType.LoadOrderSucceeded:\n    case OrderActionType.LoadOrderFailed:\n    case OrderActionType.LoadOrderPaymentsSucceeded:\n    case OrderActionType.LoadOrderPaymentsFailed:\n        return { ...statuses, isLoading: false };\n\n    default:\n        return statuses;\n    }\n}\n","import { combineReducers, Action } from '@bigcommerce/data-store';\n\nimport { Country } from '../geography';\n\nimport * as actionTypes from './shipping-country-action-types';\nimport ShippingCountryState, { ShippingCountryErrorsState, ShippingCountryStatusesState } from './shipping-country-state';\n\nconst DEFAULT_STATE: ShippingCountryState = {\n    errors: {},\n    statuses: {},\n};\n\n/**\n * @todo Convert this file into TypeScript properly\n * i.e.: Action\n */\nexport default function shippingCountryReducer(state: ShippingCountryState = DEFAULT_STATE, action: Action): ShippingCountryState {\n    const reducer = combineReducers<ShippingCountryState>({\n        errors: errorsReducer,\n        data: dataReducer,\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(data: Country[] | undefined, action: Action): Country[] | undefined {\n    switch (action.type) {\n    case actionTypes.LOAD_SHIPPING_COUNTRIES_SUCCEEDED:\n        return action.payload || [];\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(errors: ShippingCountryErrorsState = DEFAULT_STATE.errors, action: Action): ShippingCountryErrorsState {\n    switch (action.type) {\n    case actionTypes.LOAD_SHIPPING_COUNTRIES_REQUESTED:\n    case actionTypes.LOAD_SHIPPING_COUNTRIES_SUCCEEDED:\n        return { ...errors, loadError: undefined };\n\n    case actionTypes.LOAD_SHIPPING_COUNTRIES_FAILED:\n        return { ...errors, loadError: action.payload };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(statuses: ShippingCountryStatusesState = DEFAULT_STATE.statuses, action: Action): ShippingCountryStatusesState {\n    switch (action.type) {\n    case actionTypes.LOAD_SHIPPING_COUNTRIES_REQUESTED:\n        return { ...statuses, isLoading: true };\n\n    case actionTypes.LOAD_SHIPPING_COUNTRIES_SUCCEEDED:\n    case actionTypes.LOAD_SHIPPING_COUNTRIES_FAILED:\n        return { ...statuses, isLoading: false };\n\n    default:\n        return statuses;\n    }\n}\n","module.exports = require(\"rxjs/observable/throw\");","import { identity, isEqual, pickBy } from 'lodash';\n\nimport Address from './address';\n\nexport default function isAddressEqual(addressA: Partial<Address>, addressB: Partial<Address>): boolean {\n    return isEqual(normalize(addressA), normalize(addressB));\n}\n\nfunction normalize(address: Partial<Address>): Partial<Address> {\n    return pickBy({\n        firstName: address.firstName,\n        lastName: address.lastName,\n        company: address.company,\n        address1: address.address1,\n        address2: address.address2,\n        city: address.city,\n        stateOrProvince: address.stateOrProvince,\n        countryCode: address.countryCode,\n        postalCode: address.postalCode,\n        phone: address.phone,\n        customFields: address.customFields,\n    }, identity);\n}\n","module.exports = require(\"rxjs/observable/merge\");","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { find, map } from 'lodash';\nimport { Observable } from 'rxjs/Observable';\nimport { Observer } from 'rxjs/Observer';\n\nimport { AddressRequestBody } from '../address';\nimport { Cart } from '../cart';\nimport { InternalCheckoutSelectors, ReadableCheckoutStore } from '../checkout';\nimport CheckoutRequestSender from '../checkout/checkout-request-sender';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\n\nimport Consignment, {\n    ConsignmentsRequestBody,\n    ConsignmentAssignmentRequestBody,\n    ConsignmentCreateRequestBody,\n    ConsignmentLineItem,\n    ConsignmentRequestBody,\n    ConsignmentShippingOptionRequestBody,\n    ConsignmentUpdateRequestBody\n} from './consignment';\nimport {\n    ConsignmentActionType,\n    CreateConsignmentsAction,\n    DeleteConsignmentAction,\n    LoadShippingOptionsAction,\n    UpdateConsignmentAction,\n    UpdateShippingOptionAction,\n} from './consignment-actions';\nimport ConsignmentRequestSender from './consignment-request-sender';\n\nexport default class ConsignmentActionCreator {\n    constructor(\n        private _consignmentRequestSender: ConsignmentRequestSender,\n        private _checkoutRequestSender: CheckoutRequestSender\n    ) {}\n\n    assignItemsByAddress(\n        consignment: ConsignmentAssignmentRequestBody,\n        options?: RequestOptions\n    ): ThunkAction<CreateConsignmentsAction | UpdateConsignmentAction, InternalCheckoutSelectors> {\n        return store => {\n            const state = store.getState();\n            const existingConsignment = state.consignments.getConsignmentByAddress(consignment.shippingAddress);\n\n            return this._createOrUpdateConsignment({\n                id: existingConsignment && existingConsignment.id,\n                shippingAddress: consignment.shippingAddress,\n                lineItems: this._combineLineItems(\n                    consignment,\n                    existingConsignment,\n                    state.cart.getCart()\n                ),\n            }, options)(store);\n        };\n    }\n\n    selectShippingOption(\n        id: string,\n        options?: RequestOptions\n    ): ThunkAction<UpdateShippingOptionAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<UpdateShippingOptionAction>) => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n            const consignments = state.consignments.getConsignments();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            if (!consignments || !consignments.length) {\n                throw new MissingDataError(MissingDataErrorType.MissingConsignments);\n            }\n\n            const consignmentUpdateBody = {\n                id: consignments[0].id,\n                shippingOptionId: id,\n            };\n\n            const consignmentMeta = {\n                id: consignments[0].id,\n            };\n\n            observer.next(createAction(ConsignmentActionType.UpdateShippingOptionRequested, undefined, consignmentMeta));\n\n            this._consignmentRequestSender.updateConsignment(checkout.id, consignmentUpdateBody, options)\n                .then(({ body }) => {\n                    observer.next(createAction(\n                        ConsignmentActionType.UpdateShippingOptionSucceeded,\n                        body,\n                        consignmentMeta\n                    ));\n\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(\n                        ConsignmentActionType.UpdateShippingOptionFailed,\n                        response,\n                        consignmentMeta\n                    ));\n                });\n        });\n    }\n\n    loadShippingOptions(options?: RequestOptions): ThunkAction<LoadShippingOptionsAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<LoadShippingOptionsAction>) => {\n            const checkout = store.getState().checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(ConsignmentActionType.LoadShippingOptionsRequested));\n\n            this._checkoutRequestSender.loadCheckout(checkout.id, {\n                ...options,\n                params: {\n                    include: ['consignments.availableShippingOptions'],\n                },\n            })\n            .then(({ body }) => {\n                observer.next(createAction(ConsignmentActionType.LoadShippingOptionsSucceeded, body));\n                observer.complete();\n            })\n            .catch(response => {\n                observer.error(createErrorAction(ConsignmentActionType.LoadShippingOptionsFailed, response));\n            });\n        });\n    }\n\n    updateAddress(\n        address: AddressRequestBody,\n        options?: RequestOptions\n    ): ThunkAction<CreateConsignmentsAction | UpdateConsignmentAction, InternalCheckoutSelectors> {\n        return store => {\n            const consignment = this._getConsignmentRequestBody(address, store);\n            const consignments = store.getState().consignments.getConsignments();\n\n            if (consignments && consignments.length) {\n                (consignment as ConsignmentUpdateRequestBody).id = consignments[0].id;\n            }\n\n            return this._createOrUpdateConsignment(consignment, options)(store);\n        };\n    }\n\n    createConsignments(\n        consignments: ConsignmentsRequestBody,\n        options?: RequestOptions\n    ): ThunkAction<CreateConsignmentsAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<CreateConsignmentsAction>) => {\n            const checkout = store.getState().checkout.getCheckout();\n\n            if (!checkout || !checkout.id) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(ConsignmentActionType.CreateConsignmentsRequested));\n\n            this._consignmentRequestSender.createConsignments(checkout.id, consignments, options)\n                .then(({ body }) => {\n                    observer.next(createAction(ConsignmentActionType.CreateConsignmentsSucceeded, body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(ConsignmentActionType.CreateConsignmentsFailed, response));\n                });\n        });\n    }\n\n    updateConsignment(\n        consignment: ConsignmentUpdateRequestBody,\n        options?: RequestOptions\n    ): ThunkAction<UpdateConsignmentAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<UpdateConsignmentAction>) => {\n            const checkout = store.getState().checkout.getCheckout();\n\n            if (!checkout || !checkout.id) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            const consignmentMeta = { id: consignment.id };\n\n            observer.next(createAction(ConsignmentActionType.UpdateConsignmentRequested, undefined, consignmentMeta));\n\n            this._consignmentRequestSender.updateConsignment(checkout.id, consignment, options)\n                .then(({ body }) => {\n                    observer.next(createAction(ConsignmentActionType.UpdateConsignmentSucceeded, body, consignmentMeta));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(ConsignmentActionType.UpdateConsignmentFailed, response, consignmentMeta));\n                });\n        });\n    }\n\n    deleteConsignment(\n        consignmentId: string,\n        options?: RequestOptions\n    ): ThunkAction<DeleteConsignmentAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<DeleteConsignmentAction>) => {\n            const checkout = store.getState().checkout.getCheckout();\n            const consignmentMeta = { id: consignmentId };\n\n            if (!checkout || !checkout.id) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(ConsignmentActionType.DeleteConsignmentRequested, undefined, consignmentMeta));\n\n            this._consignmentRequestSender.deleteConsignment(checkout.id, consignmentId, options)\n                .then(({ body }) => {\n                    observer.next(createAction(ConsignmentActionType.DeleteConsignmentSucceeded, body, consignmentMeta));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(ConsignmentActionType.DeleteConsignmentFailed, response, consignmentMeta));\n                });\n        });\n    }\n\n    updateShippingOption(\n        consignment: ConsignmentShippingOptionRequestBody,\n        options?: RequestOptions\n    ): ThunkAction<UpdateShippingOptionAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<UpdateShippingOptionAction>) => {\n            const checkout = store.getState().checkout.getCheckout();\n\n            if (!checkout || !checkout.id) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            const consignmentMeta = { id: consignment.id };\n\n            observer.next(createAction(ConsignmentActionType.UpdateShippingOptionRequested, undefined, consignmentMeta));\n\n            this._consignmentRequestSender.updateConsignment(checkout.id, consignment, options)\n                .then(({ body }) => {\n                    observer.next(createAction(ConsignmentActionType.UpdateShippingOptionSucceeded, body, consignmentMeta));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(ConsignmentActionType.UpdateShippingOptionFailed, response, consignmentMeta));\n                });\n        });\n    }\n\n    private _createOrUpdateConsignment(\n        consignment: ConsignmentCreateRequestBody | ConsignmentUpdateRequestBody,\n        options?: RequestOptions\n    ): ThunkAction<UpdateConsignmentAction | CreateConsignmentsAction, InternalCheckoutSelectors> {\n        return store => {\n            const checkout = store.getState().checkout.getCheckout();\n\n            if (!checkout || !checkout.id) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            if (this._isUpdateConsignmentRequest(consignment)) {\n                return this.updateConsignment(consignment, options)(store);\n            }\n\n            return this.createConsignments([consignment], options)(store);\n        };\n    }\n\n    private _getConsignmentRequestBody(\n        shippingAddress: AddressRequestBody,\n        store: ReadableCheckoutStore\n    ): ConsignmentRequestBody {\n        const state = store.getState();\n        const cart = state.cart.getCart();\n\n        if (!cart) {\n            throw new MissingDataError(MissingDataErrorType.MissingCart);\n        }\n\n        return {\n            shippingAddress,\n            lineItems: (cart.lineItems && cart.lineItems.physicalItems || [])\n                .map(item => ({\n                    itemId: item.id,\n                    quantity: item.quantity,\n                })\n            ),\n        };\n    }\n\n    private _combineLineItems(\n        consignment: ConsignmentAssignmentRequestBody,\n        existingConsignment?: Consignment,\n        cart?: Cart\n    ): ConsignmentLineItem[] {\n        if (!existingConsignment) {\n            return consignment.lineItems;\n        }\n\n        if (!cart) {\n            throw new MissingDataError(MissingDataErrorType.MissingCart);\n        }\n\n        const existingLineItems = map(existingConsignment.lineItemIds, itemId => {\n            const item = find(cart.lineItems.physicalItems, { id: itemId });\n\n            return {\n                itemId,\n                quantity: item ? item.quantity : 0,\n            };\n        }) as ConsignmentLineItem[];\n\n        return existingLineItems.concat(consignment.lineItems);\n    }\n\n    private _isUpdateConsignmentRequest(\n        request: ConsignmentRequestBody\n    ): request is ConsignmentUpdateRequestBody {\n        const updateRequest = request as ConsignmentUpdateRequestBody;\n\n        return !!updateRequest.id;\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { Checkout } from '../checkout';\nimport { ContentType, RequestOptions } from '../common/http-request';\n\nimport { ConsignmentsRequestBody, ConsignmentUpdateRequestBody } from './consignment';\n\nconst DEFAULT_PARAMS = {\n    include: [\n        'consignments.availableShippingOptions',\n        'cart.lineItems.physicalItems.options',\n        'cart.lineItems.digitalItems.options',\n        'customer',\n        'promotions.banners',\n    ].join(','),\n};\n\nexport default class ConsignmentRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    createConsignments(checkoutId: string, consignments: ConsignmentsRequestBody, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/consignments`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.post(url, { body: consignments, params: DEFAULT_PARAMS, headers, timeout });\n    }\n\n    updateConsignment(checkoutId: string, consignment: ConsignmentUpdateRequestBody, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const { id, ...body } = consignment;\n        const url = `/api/storefront/checkouts/${checkoutId}/consignments/${id}`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.put(url, { params: DEFAULT_PARAMS, body, headers, timeout });\n    }\n\n    deleteConsignment(checkoutId: string, consignmentId: string, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/consignments/${consignmentId}`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.delete(url, { params: DEFAULT_PARAMS, headers, timeout });\n    }\n}\n","import { createAction, createErrorAction } from '@bigcommerce/data-store';\nimport { Observable } from 'rxjs/Observable';\nimport { Observer } from 'rxjs/Observer';\n\nimport { Registry } from '../common/registry';\n\nimport CustomerCredentials from './customer-credentials';\nimport { CustomerInitializeOptions, CustomerRequestOptions } from './customer-request-options';\nimport {\n    CustomerStrategyActionType,\n    CustomerStrategyDeinitializeAction,\n    CustomerStrategyInitializeAction,\n    CustomerStrategySignInAction,\n    CustomerStrategySignOutAction,\n    CustomerStrategyWidgetAction,\n} from './customer-strategy-actions';\nimport { CustomerStrategy } from './strategies';\n\nexport default class CustomerStrategyActionCreator {\n    constructor(\n        private _strategyRegistry: Registry<CustomerStrategy>\n    ) {}\n\n    signIn(credentials: CustomerCredentials, options?: CustomerRequestOptions): Observable<CustomerStrategySignInAction> {\n        return Observable.create((observer: Observer<CustomerStrategySignInAction>) => {\n            const methodId = options && options.methodId;\n            const meta = { methodId };\n\n            observer.next(createAction(CustomerStrategyActionType.SignInRequested, undefined, meta));\n\n            this._strategyRegistry.get(methodId)\n                .signIn(credentials, options)\n                .then(() => {\n                    observer.next(createAction(CustomerStrategyActionType.SignInSucceeded, undefined, meta));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(CustomerStrategyActionType.SignInFailed, error, meta));\n                });\n        });\n    }\n\n    signOut(options?: CustomerRequestOptions): Observable<CustomerStrategySignOutAction> {\n        return Observable.create((observer: Observer<CustomerStrategySignOutAction>) => {\n            const methodId = options && options.methodId;\n            const meta = { methodId };\n\n            observer.next(createAction(CustomerStrategyActionType.SignOutRequested, undefined, meta));\n\n            this._strategyRegistry.get(methodId)\n                .signOut(options)\n                .then(() => {\n                    observer.next(createAction(CustomerStrategyActionType.SignOutSucceeded, undefined, meta));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(CustomerStrategyActionType.SignOutFailed, error, meta));\n                });\n        });\n    }\n\n    initialize(options?: CustomerInitializeOptions): Observable<CustomerStrategyInitializeAction> {\n        return Observable.create((observer: Observer<CustomerStrategyInitializeAction>) => {\n            const methodId = options && options.methodId;\n            const meta = { methodId };\n\n            observer.next(createAction(CustomerStrategyActionType.InitializeRequested, undefined, meta));\n\n            this._strategyRegistry.get(methodId)\n                .initialize(options)\n                .then(() => {\n                    observer.next(createAction(CustomerStrategyActionType.InitializeSucceeded, undefined, meta));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(CustomerStrategyActionType.InitializeFailed, error, meta));\n                });\n        });\n    }\n\n    deinitialize(options?: CustomerRequestOptions): Observable<CustomerStrategyDeinitializeAction> {\n        return Observable.create((observer: Observer<CustomerStrategyDeinitializeAction>) => {\n            const methodId = options && options.methodId;\n            const meta = { methodId };\n\n            observer.next(createAction(CustomerStrategyActionType.DeinitializeRequested, undefined, meta));\n\n            this._strategyRegistry.get(methodId)\n                .deinitialize(options)\n                .then(() => {\n                    observer.next(createAction(CustomerStrategyActionType.DeinitializeSucceeded, undefined, meta));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(CustomerStrategyActionType.DeinitializeFailed, error, meta));\n                });\n        });\n    }\n\n    widgetInteraction(method: () => Promise<any>, options?: CustomerRequestOptions): Observable<CustomerStrategyWidgetAction> {\n        return Observable.create((observer: Observer<CustomerStrategyWidgetAction>) => {\n            const methodId = options && options.methodId;\n            const meta = { methodId };\n\n            observer.next(createAction(CustomerStrategyActionType.WidgetInteractionStarted, undefined, meta));\n\n            method().then(() => {\n                observer.next(createAction(CustomerStrategyActionType.WidgetInteractionFinished, undefined, meta));\n                observer.complete();\n            })\n            .catch(error => {\n                observer.error(createErrorAction(CustomerStrategyActionType.WidgetInteractionFailed, error, meta));\n            });\n        });\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { StandardError } from '../../../common/error/errors';\n\nimport {\n    BraintreeClientCreator,\n    BraintreeDataCollectorCreator,\n    BraintreeHostWindow,\n    BraintreePaypalCheckoutCreator,\n    BraintreePaypalCreator,\n    BraintreeThreeDSecureCreator,\n    BraintreeVisaCheckoutCreator,\n} from './braintree';\n\nexport default class BraintreeScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        private _window: BraintreeHostWindow = window\n    ) {}\n\n    loadClient(): Promise<BraintreeClientCreator> {\n        return this._scriptLoader\n            .loadScript('//js.braintreegateway.com/web/3.15.0/js/client.min.js')\n            .then(() => {\n                if (!this._window.braintree || !this._window.braintree.client) {\n                    throw new StandardError();\n                }\n\n                return this._window.braintree.client;\n            });\n    }\n\n    load3DS(): Promise<BraintreeThreeDSecureCreator> {\n        return this._scriptLoader\n            .loadScript('//js.braintreegateway.com/web/3.15.0/js/three-d-secure.min.js')\n            .then(() => {\n                if (!this._window.braintree || !this._window.braintree.threeDSecure) {\n                    throw new StandardError();\n                }\n\n                return this._window.braintree.threeDSecure;\n            });\n    }\n\n    loadDataCollector(): Promise<BraintreeDataCollectorCreator> {\n        return this._scriptLoader\n            .loadScript('//js.braintreegateway.com/web/3.15.0/js/data-collector.min.js')\n            .then(() => {\n                if (!this._window.braintree || !this._window.braintree.dataCollector) {\n                    throw new StandardError();\n                }\n\n                return this._window.braintree.dataCollector;\n            });\n    }\n\n    loadPaypal(): Promise<BraintreePaypalCreator> {\n        return this._scriptLoader\n            .loadScript('//js.braintreegateway.com/web/3.15.0/js/paypal.min.js')\n            .then(() => {\n                if (!this._window.braintree || !this._window.braintree.paypal) {\n                    throw new StandardError();\n                }\n\n                return this._window.braintree.paypal;\n            });\n    }\n\n    loadPaypalCheckout(): Promise<BraintreePaypalCheckoutCreator> {\n        return this._scriptLoader\n            .loadScript('//js.braintreegateway.com/web/3.15.0/js/paypal-checkout.min.js')\n            .then(() => {\n                if (!this._window.braintree || !this._window.braintree.paypalCheckout) {\n                    throw new StandardError();\n                }\n\n                return this._window.braintree.paypalCheckout;\n            });\n    }\n\n    loadVisaCheckout(): Promise<BraintreeVisaCheckoutCreator> {\n        return this._scriptLoader\n            .loadScript('//js.braintreegateway.com/web/3.15.0/js/visa-checkout.min.js')\n            .then(() => {\n                if (!this._window.braintree || !this._window.braintree.visaCheckout) {\n                    throw new StandardError();\n                }\n\n                return this._window.braintree.visaCheckout;\n            });\n    }\n}\n","import { NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\n\nimport {\n    BraintreeClient,\n    BraintreeDataCollector,\n    BraintreeModule,\n    BraintreePaypal,\n    BraintreePaypalCheckout,\n    BraintreeThreeDSecure,\n    BraintreeVisaCheckout,\n} from './braintree';\nimport BraintreeScriptLoader from './braintree-script-loader';\n\nexport default class BraintreeSDKCreator {\n    private _client?: Promise<BraintreeClient>;\n    private _3ds?: Promise<BraintreeThreeDSecure>;\n    private _paypal?: Promise<BraintreePaypal>;\n    private _paypalCheckout?: Promise<BraintreePaypalCheckout>;\n    private _clientToken?: string;\n    private _visaCheckout?: Promise<BraintreeVisaCheckout>;\n    private _dataCollectors: {\n        default?: Promise<BraintreeDataCollector>,\n        paypal?: Promise<BraintreeDataCollector>,\n    } = {};\n\n    constructor(\n        private _braintreeScriptLoader: BraintreeScriptLoader\n    ) {}\n\n    initialize(clientToken: string) {\n        this._clientToken = clientToken;\n    }\n\n    getClient(): Promise<BraintreeClient> {\n        if (!this._clientToken) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        if (!this._client) {\n            this._client = this._braintreeScriptLoader.loadClient()\n                .then(client => client.create({ authorization: this._clientToken }));\n        }\n\n        return this._client;\n    }\n\n    getPaypal(): Promise<BraintreePaypal> {\n        if (!this._paypal) {\n            this._paypal = Promise.all([\n                this.getClient(),\n                this._braintreeScriptLoader.loadPaypal(),\n            ])\n            .then(([client, paypal]) => paypal.create({ client }));\n        }\n\n        return this._paypal;\n    }\n\n    getPaypalCheckout(): Promise<BraintreePaypalCheckout> {\n        if (!this._paypalCheckout) {\n            this._paypalCheckout = Promise.all([\n                this.getClient(),\n                this._braintreeScriptLoader.loadPaypalCheckout(),\n            ])\n                .then(([client, paypalCheckout]) => paypalCheckout.create({ client }));\n        }\n\n        return this._paypalCheckout;\n    }\n\n    get3DS(): Promise<BraintreeThreeDSecure> {\n        if (!this._3ds) {\n            this._3ds = Promise.all([\n                this.getClient(),\n                this._braintreeScriptLoader.load3DS(),\n            ])\n            .then(([client, threeDSecure]) => threeDSecure.create({ client }));\n        }\n\n        return this._3ds;\n    }\n\n    getDataCollector(options?: { paypal: boolean }): Promise<BraintreeDataCollector> {\n        const cacheKey = options && options.paypal ? 'paypal' : 'default';\n        let cached = this._dataCollectors[cacheKey];\n\n        if (!cached) {\n            cached = Promise.all([\n                this.getClient(),\n                this._braintreeScriptLoader.loadDataCollector(),\n            ])\n            .then(([client, dataCollector]) => dataCollector.create({ client, kount: true, ...options }))\n            .catch(error => {\n                if (error && error.code === 'DATA_COLLECTOR_KOUNT_NOT_ENABLED') {\n                    return { deviceData: undefined, teardown: () => Promise.resolve() };\n                }\n\n                throw error;\n            });\n\n            this._dataCollectors[cacheKey] = cached;\n        }\n\n        return cached;\n    }\n\n    getVisaCheckout(): Promise<BraintreeVisaCheckout> {\n        if (!this._visaCheckout) {\n            this._visaCheckout = Promise.all([\n                this.getClient(),\n                this._braintreeScriptLoader.loadVisaCheckout(),\n            ])\n            .then(([client, visaCheckout]) => visaCheckout.create({ client }));\n        }\n\n        return this._visaCheckout;\n    }\n\n    teardown(): Promise<void> {\n        return Promise.all([\n            this._teardown(this._3ds),\n            this._teardown(this._dataCollectors.default),\n            this._teardown(this._dataCollectors.paypal),\n            this._teardown(this._visaCheckout),\n        ]).then(() => {\n            this._3ds = undefined;\n            this._visaCheckout = undefined;\n            this._dataCollectors = {};\n        });\n    }\n\n    private _teardown(module?: Promise<BraintreeModule>) {\n        return module ?\n            module.then(mod => mod.teardown()) :\n            Promise.resolve();\n    }\n}\n","import { createAction, ThunkAction } from '@bigcommerce/data-store';\nimport { concat } from 'rxjs/observable/concat';\nimport { from } from 'rxjs/observable/from';\nimport { of } from 'rxjs/observable/of';\nimport { catchError, switchMap } from 'rxjs/operators';\n\nimport { CheckoutActionCreator, InternalCheckoutSelectors } from '../checkout';\nimport { throwErrorAction } from '../common/error';\nimport { RequestOptions } from '../common/http-request';\n\nimport { CustomerActionType, SignInCustomerAction, SignOutCustomerAction } from './customer-actions';\nimport CustomerCredentials from './customer-credentials';\nimport CustomerRequestSender from './customer-request-sender';\n\nexport default class CustomerActionCreator {\n    constructor(\n        private _customerRequestSender: CustomerRequestSender,\n        private _checkoutActionCreator: CheckoutActionCreator\n    ) {}\n\n    signInCustomer(\n        credentials: CustomerCredentials,\n        options?: RequestOptions\n    ): ThunkAction<SignInCustomerAction, InternalCheckoutSelectors> {\n        return store => concat(\n            of(createAction(CustomerActionType.SignInCustomerRequested)),\n            from(this._customerRequestSender.signInCustomer(credentials, options))\n                .pipe(\n                    switchMap(({ body }) => concat(\n                        this._checkoutActionCreator.loadCurrentCheckout(options)(store),\n                        of(createAction(CustomerActionType.SignInCustomerSucceeded, body.data))\n                    ))\n                )\n        ).pipe(\n            catchError(error => throwErrorAction(CustomerActionType.SignInCustomerFailed, error))\n        );\n    }\n\n    signOutCustomer(\n        options?: RequestOptions\n    ): ThunkAction<SignOutCustomerAction, InternalCheckoutSelectors> {\n        return store => concat(\n            of(createAction(CustomerActionType.SignOutCustomerRequested)),\n            from(this._customerRequestSender.signOutCustomer(options))\n                .pipe(\n                    switchMap(({ body }) => concat(\n                        this._checkoutActionCreator.loadCurrentCheckout(options)(store),\n                        of(createAction(CustomerActionType.SignOutCustomerSucceeded, body.data))\n                    ))\n                )\n        ).pipe(\n            catchError(error => throwErrorAction(CustomerActionType.SignOutCustomerFailed, error))\n        );\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { RequestOptions } from '../common/http-request';\n\nimport CustomerCredentials from './customer-credentials';\nimport { InternalCustomerResponseBody } from './internal-customer-responses';\n\nexport default class CustomerRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    signInCustomer(credentials: CustomerCredentials, { timeout }: RequestOptions = {}): Promise<Response<InternalCustomerResponseBody>> {\n        const url = '/internalapi/v1/checkout/customer';\n\n        return this._requestSender.post(url, { timeout, body: credentials });\n    }\n\n    signOutCustomer({ timeout }: RequestOptions = {}): Promise<Response<InternalCustomerResponseBody>> {\n        const url = '/internalapi/v1/checkout/customer';\n\n        return this._requestSender.delete(url, { timeout });\n    }\n}\n","import { mapToInternalAddress } from '../address';\nimport { BillingAddress } from '../billing';\n\nimport { Customer } from '.';\nimport InternalCustomer from './internal-customer';\n\nexport default function mapToInternalCustomer(customer: Customer, billingAddress: BillingAddress): InternalCustomer {\n    const firstName = customer.firstName || billingAddress.firstName || '';\n    const lastName = customer.lastName || billingAddress.lastName || '';\n\n    return {\n        addresses: (customer.addresses || []).map(address => mapToInternalAddress(address)),\n        customerId: customer.id,\n        isGuest: customer.isGuest,\n        storeCredit: customer.storeCredit,\n        email: customer.email || billingAddress.email || '',\n        firstName,\n        lastName,\n        name: customer.fullName || [firstName, lastName].join(' '),\n    };\n}\n","export default class AmountTransformer {\n    constructor(private _dp: number) {}\n\n    toInteger(amount: number): number {\n        return Math.floor(amount * Math.pow(10, this._dp));\n    }\n}\n","import Coupon from './coupon';\nimport InternalCoupon from './internal-coupon';\n\nconst couponTypes = [\n    'per_item_discount',\n    'percentage_discount',\n    'per_total_discount',\n    'shipping_discount',\n    'free_shipping',\n];\n\nexport default function mapToInternalCoupon(coupon: Coupon): InternalCoupon {\n    return {\n        code: coupon.code,\n        discount: coupon.displayName,\n        discountType: couponTypes.indexOf(coupon.couponType),\n    };\n}\n","import GiftCertificate from './gift-certificate';\nimport InternalGiftCertificate from './internal-gift-certificate';\n\nexport default function mapToInternalGiftCertificate(giftCertificate: GiftCertificate): InternalGiftCertificate {\n    return {\n        code: giftCertificate.code,\n        discountedAmount: giftCertificate.used,\n        remainingBalance: giftCertificate.remaining,\n        giftCertificate: {\n            balance: giftCertificate.balance,\n            code: giftCertificate.code,\n            purchaseDate: giftCertificate.purchaseDate,\n        },\n    };\n}\n","import { filter, find, keyBy, reduce } from 'lodash';\n\nimport { AmountTransformer, LineItem } from '../cart';\nimport { mapToInternalLineItems } from '../cart';\nimport { Checkout } from '../checkout';\nimport { mapToInternalCoupon } from '../coupon';\nimport { HOSTED } from '../payment';\n\nimport InternalOrder, { InternalGiftCertificateList, InternalIncompleteOrder, InternalOrderPayment, InternalSocialDataList } from './internal-order';\nimport Order, { GatewayOrderPayment, GiftCertificateOrderPayment, OrderPayment, OrderPayments } from './order';\nimport { OrderMetaState } from './order-state';\n\nexport default function mapToInternalOrder(order: Order, orderMeta: OrderMetaState = {}): InternalOrder {\n    const decimalPlaces = order.currency.decimalPlaces;\n    const amountTransformer = new AmountTransformer(decimalPlaces);\n\n    return {\n        id: order.orderId,\n        items: mapToInternalLineItems(order.lineItems, order.currency.decimalPlaces, 'productId'),\n        orderId: order.orderId,\n        currency: order.currency.code,\n        customerCanBeCreated: order.customerCanBeCreated,\n        payment: mapToInteralOrderPayment(order.payments, orderMeta.payment),\n        subtotal: {\n            amount: order.baseAmount,\n            integerAmount: amountTransformer.toInteger(order.baseAmount),\n        },\n        coupon: {\n            discountedAmount: reduce(order.coupons, (sum, coupon) => {\n                return sum + coupon.discountedAmount;\n            }, 0),\n            coupons: order.coupons.map(mapToInternalCoupon),\n        },\n        discount: {\n            amount: order.discountAmount,\n            integerAmount: amountTransformer.toInteger(order.discountAmount),\n        },\n        token: orderMeta.orderToken,\n        callbackUrl: orderMeta.callbackUrl,\n        discountNotifications: [],\n        giftCertificate: mapToGiftCertificates(order.payments),\n        socialData: mapToInternalSocialDataList(order),\n        status: order.status,\n        hasDigitalItems: order.hasDigitalItems,\n        isDownloadable: order.isDownloadable,\n        isComplete: order.isComplete,\n        shipping: {\n            amount: order.shippingCostTotal,\n            integerAmount: amountTransformer.toInteger(order.shippingCostTotal),\n            amountBeforeDiscount: order.shippingCostBeforeDiscount,\n            integerAmountBeforeDiscount: amountTransformer.toInteger(order.shippingCostBeforeDiscount),\n        },\n        storeCredit: {\n            amount: mapToStoreCredit(order.payments),\n        },\n        taxes: order.taxes,\n        handling: {\n            amount: order.handlingCostTotal,\n            integerAmount: amountTransformer.toInteger(order.handlingCostTotal),\n        },\n        grandTotal: {\n            amount: order.orderAmount,\n            integerAmount: order.orderAmountAsInteger,\n        },\n    };\n}\n\nexport function mapToInternalIncompleteOrder(checkout: Checkout): InternalIncompleteOrder {\n    const payment = find(checkout.payments, { providerType: HOSTED });\n\n    return {\n        orderId: null,\n        isComplete: false,\n        payment: !payment ? {} : {\n            id: payment.providerId,\n            gateway: payment.gatewayId,\n            status: mapToInternalPaymentStatus(payment.detail.step),\n        },\n    };\n}\n\nfunction mapToInternalPaymentStatus(status: string): string {\n    return `PAYMENT_STATUS_${status}`;\n}\n\nfunction mapToStoreCredit(payments?: OrderPayments): number {\n    const item = find(payments, { providerId: 'storecredit' });\n\n    return item ? item.amount : 0;\n}\n\nfunction mapToGiftCertificates(payments?: OrderPayments): InternalGiftCertificateList {\n    const items = filter(payments, { providerId: 'giftcertificate' }) as GiftCertificateOrderPayment[];\n\n    return {\n        totalDiscountedAmount: reduce(items, (sum, item) => item.amount + sum, 0),\n        appliedGiftCertificates: keyBy(items.map(item => ({\n            code: item.detail.code,\n            discountedAmount: item.amount,\n            remainingBalance: item.detail.remaining,\n            giftCertificate: {\n                balance: item.amount + item.detail.remaining,\n                code: item.detail.code,\n                purchaseDate: '',\n            },\n        })), 'code'),\n    };\n}\n\nfunction mapToInteralOrderPayment(payments?: OrderPayments, payment: InternalOrderPayment = {}): InternalOrderPayment {\n    const item = find(payments, isDefaultOrderPayment) as GatewayOrderPayment;\n\n    if (!item) {\n        return {};\n    }\n\n    return {\n        id: item.providerId,\n        status: mapToInternalPaymentStatus(item.detail.step),\n        helpText: item.detail.instructions,\n        returnUrl: payment.returnUrl,\n    };\n}\n\nfunction isDefaultOrderPayment(payment: OrderPayment): payment is GatewayOrderPayment {\n    return payment.providerId !== 'giftcertificate' && payment.providerId !== 'storecredit';\n}\n\nfunction mapToInternalSocialDataList(order: Order): { [itemId: string]: InternalSocialDataList } | undefined {\n    const socialDataObject: { [itemId: string]: InternalSocialDataList } = {};\n    const items = [\n        ...order.lineItems.physicalItems,\n        ...order.lineItems.digitalItems,\n    ];\n\n    items.forEach(item => {\n        socialDataObject[item.id] = mapToInternalSocialData(item);\n    });\n\n    return socialDataObject;\n}\n\nfunction mapToInternalSocialData(lineItem: LineItem): InternalSocialDataList {\n    const codes = ['fb', 'tw', 'gp'];\n\n    return codes.reduce((socialData, code) => {\n        const item = lineItem.socialMedia && lineItem.socialMedia.find(item => item.code === code);\n\n        if (!item) {\n            return socialData;\n        }\n\n        socialData[code] = {\n            name: lineItem.name,\n            description: lineItem.name,\n            image: lineItem.imageUrl,\n            url: item.link,\n            shareText: item.text,\n            sharingLink: item.link,\n            channelName: item.channel,\n            channelCode: item.code,\n        };\n\n        return socialData;\n    }, {} as InternalSocialDataList);\n}\n","module.exports = require(\"iframe-resizer\");","export default interface ShippingStrategyState {\n    errors: ShippingStrategyErrorsState;\n    statuses: ShippingStrategyStatusesState;\n}\n\nexport interface ShippingStrategyErrorsState {\n    deinitializeError?: Error;\n    deinitializeMethodId?: string;\n    initializeError?: Error;\n    initializeMethodId?: string;\n    updateAddressError?: Error;\n    updateAddressMethodId?: string;\n    selectOptionError?: Error;\n    selectOptionMethodId?: string;\n}\n\nexport interface ShippingStrategyStatusesState {\n    deinitializeMethodId?: string;\n    initializeMethodId?: string;\n    isDeinitializing?: boolean;\n    isInitializing?: boolean;\n    isUpdatingAddress?: boolean;\n    isSelectingOption?: boolean;\n    updateAddressMethodId?: string;\n    selectOptionMethodId?: string;\n}\n\nexport const DEFAULT_STATE: ShippingStrategyState = {\n    errors: {},\n    statuses: {},\n};\n","import { combineReducers } from '@bigcommerce/data-store';\n\nimport { ShippingStrategyAction, ShippingStrategyActionType } from './shipping-strategy-actions';\nimport ShippingStrategyState, { DEFAULT_STATE, ShippingStrategyErrorsState, ShippingStrategyStatusesState } from './shipping-strategy-state';\n\nexport default function shippingStrategyReducer(\n    state: ShippingStrategyState = DEFAULT_STATE,\n    action: ShippingStrategyAction\n): ShippingStrategyState {\n    const reducer = combineReducers<ShippingStrategyState, ShippingStrategyAction>({\n        errors: errorsReducer,\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction errorsReducer(\n    errors: ShippingStrategyErrorsState = DEFAULT_STATE.errors,\n    action: ShippingStrategyAction\n): ShippingStrategyErrorsState {\n    switch (action.type) {\n    case ShippingStrategyActionType.InitializeRequested:\n    case ShippingStrategyActionType.InitializeSucceeded:\n        return {\n            ...errors,\n            initializeError: undefined,\n            initializeMethodId: undefined,\n        };\n\n    case ShippingStrategyActionType.InitializeFailed:\n        return {\n            ...errors,\n            initializeError: action.payload,\n            initializeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case ShippingStrategyActionType.DeinitializeRequested:\n    case ShippingStrategyActionType.DeinitializeSucceeded:\n        return {\n            ...errors,\n            deinitializeError: undefined,\n            deinitializeMethodId: undefined,\n        };\n\n    case ShippingStrategyActionType.DeinitializeFailed:\n        return {\n            ...errors,\n            deinitializeError: action.payload,\n            deinitializeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case ShippingStrategyActionType.UpdateAddressRequested:\n    case ShippingStrategyActionType.UpdateAddressSucceeded:\n        return {\n            ...errors,\n            updateAddressError: undefined,\n            updateAddressMethodId: undefined,\n        };\n\n    case ShippingStrategyActionType.UpdateAddressFailed:\n        return {\n            ...errors,\n            updateAddressError: action.payload,\n            updateAddressMethodId: action.meta && action.meta.methodId,\n        };\n\n    case ShippingStrategyActionType.SelectOptionRequested:\n    case ShippingStrategyActionType.SelectOptionSucceeded:\n        return {\n            ...errors,\n            selectOptionError: undefined,\n            selectOptionMethodId: undefined,\n        };\n\n    case ShippingStrategyActionType.SelectOptionFailed:\n        return {\n            ...errors,\n            selectOptionError: action.payload,\n            selectOptionMethodId: action.meta && action.meta.methodId,\n        };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: ShippingStrategyStatusesState = DEFAULT_STATE.statuses,\n    action: ShippingStrategyAction\n): ShippingStrategyStatusesState {\n    switch (action.type) {\n    case ShippingStrategyActionType.InitializeRequested:\n        return {\n            ...statuses,\n            isInitializing: true,\n            initializeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case ShippingStrategyActionType.InitializeFailed:\n    case ShippingStrategyActionType.InitializeSucceeded:\n        return {\n            ...statuses,\n            isInitializing: false,\n            initializeMethodId: undefined,\n        };\n\n    case ShippingStrategyActionType.DeinitializeRequested:\n        return {\n            ...statuses,\n            isDeinitializing: true,\n            deinitializeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case ShippingStrategyActionType.DeinitializeFailed:\n    case ShippingStrategyActionType.DeinitializeSucceeded:\n        return {\n            ...statuses,\n            isDeinitializing: false,\n            deinitializeMethodId: undefined,\n        };\n\n    case ShippingStrategyActionType.UpdateAddressRequested:\n        return {\n            ...statuses,\n            isUpdatingAddress: true,\n            updateAddressMethodId: action.meta && action.meta.methodId,\n        };\n\n    case ShippingStrategyActionType.UpdateAddressFailed:\n    case ShippingStrategyActionType.UpdateAddressSucceeded:\n        return {\n            ...statuses,\n            isUpdatingAddress: false,\n            updateAddressMethodId: undefined,\n        };\n\n    case ShippingStrategyActionType.SelectOptionRequested:\n        return {\n            ...statuses,\n            isSelectingOption: true,\n            selectOptionMethodId: action.meta && action.meta.methodId,\n        };\n\n    case ShippingStrategyActionType.SelectOptionFailed:\n    case ShippingStrategyActionType.SelectOptionSucceeded:\n        return {\n            ...statuses,\n            isSelectingOption: false,\n            selectOptionMethodId: undefined,\n        };\n\n    default:\n        return statuses;\n    }\n}\n","export default interface CustomerStrategyState {\n    errors: CustomerStrategyErrorsState;\n    statuses: CustomerStrategyStatusesState;\n}\n\nexport interface CustomerStrategyErrorsState {\n    deinitializeError?: Error;\n    deinitializeMethodId?: string;\n    initializeError?: Error;\n    initializeMethodId?: string;\n    signInError?: Error;\n    signInMethodId?: string;\n    signOutError?: Error;\n    signOutMethodId?: string;\n    widgetInteractionError?: Error;\n    widgetInteractionMethodId?: string;\n}\n\nexport interface CustomerStrategyStatusesState {\n    deinitializeMethodId?: string;\n    initializeMethodId?: string;\n    isDeinitializing?: boolean;\n    isInitializing?: boolean;\n    isSigningIn?: boolean;\n    isSigningOut?: boolean;\n    signInMethodId?: string;\n    signOutMethodId?: string;\n    isWidgetInteracting?: boolean;\n    widgetInteractionMethodId?: string;\n}\n\nexport const DEFAULT_STATE: CustomerStrategyState = {\n    errors: {},\n    statuses: {},\n};\n","import { combineReducers } from '@bigcommerce/data-store';\n\nimport { CustomerStrategyAction, CustomerStrategyActionType } from './customer-strategy-actions';\nimport CustomerStrategyState, { CustomerStrategyErrorsState, CustomerStrategyStatusesState, DEFAULT_STATE } from './customer-strategy-state';\n\nexport default function customerStrategyReducer(\n    state: CustomerStrategyState = DEFAULT_STATE,\n    action: CustomerStrategyAction\n): CustomerStrategyState {\n    const reducer = combineReducers<CustomerStrategyState, CustomerStrategyAction>({\n        errors: errorsReducer,\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction errorsReducer(\n    errors: CustomerStrategyErrorsState = DEFAULT_STATE.errors,\n    action: CustomerStrategyAction\n): CustomerStrategyErrorsState {\n    switch (action.type) {\n    case CustomerStrategyActionType.InitializeRequested:\n    case CustomerStrategyActionType.InitializeSucceeded:\n        return {\n            ...errors,\n            initializeError: undefined,\n            initializeMethodId: undefined,\n        };\n\n    case CustomerStrategyActionType.InitializeFailed:\n        return {\n            ...errors,\n            initializeError: action.payload,\n            initializeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case CustomerStrategyActionType.DeinitializeRequested:\n    case CustomerStrategyActionType.DeinitializeSucceeded:\n        return {\n            ...errors,\n            deinitializeError: undefined,\n            deinitializeMethodId: undefined,\n        };\n\n    case CustomerStrategyActionType.DeinitializeFailed:\n        return {\n            ...errors,\n            deinitializeError: action.payload,\n            deinitializeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case CustomerStrategyActionType.SignInRequested:\n    case CustomerStrategyActionType.SignInSucceeded:\n        return {\n            ...errors,\n            signInError: undefined,\n            signInMethodId: undefined,\n        };\n\n    case CustomerStrategyActionType.SignInFailed:\n        return {\n            ...errors,\n            signInError: action.payload,\n            signInMethodId: action.meta && action.meta.methodId,\n        };\n\n    case CustomerStrategyActionType.SignOutRequested:\n    case CustomerStrategyActionType.SignOutSucceeded:\n        return {\n            ...errors,\n            signOutError: undefined,\n            signOutMethodId: undefined,\n        };\n\n    case CustomerStrategyActionType.SignOutFailed:\n        return {\n            ...errors,\n            signOutError: action.payload,\n            signOutMethodId: action.meta && action.meta.methodId,\n        };\n\n    case CustomerStrategyActionType.WidgetInteractionStarted:\n    case CustomerStrategyActionType.WidgetInteractionFinished:\n        return {\n            ...errors,\n            widgetInteractionError: undefined,\n            widgetInteractionMethodId: undefined,\n        };\n\n    case CustomerStrategyActionType.WidgetInteractionFailed:\n        return {\n            ...errors,\n            widgetInteractionError: action.payload,\n            widgetInteractionMethodId: action.meta.methodId,\n        };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: CustomerStrategyStatusesState = DEFAULT_STATE.statuses,\n    action: CustomerStrategyAction\n): CustomerStrategyStatusesState {\n    switch (action.type) {\n    case CustomerStrategyActionType.InitializeRequested:\n        return {\n            ...statuses,\n            isInitializing: true,\n            initializeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case CustomerStrategyActionType.InitializeFailed:\n    case CustomerStrategyActionType.InitializeSucceeded:\n        return {\n            ...statuses,\n            isInitializing: false,\n            initializeMethodId: undefined,\n        };\n\n    case CustomerStrategyActionType.DeinitializeRequested:\n        return {\n            ...statuses,\n            isDeinitializing: true,\n            deinitializeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case CustomerStrategyActionType.DeinitializeFailed:\n    case CustomerStrategyActionType.DeinitializeSucceeded:\n        return {\n            ...statuses,\n            isDeinitializing: false,\n            deinitializeMethodId: undefined,\n        };\n\n    case CustomerStrategyActionType.SignInRequested:\n        return {\n            ...statuses,\n            isSigningIn: true,\n            signInMethodId: action.meta && action.meta.methodId,\n        };\n\n    case CustomerStrategyActionType.SignInFailed:\n    case CustomerStrategyActionType.SignInSucceeded:\n        return {\n            ...statuses,\n            isSigningIn: false,\n            signInMethodId: undefined,\n        };\n\n    case CustomerStrategyActionType.SignOutRequested:\n        return {\n            ...statuses,\n            isSigningOut: true,\n            signOutMethodId: action.meta && action.meta.methodId,\n        };\n\n    case CustomerStrategyActionType.SignOutFailed:\n    case CustomerStrategyActionType.SignOutSucceeded:\n        return {\n            ...statuses,\n            isSigningOut: false,\n            signOutMethodId: undefined,\n        };\n\n    case CustomerStrategyActionType.WidgetInteractionStarted:\n        return {\n            ...statuses,\n            isWidgetInteracting: true,\n            widgetInteractionMethodId: action.meta.methodId,\n         };\n\n    case CustomerStrategyActionType.WidgetInteractionFinished:\n    case CustomerStrategyActionType.WidgetInteractionFailed:\n         return {\n            ...statuses,\n            isWidgetInteracting: false,\n            widgetInteractionMethodId: undefined,\n         };\n\n    default:\n        return statuses;\n    }\n}\n","import { isBillingAddressLike } from '../billing';\nimport BillingAddress from '../billing/billing-address';\nimport { Consignment } from '../shipping';\n\nimport Address from './address';\nimport InternalAddress from './internal-address';\n\nexport default function mapToInternalAddress(address: Address | BillingAddress, consignments?: Consignment[]): InternalAddress {\n    let addressId;\n\n    if (isBillingAddressLike(address)) {\n        addressId = address.id;\n    } else if (consignments && consignments.length) {\n        addressId = consignments[0].id;\n    }\n\n    return {\n        id: addressId,\n        firstName: address.firstName,\n        lastName: address.lastName,\n        company: address.company,\n        addressLine1: address.address1,\n        addressLine2: address.address2,\n        city: address.city,\n        province: address.stateOrProvince,\n        provinceCode: address.stateOrProvinceCode,\n        postCode: address.postalCode,\n        country: address.country,\n        countryCode: address.countryCode,\n        phone: address.phone,\n        customFields: address.customFields,\n    };\n}\n","import Address from '../address/address';\n\nimport BillingAddress from './billing-address';\n\nexport default function isBillingAddressLike(address: Address): address is BillingAddress {\n    const billingAddress = address as BillingAddress;\n\n    return typeof billingAddress.id !== 'undefined';\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport { RequestError } from '../../common/error/errors';\n\nexport default class PaymentMethodInvalidError extends RequestError {\n    constructor(response?: Response) {\n        super(response, 'There is a problem processing your payment. Please try again later.');\n\n        this.type = 'payment_method_invalid';\n    }\n}\n","/**\n * Decorates a class or a method by binding all its prototype methods or itself\n * to the calling instance respectively.\n */\nexport default function bindDecorator<T extends Method>(target: object, key: string, descriptor: TypedPropertyDescriptor<T>): TypedPropertyDescriptor<T>;\nexport default function bindDecorator<T extends Constructor<object>>(target: T): T;\nexport default function bindDecorator(target: any, key?: any, descriptor?: any): any {\n    if (!key || !descriptor) {\n        return bindClassDecorator(target);\n    }\n\n    return bindMethodDecorator(target, key, descriptor);\n}\n\n/**\n * Decorates a class by binding all its prototype methods to the calling\n * instance.\n */\nexport function bindClassDecorator<T extends Constructor<object>>(target: T): T {\n    const decoratedTarget = class extends target {};\n\n    Object.getOwnPropertyNames(target.prototype)\n        .forEach(key => {\n            const descriptor = Object.getOwnPropertyDescriptor(target.prototype, key);\n\n            if (!descriptor || key === 'constructor') {\n                return;\n            }\n\n            Object.defineProperty(\n                decoratedTarget.prototype,\n                key,\n                bindMethodDecorator(target.prototype, key, descriptor)\n            );\n        });\n\n    return decoratedTarget;\n}\n\n/**\n * Decorates a method by binding it to the calling instance.\n */\nexport function bindMethodDecorator<T extends Method>(target: object, key: string, descriptor: TypedPropertyDescriptor<T>): TypedPropertyDescriptor<T> {\n    if (typeof descriptor.value !== 'function') {\n        return descriptor;\n    }\n\n    let method: T = descriptor.value;\n\n    return {\n        get() {\n            const boundMethod = method.bind(this);\n\n            Object.defineProperty(this, key, {\n                ...descriptor,\n                value: boundMethod,\n            });\n\n            return boundMethod;\n        },\n        set(value) {\n            method = value;\n        },\n    };\n}\n\nexport type Constructor<T> = new (...args: any[]) => T;\nexport type Method = (...args: any[]) => any;\n","export default function isPrivate(key: string): boolean {\n    return `${key}`.indexOf('$$') === 0 || `${key}`.indexOf('_') === 0;\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { ContentType, RequestOptions } from '../common/http-request';\n\nimport InternalOrderRequestBody from './internal-order-request-body';\nimport { InternalOrderResponseBody } from './internal-order-responses';\nimport Order from './order';\n\nexport default class OrderRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    loadOrder(orderId: number, { timeout }: RequestOptions = {}): Promise<Response<Order>> {\n        const url = `/api/storefront/orders/${orderId}`;\n        const headers = { Accept: ContentType.JsonV1 };\n        const params = {\n            include: [\n                'payments',\n                'lineItems.physicalItems.socialMedia',\n                'lineItems.physicalItems.options',\n                'lineItems.digitalItems.socialMedia',\n                'lineItems.digitalItems.options',\n            ].join(','),\n        };\n\n        return this._requestSender.get(url, {\n            params,\n            headers,\n            timeout,\n        });\n    }\n\n    submitOrder(body: InternalOrderRequestBody, { timeout }: RequestOptions = {}): Promise<Response<InternalOrderResponseBody>> {\n        const url = '/internalapi/v1/checkout/order';\n\n        return this._requestSender.post(url, { body, timeout });\n    }\n\n    finalizeOrder(orderId: number, { timeout }: RequestOptions = {}): Promise<Response<InternalOrderResponseBody>> {\n        const url = `/internalapi/v1/checkout/order/${orderId}`;\n\n        return this._requestSender.post(url, { timeout });\n    }\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { concat } from 'rxjs/observable/concat';\nimport { defer } from 'rxjs/observable/defer';\nimport { from } from 'rxjs/observable/from';\nimport { of } from 'rxjs/observable/of';\nimport { catchError, switchMap } from 'rxjs/operators';\nimport { Observable } from 'rxjs/Observable';\nimport { Observer } from 'rxjs/Observer';\n\nimport { CheckoutValidator, InternalCheckoutSelectors } from '../checkout';\nimport { throwErrorAction } from '../common/error';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\n\nimport InternalOrderRequestBody from './internal-order-request-body';\nimport { FinalizeOrderAction, LoadOrderAction, LoadOrderPaymentsAction, OrderActionType, SubmitOrderAction } from './order-actions';\nimport OrderRequestBody from './order-request-body';\nimport OrderRequestSender from './order-request-sender';\n\nexport default class OrderActionCreator {\n    constructor(\n        private _orderRequestSender: OrderRequestSender,\n        private _checkoutValidator: CheckoutValidator\n    ) {}\n\n    loadOrder(orderId: number, options?: RequestOptions): Observable<LoadOrderAction> {\n        return new Observable((observer: Observer<LoadOrderAction>) => {\n            observer.next(createAction(OrderActionType.LoadOrderRequested));\n\n            this._orderRequestSender.loadOrder(orderId, options)\n                .then(response => {\n                    observer.next(createAction(OrderActionType.LoadOrderSucceeded, response.body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(OrderActionType.LoadOrderFailed, response));\n                });\n        });\n    }\n\n    // TODO: Remove when checkout does not contain unrelated order data.\n    loadOrderPayments(orderId: number, options?: RequestOptions): Observable<LoadOrderPaymentsAction> {\n        return new Observable((observer: Observer<LoadOrderPaymentsAction>) => {\n            observer.next(createAction(OrderActionType.LoadOrderPaymentsRequested));\n\n            this._orderRequestSender.loadOrder(orderId, options)\n                .then(response => {\n                    observer.next(createAction(OrderActionType.LoadOrderPaymentsSucceeded, response.body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(OrderActionType.LoadOrderPaymentsFailed, response));\n                });\n        });\n    }\n\n    loadCurrentOrder(options?: RequestOptions): ThunkAction<LoadOrderAction, InternalCheckoutSelectors> {\n        return store => defer(() => {\n            const orderId = this._getCurrentOrderId(store.getState());\n\n            if (!orderId) {\n                throw new MissingDataError(MissingDataErrorType.MissingOrderId);\n            }\n\n            return this.loadOrder(orderId, options);\n        });\n    }\n\n    submitOrder(payload: OrderRequestBody, options?: RequestOptions): ThunkAction<SubmitOrderAction, InternalCheckoutSelectors> {\n        return store => concat(\n            of(createAction(OrderActionType.SubmitOrderRequested)),\n            defer(() => {\n                const state = store.getState();\n                const externalSource = state.config.getExternalSource();\n                const checkout = state.checkout.getCheckout();\n\n                if (!checkout) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                }\n\n                return from(\n                    this._checkoutValidator.validate(checkout, options)\n                        .then(() => this._orderRequestSender.submitOrder(this._mapToOrderRequestBody(payload, checkout.customerMessage, externalSource), options))\n                ).pipe(\n                    switchMap(response => concat(\n                        // TODO: Remove once we can submit orders using storefront API\n                        this.loadOrder(response.body.data.order.orderId, options),\n                        of(createAction(OrderActionType.SubmitOrderSucceeded, response.body.data, { ...response.body.meta, token: response.headers.token }))\n                    ))\n                );\n            }).pipe(\n                catchError(error => throwErrorAction(OrderActionType.SubmitOrderFailed, error))\n            )\n        );\n    }\n\n    finalizeOrder(orderId: number, options?: RequestOptions): Observable<FinalizeOrderAction | LoadOrderAction> {\n        return concat(\n            of(createAction(OrderActionType.FinalizeOrderRequested)),\n            from(this._orderRequestSender.finalizeOrder(orderId, options))\n                .pipe(\n                    switchMap(response => concat(\n                        this.loadOrder(orderId, options),\n                        of(createAction(OrderActionType.FinalizeOrderSucceeded, response.body.data))\n                    ))\n                )\n        ).pipe(\n            catchError(error => throwErrorAction(OrderActionType.FinalizeOrderFailed, error))\n        );\n    }\n\n    private _getCurrentOrderId(state: InternalCheckoutSelectors): number | undefined {\n        const order = state.order.getOrder();\n        const checkout = state.checkout.getCheckout();\n\n        return (order && order.orderId) || (checkout && checkout.orderId);\n    }\n\n    private _mapToOrderRequestBody(payload: OrderRequestBody, customerMessage: string, externalSource?: string): InternalOrderRequestBody {\n        const { payment, ...order } = payload;\n\n        if (!payment) {\n            return {\n                ...order,\n                customerMessage,\n                externalSource,\n            };\n        }\n\n        return {\n            ...order,\n            customerMessage,\n            externalSource,\n            payment: {\n                paymentData: payment.paymentData,\n                name: payment.methodId,\n                gateway: payment.gatewayId,\n            },\n        };\n    }\n}\n","import { isEqual } from 'lodash';\n\nimport { PartialDeep } from '../common/types';\n\nimport Cart from './cart';\n\nexport default class CartComparator {\n    isEqual(cartA: Cart, cartB: Cart): boolean {\n        return isEqual(\n            this._normalize(cartA),\n            this._normalize(cartB)\n        );\n    }\n\n    private _normalize(cart: Cart): PartialDeep<Cart> {\n        return {\n            cartAmount: cart.cartAmount,\n            currency: cart.currency,\n            id: cart.id,\n            lineItems: {\n                digitalItems: cart.lineItems.digitalItems.map(item => ({\n                    extendedSalePrice: item.extendedSalePrice,\n                    productId: item.productId,\n                    quantity: item.quantity,\n                    variantId: item.variantId,\n                })),\n                giftCertificates: cart.lineItems.giftCertificates.map(item => ({\n                    amount: item.amount,\n                    recipient: item.recipient,\n                })),\n                physicalItems: cart.lineItems.physicalItems.map(item => ({\n                    extendedSalePrice: item.extendedSalePrice,\n                    productId: item.productId,\n                    quantity: item.quantity,\n                    variantId: item.variantId,\n                    giftWrapping: item.giftWrapping,\n                })),\n            },\n        };\n    }\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { Observable } from 'rxjs/Observable';\nimport { Observer } from 'rxjs/Observer';\n\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\n\nimport { ApplyCouponAction, CouponAction, CouponActionType, RemoveCouponAction } from './coupon-actions';\nimport CouponRequestSender from './coupon-request-sender';\n\nexport default class CouponActionCreator {\n    constructor(\n        private _couponRequestSender: CouponRequestSender\n    ) {}\n\n    applyCoupon(code: string, options?: RequestOptions): ThunkAction<CouponAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<ApplyCouponAction>) => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(CouponActionType.ApplyCouponRequested));\n\n            this._couponRequestSender.applyCoupon(checkout.id, code, options)\n                .then(({ body }) => {\n                    observer.next(createAction(CouponActionType.ApplyCouponSucceeded, body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(CouponActionType.ApplyCouponFailed, response));\n                });\n        });\n    }\n\n    removeCoupon(code: string, options?: RequestOptions): ThunkAction<CouponAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<RemoveCouponAction>) => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(CouponActionType.RemoveCouponRequested));\n\n            this._couponRequestSender.removeCoupon(checkout.id, code, options)\n                .then(({ body }) => {\n                    observer.next(createAction(CouponActionType.RemoveCouponSucceeded, body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(CouponActionType.RemoveCouponFailed, response));\n                });\n        });\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { Checkout, CheckoutDefaultIncludes } from '../checkout';\nimport { ContentType, RequestOptions } from '../common/http-request';\n\nexport default class CouponRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    applyCoupon(checkoutId: string, couponCode: string, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/coupons`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.post(url, {\n            headers,\n            timeout,\n            params: {\n                include: CheckoutDefaultIncludes.join(','),\n            },\n            body: { couponCode },\n        });\n    }\n\n    removeCoupon(checkoutId: string, couponCode: string, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/coupons/${couponCode}`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.delete(url, {\n            headers,\n            timeout,\n            params: {\n                include: CheckoutDefaultIncludes.join(','),\n            },\n        });\n    }\n}\n","import StandardError from './standard-error';\n\nexport default class InvalidArgumentError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Invalid arguments have been provided.');\n\n        this.type = 'invalid_argument';\n    }\n}\n","import { createAction, createErrorAction } from '@bigcommerce/data-store';\nimport { Observable } from 'rxjs/Observable';\nimport { Observer } from 'rxjs/Observer';\n\nimport { RequestOptions } from '../common/http-request';\n\nimport { LoadPaymentMethodsAction, LoadPaymentMethodAction, PaymentMethodActionType } from './payment-method-actions';\nimport PaymentMethodRequestSender from './payment-method-request-sender';\n\nexport default class PaymentMethodActionCreator {\n    constructor(\n        private _requestSender: PaymentMethodRequestSender\n    ) {}\n\n    loadPaymentMethods(options?: RequestOptions): Observable<LoadPaymentMethodsAction> {\n        return Observable.create((observer: Observer<LoadPaymentMethodsAction>) => {\n            observer.next(createAction(PaymentMethodActionType.LoadPaymentMethodsRequested));\n\n            this._requestSender.loadPaymentMethods(options)\n                .then(response => {\n                    const meta = {\n                        deviceSessionId: response.headers['x-device-session-id'],\n                        sessionHash: response.headers['x-session-hash'],\n                    };\n\n                    observer.next(createAction(PaymentMethodActionType.LoadPaymentMethodsSucceeded, response.body, meta));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(PaymentMethodActionType.LoadPaymentMethodsFailed, response));\n                });\n        });\n    }\n\n    loadPaymentMethod(methodId: string, options?: RequestOptions): Observable<LoadPaymentMethodAction> {\n        return Observable.create((observer: Observer<LoadPaymentMethodAction>) => {\n            observer.next(createAction(PaymentMethodActionType.LoadPaymentMethodRequested, undefined, { methodId }));\n\n            this._requestSender.loadPaymentMethod(methodId, options)\n                .then(response => {\n                    observer.next(createAction(PaymentMethodActionType.LoadPaymentMethodSucceeded, response.body, { methodId }));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(PaymentMethodActionType.LoadPaymentMethodFailed, response, { methodId }));\n                });\n        });\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { ContentType, INTERNAL_USE_ONLY, RequestOptions } from '../common/http-request';\n\nimport PaymentMethod from './payment-method';\n\nexport default class PaymentMethodRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    loadPaymentMethods({ timeout }: RequestOptions = {}): Promise<Response<PaymentMethod[]>> {\n        const url = '/api/storefront/payments';\n\n        return this._requestSender.get(url, {\n            timeout,\n            headers: {\n                Accept: ContentType.JsonV1,\n                'X-API-INTERNAL': INTERNAL_USE_ONLY,\n            },\n        });\n    }\n\n    loadPaymentMethod(methodId: string, { timeout }: RequestOptions = {}): Promise<Response<PaymentMethod>> {\n        const url = `/api/storefront/payments/${methodId}`;\n\n        return this._requestSender.get(url, {\n            timeout,\n            headers: {\n                Accept: ContentType.JsonV1,\n                'X-API-INTERNAL': INTERNAL_USE_ONLY,\n            },\n        });\n    }\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { Observable } from 'rxjs/Observable';\nimport { Observer } from 'rxjs/Observer';\n\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\n\nimport { GiftCertificateRequestSender } from '.';\nimport { ApplyGiftCertificateAction, GiftCertificateActionType, RemoveGiftCertificateAction } from './gift-certificate-actions';\n\nexport default class GiftCertificateActionCreator {\n    constructor(\n        private _giftCertificateRequestSender: GiftCertificateRequestSender\n    ) {}\n\n    applyGiftCertificate(giftCertificate: string, options?: RequestOptions): ThunkAction<ApplyGiftCertificateAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<ApplyGiftCertificateAction>) => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(GiftCertificateActionType.ApplyGiftCertificateRequested));\n\n            this._giftCertificateRequestSender.applyGiftCertificate(checkout.id, giftCertificate, options)\n                .then(({ body }) => {\n                    observer.next(createAction(GiftCertificateActionType.ApplyGiftCertificateSucceeded, body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(GiftCertificateActionType.ApplyGiftCertificateFailed, response));\n                });\n        });\n    }\n\n    removeGiftCertificate(giftCertificate: string, options?: RequestOptions): ThunkAction<RemoveGiftCertificateAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<RemoveGiftCertificateAction>) => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(GiftCertificateActionType.RemoveGiftCertificateRequested));\n\n            this._giftCertificateRequestSender.removeGiftCertificate(checkout.id, giftCertificate, options)\n                .then(({ body }) => {\n                    observer.next(createAction(GiftCertificateActionType.RemoveGiftCertificateSucceeded, body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(GiftCertificateActionType.RemoveGiftCertificateFailed, response));\n                });\n        });\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { Checkout, CheckoutDefaultIncludes } from '../checkout';\nimport { ContentType, RequestOptions } from '../common/http-request';\n\nexport default class GiftCertificateRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    applyGiftCertificate(checkoutId: string, giftCertificateCode: string, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/gift-certificates`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.post(url, {\n            headers,\n            timeout,\n            params: {\n                include: CheckoutDefaultIncludes.join(','),\n            },\n            body: { giftCertificateCode },\n        });\n    }\n\n    removeGiftCertificate(checkoutId: string, giftCertificateCode: string, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/gift-certificates/${giftCertificateCode}`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.delete(url, {\n            headers,\n            timeout,\n            params: {\n                include: CheckoutDefaultIncludes.join(','),\n            },\n        });\n    }\n}\n","import { BillingAddress } from '../billing';\n\nimport Address from './address';\nimport InternalAddress from './internal-address';\n\nexport default function mapFromInternalAddress(address: InternalAddress): Address | BillingAddress {\n    return {\n        id: address.id,\n        firstName: address.firstName,\n        lastName: address.lastName,\n        company: address.company,\n        address1: address.addressLine1,\n        address2: address.addressLine2,\n        city: address.city,\n        stateOrProvince: address.province,\n        stateOrProvinceCode: address.provinceCode,\n        postalCode: address.postCode,\n        country: address.country,\n        countryCode: address.countryCode,\n        phone: address.phone,\n        customFields: address.customFields,\n    };\n}\n","import { createAction, createErrorAction, Action } from '@bigcommerce/data-store';\nimport { Observable } from 'rxjs/Observable';\nimport { Observer } from 'rxjs/Observer';\n\nimport { RequestOptions } from '../common/http-request';\n\nimport * as actionTypes from './shipping-country-action-types';\nimport ShippingCountryRequestSender from './shipping-country-request-sender';\n\n/**\n * @todo Convert this file into TypeScript properly\n * i.e.: Action<T>\n */\nexport default class ShippingCountryActionCreator {\n    constructor(\n        private _shippingCountryRequestSender: ShippingCountryRequestSender\n    ) {}\n\n    loadCountries(options?: RequestOptions): Observable<Action> {\n        return Observable.create((observer: Observer<Action>) => {\n            observer.next(createAction(actionTypes.LOAD_SHIPPING_COUNTRIES_REQUESTED));\n\n            this._shippingCountryRequestSender.loadCountries(options)\n                .then(response => {\n                    observer.next(createAction(actionTypes.LOAD_SHIPPING_COUNTRIES_SUCCEEDED, response.body.data));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(actionTypes.LOAD_SHIPPING_COUNTRIES_FAILED, response));\n                });\n        });\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { RequestOptions } from '../common/http-request';\nimport { CountryResponseBody } from '../geography';\n\nexport default class ShippingCountryRequestSender {\n    constructor(\n        private _requestSender: RequestSender,\n        private _config: { locale?: string }\n    ) {}\n\n    loadCountries({ timeout }: RequestOptions = {}): Promise<Response<CountryResponseBody>> {\n        const url = '/internalapi/v1/shipping/countries';\n        const headers = {\n            'Accept-Language': this._config.locale,\n        };\n\n        return this._requestSender.get(url, { headers, timeout });\n    }\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { Observable } from 'rxjs/Observable';\nimport { Observer } from 'rxjs/Observer';\n\nimport { AddressRequestBody } from '../address';\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { Registry } from '../common/registry';\n\nimport { ShippingInitializeOptions, ShippingRequestOptions } from './shipping-request-options';\nimport {\n    ShippingStrategyActionType,\n    ShippingStrategyDeinitializeAction,\n    ShippingStrategyInitializeAction,\n    ShippingStrategySelectOptionAction,\n    ShippingStrategyUpdateAddressAction,\n} from './shipping-strategy-actions';\nimport { ShippingStrategy } from './strategies';\n\nexport default class ShippingStrategyActionCreator {\n    constructor(\n        private _strategyRegistry: Registry<ShippingStrategy>\n    ) {}\n\n    updateAddress(address: AddressRequestBody, options?: ShippingRequestOptions): ThunkAction<ShippingStrategyUpdateAddressAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<ShippingStrategyUpdateAddressAction>) => {\n            const payment = store.getState().payment.getPaymentId();\n            const methodId = options && options.methodId || payment && payment.providerId;\n\n            observer.next(createAction(ShippingStrategyActionType.UpdateAddressRequested, undefined, { methodId }));\n\n            this._strategyRegistry.get(methodId)\n                .updateAddress(address, { ...options, methodId })\n                .then(() => {\n                    observer.next(createAction(ShippingStrategyActionType.UpdateAddressSucceeded, undefined, { methodId }));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(ShippingStrategyActionType.UpdateAddressFailed, error, { methodId }));\n                });\n        });\n    }\n\n    selectOption(shippingOptionId: string, options?: ShippingRequestOptions): ThunkAction<ShippingStrategySelectOptionAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<ShippingStrategySelectOptionAction>) => {\n            const payment = store.getState().payment.getPaymentId();\n            const methodId = options && options.methodId || payment && payment.providerId;\n\n            observer.next(createAction(ShippingStrategyActionType.SelectOptionRequested, undefined, { methodId }));\n\n            this._strategyRegistry.get(methodId)\n                .selectOption(shippingOptionId, { ...options, methodId })\n                .then(() => {\n                    observer.next(createAction(ShippingStrategyActionType.SelectOptionSucceeded, undefined, { methodId }));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(ShippingStrategyActionType.SelectOptionFailed, error, { methodId }));\n                });\n        });\n    }\n\n    initialize(options?: ShippingInitializeOptions): ThunkAction<ShippingStrategyInitializeAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<ShippingStrategyInitializeAction>) => {\n            const payment = store.getState().payment.getPaymentId();\n            const methodId = options && options.methodId || payment && payment.providerId;\n            const mergedOptions = { ...options, methodId };\n\n            observer.next(createAction(ShippingStrategyActionType.InitializeRequested, undefined, { methodId }));\n\n            this._strategyRegistry.get(methodId)\n                .initialize(mergedOptions)\n                .then(() => {\n                    observer.next(createAction(ShippingStrategyActionType.InitializeSucceeded, undefined, { methodId }));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(ShippingStrategyActionType.InitializeFailed, error, { methodId }));\n                });\n        });\n    }\n\n    deinitialize(options?: ShippingRequestOptions): ThunkAction<ShippingStrategyDeinitializeAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<ShippingStrategyDeinitializeAction>) => {\n            const payment = store.getState().payment.getPaymentId();\n            const methodId = options && options.methodId || payment && payment.providerId;\n\n            observer.next(createAction(ShippingStrategyActionType.DeinitializeRequested, undefined, { methodId }));\n\n            this._strategyRegistry.get(methodId)\n                .deinitialize({ ...options, methodId })\n                .then(() => {\n                    observer.next(createAction(ShippingStrategyActionType.DeinitializeSucceeded, undefined, { methodId }));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(ShippingStrategyActionType.DeinitializeFailed, error, { methodId }));\n                });\n        });\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { StandardError } from '../../../common/error/errors';\nimport { Masterpass, MasterpassHostWindow } from '../masterpass/masterpass';\n\nexport default class MasterpassScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        public _window: MasterpassHostWindow = window\n    ) {}\n\n    load(testMode?: boolean): Promise<Masterpass> {\n        return this._scriptLoader\n            .loadScript(`//${testMode ? 'sandbox.' : ''}masterpass.com/integration/merchant.js`)\n            .then(() => {\n                if (!this._window.masterpass) {\n                    throw new StandardError();\n                }\n\n                return this._window.masterpass;\n            });\n    }\n}\n","import StandardError from './standard-error';\n\nexport default class NotImplementedError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Not implemented.');\n\n        this.type = 'not_implemented';\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../checkout';\nimport CustomerCredentials from '../customer-credentials';\n\nimport { CustomerInitializeOptions, CustomerRequestOptions } from '../customer-request-options';\n\nexport default abstract class CustomerStrategy {\n    protected _isInitialized = false;\n\n    constructor(\n        protected _store: CheckoutStore\n    ) {}\n\n    abstract signIn(credentials: CustomerCredentials, options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors>;\n\n    abstract signOut(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors>;\n\n    initialize(options?: CustomerInitializeOptions): Promise<InternalCheckoutSelectors> {\n        this._isInitialized = true;\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    deinitialize(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        this._isInitialized = false;\n\n        return Promise.resolve(this._store.getState());\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors} from '../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotImplementedError, NotInitializedError, NotInitializedErrorType, StandardError } from '../../common/error/errors';\nimport { PaymentMethod, PaymentMethodActionCreator } from '../../payment';\nimport { AmazonPayLoginButton, AmazonPayScriptLoader, AmazonPayWidgetError, AmazonPayWindow } from '../../payment/strategies/amazon-pay';\nimport { RemoteCheckoutActionCreator, RemoteCheckoutRequestSender } from '../../remote-checkout';\nimport CustomerCredentials from '../customer-credentials';\nimport { CustomerInitializeOptions, CustomerRequestOptions } from '../customer-request-options';\n\nimport CustomerStrategy from './customer-strategy';\n\nexport default class AmazonPayCustomerStrategy extends CustomerStrategy {\n    private _paymentMethod?: PaymentMethod;\n    private _window: AmazonPayWindow;\n\n    constructor(\n        store: CheckoutStore,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _remoteCheckoutRequestSender: RemoteCheckoutRequestSender,\n        private _scriptLoader: AmazonPayScriptLoader\n    ) {\n        super(store);\n\n        this._window = window;\n    }\n\n    initialize(options: CustomerInitializeOptions): Promise<InternalCheckoutSelectors> {\n        if (this._isInitialized) {\n            return super.initialize(options);\n        }\n\n        const { amazon: amazonOptions, methodId } = options;\n\n        if (!amazonOptions || !methodId) {\n            throw new InvalidArgumentError('Unable to proceed because \"options.amazon\" argument is not provided.');\n        }\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => new Promise((resolve, reject) => {\n                this._paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                if (!this._paymentMethod) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                const { onError = () => {} } = amazonOptions;\n                const onReady = () => {\n                    this._createSignInButton({\n                        ...amazonOptions,\n                        onError: error => {\n                            reject(error);\n                            onError(error);\n                        },\n                    });\n\n                    resolve();\n                };\n\n                this._scriptLoader.loadWidget(this._paymentMethod, onReady)\n                    .catch(reject);\n            }))\n            .then(() => super.initialize(options));\n    }\n\n    deinitialize(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        if (!this._isInitialized) {\n            return super.deinitialize(options);\n        }\n\n        this._paymentMethod = undefined;\n\n        return super.deinitialize(options);\n    }\n\n    signIn(credentials: CustomerCredentials, options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        throw new NotImplementedError(\n            'In order to sign in via AmazonPay, the shopper must click on \"Login with Amazon\" button.'\n        );\n    }\n\n    signOut(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const payment = state.payment.getPaymentId();\n\n        if (!payment) {\n            return Promise.resolve(this._store.getState());\n        }\n\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.signOut(payment.providerId, options)\n        );\n    }\n\n    private _createSignInButton(options: AmazonPayCustomerInitializeOptions): AmazonPayLoginButton {\n        if (!this._paymentMethod || !this._window.OffAmazonPayments) {\n            throw new NotInitializedError(NotInitializedErrorType.CustomerNotInitialized);\n        }\n\n        if (!this._paymentMethod.config.merchantId) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const { initializationData } = this._paymentMethod;\n\n        return new this._window.OffAmazonPayments.Button(options.container, this._paymentMethod.config.merchantId, {\n            color: options.color || 'Gold',\n            size: options.size || 'small',\n            type: 'PwA',\n            useAmazonAddressBook: true,\n            onError: options.onError,\n            authorization: () => {\n                this._handleAuthorization(initializationData);\n            },\n        });\n    }\n\n    private _handleAuthorization(options: AuthorizationOptions): void {\n        this._remoteCheckoutRequestSender.generateToken()\n            .then(({ body }) => {\n                if (!this._window.amazon) {\n                    throw new NotInitializedError(NotInitializedErrorType.ShippingNotInitialized);\n                }\n\n                this._window.amazon.Login.authorize({\n                    popup: false,\n                    scope: 'payments:shipping_address payments:billing_address payments:widget profile',\n                    state: `${options.tokenPrefix}${body.token}`,\n                }, options.redirectUrl);\n\n                this._remoteCheckoutRequestSender.trackAuthorizationEvent();\n            });\n    }\n}\n\n/**\n * A set of options that are required to initialize the customer step of\n * checkout to support Amazon Pay.\n *\n * When AmazonPay is initialized, a sign-in button will be inserted into the\n * DOM. When the customer clicks on it, they will be redirected to Amazon to\n * sign in.\n */\nexport interface AmazonPayCustomerInitializeOptions {\n    /**\n     * The ID of a container which the sign-in button should insert into.\n     */\n    container: string;\n\n    /**\n     * The colour of the sign-in button.\n     */\n    color?: 'Gold' | 'LightGray' | 'DarkGray';\n\n    /**\n     * The size of the sign-in button.\n     */\n    size?: 'small' | 'medium' | 'large' | 'x-large';\n\n    /**\n     * A callback that gets called if unable to initialize the widget or select\n     * one of the address options provided by the widget.\n     *\n     * @param error - The error object describing the failure.\n     */\n    onError?(error: AmazonPayWidgetError | StandardError): void;\n}\n\ninterface AuthorizationOptions {\n    redirectUrl: string;\n    tokenPrefix: string;\n}\n","import { CustomerStrategyActionCreator } from '..';\nimport { CheckoutActionCreator, CheckoutStore, InternalCheckoutSelectors } from '../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotImplementedError } from '../../common/error/errors';\nimport { PaymentMethod, PaymentMethodActionCreator } from '../../payment';\nimport { BraintreeVisaCheckoutPaymentProcessor } from '../../payment/strategies/braintree';\nimport { VisaCheckoutPaymentSuccessPayload } from '../../payment/strategies/braintree/visacheckout';\nimport VisaCheckoutScriptLoader from '../../payment/strategies/braintree/visacheckout-script-loader';\nimport { RemoteCheckoutActionCreator } from '../../remote-checkout';\nimport CustomerCredentials from '../customer-credentials';\nimport { CustomerInitializeOptions } from '../customer-request-options';\n\nimport CustomerStrategy from './customer-strategy';\n\nexport default class BraintreeVisaCheckoutCustomerStrategy extends CustomerStrategy {\n    private _paymentMethod?: PaymentMethod;\n    private _buttonClassName: string = 'visa-checkout-wrapper';\n\n    constructor(\n        store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _customerStrategyActionCreator: CustomerStrategyActionCreator,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _braintreeVisaCheckoutPaymentProcessor: BraintreeVisaCheckoutPaymentProcessor,\n        private _visaCheckoutScriptLoader: VisaCheckoutScriptLoader\n    ) {\n        super(store);\n    }\n\n    initialize(options: CustomerInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { braintreevisacheckout: visaCheckoutOptions, methodId } = options;\n\n        if (!visaCheckoutOptions || !methodId) {\n            throw new InvalidArgumentError('Unable to proceed because \"options.braintreevisacheckout\" argument is not provided.');\n        }\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => {\n                this._paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                const checkout = state.checkout.getCheckout();\n                const storeConfig = state.config.getStoreConfig();\n\n                if (!checkout) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                }\n\n                if (!storeConfig) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n                }\n\n                if (!this._paymentMethod || !this._paymentMethod.clientToken) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                const {\n                    container,\n                    onError = () => {},\n                } = visaCheckoutOptions;\n\n                const initOptions = {\n                    locale: storeConfig.storeProfile.storeLanguage,\n                    collectShipping: true,\n                    subtotal: checkout.subtotal,\n                    currencyCode: storeConfig.currency.code,\n                };\n\n                return Promise.all([\n                    this._visaCheckoutScriptLoader.load(this._paymentMethod.config.testMode),\n                    this._braintreeVisaCheckoutPaymentProcessor.initialize(this._paymentMethod.clientToken, initOptions),\n                ])\n                .then(([visaCheckout, initOptions]) => {\n                    const signInButton = this._createSignInButton(container, this._buttonClassName);\n\n                    visaCheckout.init(initOptions);\n                    visaCheckout.on('payment.success', (paymentSuccessPayload: VisaCheckoutPaymentSuccessPayload) =>\n                        this._paymentInstrumentSelected(paymentSuccessPayload)\n                            .catch(error => onError(error))\n                    );\n                    visaCheckout.on('payment.error', (payment, error) => onError(error));\n\n                    return signInButton;\n                })\n                .then(signInButton => { signInButton.style.visibility = 'visible'; });\n            })\n            .then(() => super.initialize(options));\n    }\n\n    signIn(credentials: CustomerCredentials, options?: any): Promise<InternalCheckoutSelectors> {\n        throw new NotImplementedError(\n            'In order to sign in via VisaCheckout, the shopper must click on \"Visa Checkout\" button.'\n        );\n    }\n\n    signOut(options?: any): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.signOut('braintreevisacheckout', options)\n        );\n    }\n\n    deinitialize(options?: any): Promise<InternalCheckoutSelectors> {\n        if (!this._isInitialized) {\n            return super.deinitialize(options);\n        }\n\n        this._paymentMethod = undefined;\n\n        return this._braintreeVisaCheckoutPaymentProcessor.deinitialize()\n            .then(() => super.deinitialize(options));\n    }\n\n    private _paymentInstrumentSelected(paymentSuccessPayload: VisaCheckoutPaymentSuccessPayload) {\n        const state = this._store.getState();\n\n        if (!this._paymentMethod) {\n            throw new Error('Payment method not initialized');\n        }\n\n        const { id: methodId } = this._paymentMethod;\n\n        return this._store.dispatch(\n            this._customerStrategyActionCreator.widgetInteraction(() => {\n                return this._braintreeVisaCheckoutPaymentProcessor.handleSuccess(\n                    paymentSuccessPayload,\n                    state.shippingAddress.getShippingAddress(),\n                    state.billingAddress.getBillingAddress()\n                )\n                .then(() => this._store.dispatch(this._checkoutActionCreator.loadCurrentCheckout()));\n        }, { methodId }), { queueId: 'widgetInteraction' });\n    }\n\n    private _createSignInButton(containerId: string, buttonClass: string): HTMLElement {\n        const container = document.querySelector(`#${containerId}`);\n\n        if (!container) {\n            throw new Error('Need a container to place the button');\n        }\n\n        return (container.querySelector('.' + buttonClass) as HTMLElement) ||\n            this._insertVisaCheckoutButton(container, buttonClass);\n    }\n\n    private _insertVisaCheckoutButton(container: Element, buttonClass: string): HTMLElement {\n        const buttonSource = 'https://secure.checkout.visa.com/wallet-services-web/xo/button.png?acceptCanadianVisaDebit=false&cobrand=true&size=154';\n        const buttonTemplate = `\n            <img\n                alt=\"Visa Checkout\"\n                class=\"v-button\"\n                role=\"button\"\n                src=\"${buttonSource}\"\n                />\n            <a class=\"v-learn v-learn-default\" style=\"text-align: right; display: block; font-size: 10px; color: #003366;\" href=\"#\" data-locale=\"en_US\">Tell Me More</a>`;\n\n        const visaCheckoutButton = document.createElement('div');\n        visaCheckoutButton.style.visibility = 'hidden';\n        visaCheckoutButton.className = buttonClass;\n        visaCheckoutButton.innerHTML = buttonTemplate;\n\n        container.appendChild(visaCheckoutButton);\n        return visaCheckoutButton;\n    }\n}\n\nexport interface BraintreeVisaCheckoutCustomerInitializeOptions {\n    container: string;\n    onError?(error: Error): void;\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\nimport { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotImplementedError, NotInitializedError, NotInitializedErrorType } from '../../common/error/errors';\nimport { toFormUrlEncoded } from '../../common/http-request';\nimport { PaymentMethod, PaymentMethodActionCreator } from '../../payment';\nimport { ChasePayScriptLoader } from '../../payment/strategies/chasepay';\nimport { ChasePaySuccessPayload } from '../../payment/strategies/chasepay/chasepay';\nimport { RemoteCheckoutActionCreator } from '../../remote-checkout';\nimport CustomerCredentials from '../customer-credentials';\nimport {CustomerInitializeOptions, CustomerRequestOptions} from '../customer-request-options';\n\nimport CustomerStrategy from './customer-strategy';\n\nexport default class ChasePayCustomerStrategy extends CustomerStrategy {\n    private _paymentMethod?: PaymentMethod;\n\n    constructor(\n        store: CheckoutStore,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _chasePayScriptLoader: ChasePayScriptLoader,\n        private _requestSender: RequestSender,\n        private _formPoster: FormPoster\n    ) {\n        super(store);\n    }\n\n    initialize(options: CustomerInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { chasepay: chasePayOptions, methodId } = options;\n\n        if (!chasePayOptions || !methodId) {\n            throw new InvalidArgumentError('Unable to proceed because \"options.chasepay\" argument is not provided.');\n        }\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => {\n                this._paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                const cart = state.cart.getCart();\n                const storeConfig = state.config.getStoreConfig();\n\n                if (!cart) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCart);\n                }\n\n                if (!storeConfig) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n                }\n\n                if (!this._paymentMethod || !this._paymentMethod.initializationData.digitalSessionId) {\n                    throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n                }\n\n                const { container } = chasePayOptions;\n\n                return this._chasePayScriptLoader.load(this._paymentMethod.config.testMode)\n                    .then(JPMC => {\n                        const ChasePay = JPMC.ChasePay;\n\n                        ChasePay.configure({\n                            language: storeConfig.storeProfile.storeLanguage,\n                        });\n\n                        if (ChasePay.isChasePayUp) {\n                            ChasePay.insertButtons({\n                                containers: [container],\n                            });\n                        }\n\n                        ChasePay.on(ChasePay.EventType.START_CHECKOUT, () => {\n                            this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n                                .then(() => {\n                                    const state = this._store.getState();\n                                    const method = state.paymentMethods.getPaymentMethod(methodId);\n                                    const sessionId = method && method.initializationData && method.initializationData.digitalSessionId;\n\n                                    if (sessionId) {\n                                        ChasePay.startCheckout(sessionId);\n                                    }\n                                });\n                        });\n\n                        ChasePay.on(ChasePay.EventType.COMPLETE_CHECKOUT, (payload: ChasePaySuccessPayload) => {\n                            const state = this._store.getState();\n                            const method = state.paymentMethods.getPaymentMethod(methodId);\n                            const requestId = method && method.initializationData && method.initializationData.merchantRequestId;\n\n                            if (requestId) {\n                                this._setExternalCheckoutData(payload, requestId)\n                                    .then(() => {\n                                        this._reloadPage();\n                                });\n                            }\n                        });\n                    });\n            })\n            .then(() => super.initialize(options));\n    }\n\n    signIn(credentials: CustomerCredentials, options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        throw new NotImplementedError(\n            'In order to sign in via Chase Pay®, the shopper must click on \"Chase Pay®\" button.'\n        );\n    }\n\n    signOut(options?: any): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const payment = state.payment.getPaymentId();\n\n        if (!payment) {\n            return Promise.resolve(this._store.getState());\n        }\n\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.signOut(payment.providerId, options)\n        );\n    }\n\n    private _setExternalCheckoutData(payload: ChasePaySuccessPayload, requestId: string): Promise<Response> {\n        const url = `checkout.php?provider=chasepay&action=set_external_checkout`;\n        const options = {\n            headers: {\n                Accept: 'text/html',\n                'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8',\n            },\n            body: toFormUrlEncoded({\n                sessionToken: payload.sessionToken,\n                merchantRequestId: requestId,\n            }),\n            method: 'post',\n        };\n\n        return this._requestSender.sendRequest(url, options);\n    }\n\n    private _reloadPage() {\n        this._formPoster.postForm('/checkout.php', {\n            headers: {\n                Accept: 'text/html',\n                'Content-Type': 'application/x-www-form-urlencoded',\n            },\n            params: {\n                fromChasePay: true,\n            },\n        });\n    }\n}\n\nexport interface ChasePayCustomerInitializeOptions {\n    container: string;\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../checkout';\nimport {\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    NotImplementedError\n} from '../../common/error/errors';\nimport { PaymentMethod, PaymentMethodActionCreator } from '../../payment';\nimport { MasterpassScriptLoader } from '../../payment/strategies/masterpass';\nimport { RemoteCheckoutActionCreator } from '../../remote-checkout';\nimport CustomerCredentials from '../customer-credentials';\nimport { CustomerInitializeOptions, CustomerRequestOptions } from '../customer-request-options';\n\nimport CustomerStrategy from './customer-strategy';\n\nexport default class MasterpassCustomerStrategy extends CustomerStrategy {\n    private _signInButton?: HTMLElement;\n    private _paymentMethod?: PaymentMethod;\n\n    constructor(\n        store: CheckoutStore,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _masterpassScriptLoader: MasterpassScriptLoader\n    ) {\n        super(store);\n    }\n\n    initialize(options: CustomerInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { masterpass: masterpassOptions, methodId } = options;\n\n        if (!masterpassOptions || !methodId) {\n            throw new InvalidArgumentError('Unable to proceed because \"options.masterpass\" argument is not provided.');\n        }\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => {\n\n                this._paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n                if (!this._paymentMethod || !this._paymentMethod.initializationData.checkoutId) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                const cart = state.cart.getCart();\n                if (!cart) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCart);\n                }\n\n                const { container } = masterpassOptions;\n\n                const payload = {\n                    checkoutId: this._paymentMethod.initializationData.checkoutId,\n                    allowedCardTypes: this._paymentMethod.initializationData.allowedCardTypes,\n                    amount: cart.cartAmount.toString(),\n                    currency: cart.currency.code,\n                    cartId: cart.id,\n                };\n\n                return this._masterpassScriptLoader.load(this._paymentMethod.config.testMode)\n                    .then(Masterpass => {\n                        this._signInButton = this._createSignInButton(container);\n\n                        this._signInButton.addEventListener('click', () => {\n                            Masterpass.checkout(payload);\n                        });\n                    });\n            })\n            .then(() => super.initialize(options));\n    }\n\n    deinitialize(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        if (!this._isInitialized) {\n            return super.deinitialize(options);\n        }\n\n        this._paymentMethod = undefined;\n        if (this._signInButton && this._signInButton.parentNode) {\n            this._signInButton.parentNode.removeChild(this._signInButton);\n            this._signInButton = undefined;\n        }\n\n        return super.deinitialize(options);\n    }\n\n    signIn(credentials: CustomerCredentials, options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        throw new NotImplementedError(\n            'In order to sign in via Masterpass, the shopper must click on \"Masterpass\" button.'\n        );\n    }\n\n    signOut(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const payment = state.payment.getPaymentId();\n\n        if (!payment) {\n            return Promise.resolve(this._store.getState());\n        }\n\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.signOut(payment.providerId, options)\n        );\n    }\n\n    private _createSignInButton(containerId: string): HTMLElement {\n        const container = document.querySelector(`#${containerId}`);\n\n        if (!container) {\n            throw new InvalidArgumentError('Unable to create sign-in button without valid container ID.');\n        }\n\n        const button = document.createElement('input');\n\n        button.type = 'image';\n        button.src = 'https://static.masterpass.com/dyn/img/btn/global/mp_chk_btn_160x037px.svg';\n        container.appendChild(button);\n\n        return button;\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../checkout';\nimport CustomerActionCreator from '../customer-action-creator';\nimport CustomerCredentials from '../customer-credentials';\nimport { CustomerRequestOptions } from '../customer-request-options';\n\nimport CustomerStrategy from './customer-strategy';\n\nexport default class DefaultCustomerStrategy extends CustomerStrategy {\n    constructor(\n        store: CheckoutStore,\n        private _customerActionCreator: CustomerActionCreator\n    ) {\n        super(store);\n    }\n\n    signIn(credentials: CustomerCredentials, options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._customerActionCreator.signInCustomer(credentials, options)\n        );\n    }\n\n    signOut(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._customerActionCreator.signOutCustomer(options)\n        );\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../checkout';\nimport { NotImplementedError} from '../../common/error/errors';\nimport { RemoteCheckoutActionCreator } from '../../remote-checkout';\nimport CustomerCredentials from '../customer-credentials';\nimport { CustomerRequestOptions } from '../customer-request-options';\n\nimport CustomerStrategy from './customer-strategy';\n\nexport default class SquareCustomerStrategy extends CustomerStrategy {\n\n    constructor(\n        store: CheckoutStore,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator\n    ) {\n        super(store);\n    }\n\n    signIn(credentials: CustomerCredentials, options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        throw new NotImplementedError(\n            'In order to sign in via Masterpass, the shopper must click on \"Masterpass\" button.'\n        );\n    }\n\n    signOut(options?: any): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const payment = state.payment.getPaymentId();\n\n        if (!payment) {\n            return Promise.resolve(this._store.getState());\n        }\n\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.signOut(payment.providerId, options)\n        );\n    }\n}\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { RequestSender } from '@bigcommerce/request-sender';\nimport { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport { CheckoutActionCreator, CheckoutRequestSender, CheckoutStore } from '../checkout';\nimport { Registry } from '../common/registry';\nimport { ConfigActionCreator, ConfigRequestSender } from '../config';\nimport { PaymentMethodActionCreator, PaymentMethodRequestSender } from '../payment';\nimport { AmazonPayScriptLoader } from '../payment/strategies/amazon-pay';\nimport { createBraintreeVisaCheckoutPaymentProcessor, VisaCheckoutScriptLoader } from '../payment/strategies/braintree';\nimport { ChasePayScriptLoader } from '../payment/strategies/chasepay';\nimport { MasterpassScriptLoader } from '../payment/strategies/masterpass';\nimport { RemoteCheckoutActionCreator, RemoteCheckoutRequestSender } from '../remote-checkout';\n\nimport CustomerActionCreator from './customer-action-creator';\nimport CustomerRequestSender from './customer-request-sender';\nimport CustomerStrategyActionCreator from './customer-strategy-action-creator';\nimport {\n    AmazonPayCustomerStrategy,\n    BraintreeVisaCheckoutCustomerStrategy,\n    ChasePayCustomerStrategy,\n    CustomerStrategy,\n    DefaultCustomerStrategy,\n    MasterpassCustomerStrategy,\n} from './strategies';\nimport SquareCustomerStrategy from './strategies/square-customer-strategy';\n\nexport default function createCustomerStrategyRegistry(\n    store: CheckoutStore,\n    requestSender: RequestSender\n): Registry<CustomerStrategy> {\n    const registry = new Registry<CustomerStrategy>();\n    const checkoutActionCreator = new CheckoutActionCreator(\n        new CheckoutRequestSender(requestSender),\n        new ConfigActionCreator(new ConfigRequestSender(requestSender))\n    );\n    const paymentMethodActionCreator = new PaymentMethodActionCreator(new PaymentMethodRequestSender(requestSender));\n    const remoteCheckoutRequestSender = new RemoteCheckoutRequestSender(requestSender);\n    const remoteCheckoutActionCreator = new RemoteCheckoutActionCreator(remoteCheckoutRequestSender);\n    const scriptLoader = getScriptLoader();\n\n    registry.register('amazon', () =>\n        new AmazonPayCustomerStrategy(\n            store,\n            paymentMethodActionCreator,\n            remoteCheckoutActionCreator,\n            remoteCheckoutRequestSender,\n            new AmazonPayScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register('braintreevisacheckout', () =>\n        new BraintreeVisaCheckoutCustomerStrategy(\n            store,\n            checkoutActionCreator,\n            paymentMethodActionCreator,\n            new CustomerStrategyActionCreator(registry),\n            remoteCheckoutActionCreator,\n            createBraintreeVisaCheckoutPaymentProcessor(scriptLoader, requestSender),\n            new VisaCheckoutScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register('chasepay', () =>\n        new ChasePayCustomerStrategy(\n            store,\n            paymentMethodActionCreator,\n            remoteCheckoutActionCreator,\n            new ChasePayScriptLoader(scriptLoader),\n            requestSender,\n            createFormPoster()\n        )\n    );\n\n    registry.register('squarev2', () =>\n        new SquareCustomerStrategy(\n            store,\n            new RemoteCheckoutActionCreator(remoteCheckoutRequestSender)\n        )\n    );\n\n    registry.register('masterpass', () =>\n        new MasterpassCustomerStrategy(\n            store,\n            paymentMethodActionCreator,\n            remoteCheckoutActionCreator,\n            new MasterpassScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register('default', () =>\n        new DefaultCustomerStrategy(\n            store,\n            new CustomerActionCreator(\n                new CustomerRequestSender(requestSender),\n                checkoutActionCreator\n            )\n        )\n    );\n\n    return registry;\n}\n","import { AddressRequestBody } from '../../address';\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../checkout';\n\nimport { ShippingRequestOptions } from '../shipping-request-options';\n\nexport default abstract class ShippingStrategy {\n    protected _isInitialized = false;\n\n    constructor(\n        protected _store: CheckoutStore\n    ) {}\n\n    abstract updateAddress(address: AddressRequestBody, options?: ShippingRequestOptions): Promise<InternalCheckoutSelectors>;\n\n    abstract selectOption(optionId: string, options?: ShippingRequestOptions): Promise<InternalCheckoutSelectors>;\n\n    initialize(options?: ShippingRequestOptions): Promise<InternalCheckoutSelectors> {\n        this._isInitialized = true;\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    deinitialize(options?: ShippingRequestOptions): Promise<InternalCheckoutSelectors> {\n        this._isInitialized = false;\n\n        return Promise.resolve(this._store.getState());\n    }\n}\n","import { createAction, createErrorAction } from '@bigcommerce/data-store';\n\nimport { isInternalAddressEqual, mapFromInternalAddress, AddressRequestBody } from '../../address';\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType, StandardError } from '../../common/error/errors';\nimport { PaymentMethod, PaymentMethodActionCreator } from '../../payment';\nimport { AmazonPayAddressBook, AmazonPayOrderReference, AmazonPayScriptLoader, AmazonPayWidgetError, AmazonPayWindow } from '../../payment/strategies/amazon-pay';\nimport { RemoteCheckoutActionCreator } from '../../remote-checkout';\nimport { RemoteCheckoutSynchronizationError } from '../../remote-checkout/errors';\nimport ConsignmentActionCreator from '../consignment-action-creator';\nimport { ShippingInitializeOptions, ShippingRequestOptions } from '../shipping-request-options';\nimport { ShippingStrategyActionType } from '../shipping-strategy-actions';\n\nimport ShippingStrategy from './shipping-strategy';\n\nexport default class AmazonPayShippingStrategy extends ShippingStrategy {\n    private _paymentMethod?: PaymentMethod;\n    private _window: AmazonPayWindow;\n\n    constructor(\n        store: CheckoutStore,\n        private _consignmentActionCreator: ConsignmentActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _scriptLoader: AmazonPayScriptLoader\n    ) {\n        super(store);\n\n        this._window = window;\n    }\n\n    initialize(options: ShippingInitializeOptions): Promise<InternalCheckoutSelectors> {\n        if (this._isInitialized) {\n            return super.initialize(options);\n        }\n\n        const { amazon: amazonOptions, methodId } = options;\n\n        if (!amazonOptions || !methodId) {\n            throw new InvalidArgumentError('Unable to proceed because \"options.amazon\" argument is not provided.');\n        }\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => new Promise((resolve, reject) => {\n                this._paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                if (!this._paymentMethod) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                const onReady = () => {\n                    this._createAddressBook(amazonOptions)\n                        .then(resolve)\n                        .catch(reject);\n                };\n\n                this._scriptLoader.loadWidget(this._paymentMethod, onReady)\n                    .catch(reject);\n            }))\n            .then(() => super.initialize(options));\n    }\n\n    deinitialize(options?: ShippingRequestOptions): Promise<InternalCheckoutSelectors> {\n        if (!this._isInitialized) {\n            return super.deinitialize(options);\n        }\n\n        this._paymentMethod = undefined;\n\n        return super.deinitialize(options);\n    }\n\n    updateAddress(address: AddressRequestBody, options?: ShippingRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    selectOption(optionId: string, options?: any): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._consignmentActionCreator.selectShippingOption(optionId, options)\n        );\n    }\n\n    private _createAddressBook(options: AmazonPayShippingInitializeOptions): Promise<AmazonPayAddressBook> {\n        return new Promise((resolve, reject) => {\n            const { container, onAddressSelect = () => {}, onError = () => {}, onReady = () => {} } = options;\n            const merchantId = this._paymentMethod && this._paymentMethod.config.merchantId;\n\n            if (!document.getElementById(container)) {\n                return reject(new InvalidArgumentError('Unable to create AmazonPay AddressBook widget without valid container ID.'));\n            }\n\n            if (!this._window.OffAmazonPayments) {\n                return reject(new NotInitializedError(NotInitializedErrorType.ShippingNotInitialized));\n            }\n\n            if (!merchantId) {\n                return reject(new MissingDataError(MissingDataErrorType.MissingPaymentMethod));\n            }\n\n            const widget = new this._window.OffAmazonPayments.Widgets.AddressBook({\n                design: {\n                    designMode: 'responsive',\n                },\n                scope: 'payments:billing_address payments:shipping_address payments:widget profile',\n                sellerId: merchantId,\n                onAddressSelect: orderReference => {\n                    this._synchronizeShippingAddress()\n                        .then(() => onAddressSelect(orderReference))\n                        .catch(onError);\n                },\n                onError: error => {\n                    reject(error);\n                    onError(error);\n                },\n                onReady: orderReference => {\n                    this._updateOrderReference(orderReference)\n                        .then(() => {\n                            resolve();\n                            onReady(orderReference);\n                        })\n                        .catch(onError);\n                },\n            });\n\n            widget.bind(container);\n\n            return widget;\n        });\n    }\n\n    private _synchronizeShippingAddress(): Promise<InternalCheckoutSelectors> {\n        const methodId = this._paymentMethod && this._paymentMethod.id;\n        const amazon = this._store.getState().remoteCheckout.getCheckout('amazon');\n        const referenceId = amazon ? amazon.referenceId : undefined;\n\n        if (!methodId || !referenceId) {\n            throw new RemoteCheckoutSynchronizationError();\n        }\n\n        return this._store.dispatch(\n            createAction(ShippingStrategyActionType.UpdateAddressRequested, undefined, { methodId })\n        )\n            .then(() => this._store.dispatch(\n                this._remoteCheckoutActionCreator.initializeShipping(methodId, { referenceId })\n            ))\n            .then(state => {\n                const amazon = state.remoteCheckout.getCheckout('amazon');\n                const remoteAddress = amazon && amazon.shipping && amazon.shipping.address;\n                const address = state.shippingAddress.getShippingAddress();\n\n                if (remoteAddress === false) {\n                    throw new RemoteCheckoutSynchronizationError();\n                }\n\n                if (!remoteAddress || isInternalAddressEqual(remoteAddress, address || {})) {\n                    return this._store.getState();\n                }\n\n                return this._store.dispatch(\n                    this._consignmentActionCreator.updateAddress(mapFromInternalAddress(remoteAddress))\n                );\n            })\n            .then(() => this._store.dispatch(\n                createAction(ShippingStrategyActionType.UpdateAddressSucceeded, undefined, { methodId })\n            ))\n            .catch(error => this._store.dispatch(\n                createErrorAction(ShippingStrategyActionType.UpdateAddressFailed, error, { methodId })\n            ));\n    }\n\n    private _updateOrderReference(orderReference: AmazonPayOrderReference): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.updateCheckout('amazon', {\n                referenceId: orderReference.getAmazonOrderReferenceId(),\n            })\n        );\n    }\n}\n\n/**\n * A set of options that are required to initialize the shipping step of\n * checkout in order to support Amazon Pay.\n *\n * When Amazon Pay is initialized, a widget will be inserted into the DOM. The\n * widget has a list of shipping addresses for the customer to choose from.\n */\nexport interface AmazonPayShippingInitializeOptions {\n    /**\n     * The ID of a container which the address widget should insert into.\n     */\n    container: string;\n\n    /**\n     * A callback that gets called when the customer selects an address option.\n     *\n     * @param reference - The order reference provided by Amazon.\n     */\n    onAddressSelect?(reference: AmazonPayOrderReference): void;\n\n    /**\n     * A callback that gets called if unable to initialize the widget or select\n     * one of the address options provided by the widget.\n     *\n     * @param error - The error object describing the failure of the initialization.\n     */\n    onError?(error: AmazonPayWidgetError | StandardError): void;\n\n    /**\n     * A callback that gets called when the widget is loaded and ready to be\n     * interacted with.\n     *\n     * @param reference - The order reference provided by Amazon.\n     */\n    onReady?(reference: AmazonPayOrderReference): void;\n}\n","import { AddressRequestBody } from '../../address';\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../checkout';\nimport ConsignmentActionCreator from '../consignment-action-creator';\nimport { ShippingRequestOptions } from '../shipping-request-options';\n\nimport ShippingStrategy from './shipping-strategy';\n\nexport default class DefaultShippingStrategy extends ShippingStrategy {\n    constructor(\n        store: CheckoutStore,\n        private _consignmentActionCreator: ConsignmentActionCreator\n    ) {\n        super(store);\n    }\n\n    updateAddress(address: AddressRequestBody, options?: ShippingRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._consignmentActionCreator.updateAddress(address, options)\n        );\n    }\n\n    selectOption(optionId: string, options?: ShippingRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._consignmentActionCreator.selectShippingOption(optionId, options)\n        );\n    }\n}\n","import { RequestSender } from '@bigcommerce/request-sender';\nimport { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport { CheckoutRequestSender, CheckoutStore } from '../checkout';\nimport { Registry } from '../common/registry';\nimport { PaymentMethodActionCreator, PaymentMethodRequestSender } from '../payment';\nimport { AmazonPayScriptLoader } from '../payment/strategies/amazon-pay';\nimport { RemoteCheckoutActionCreator, RemoteCheckoutRequestSender } from '../remote-checkout';\n\nimport ConsignmentActionCreator from './consignment-action-creator';\nimport ConsignmentRequestSender from './consignment-request-sender';\nimport { AmazonPayShippingStrategy, DefaultShippingStrategy, ShippingStrategy } from './strategies';\n\nexport default function createShippingStrategyRegistry(\n    store: CheckoutStore,\n    requestSender: RequestSender\n): Registry<ShippingStrategy> {\n    const registry = new Registry<ShippingStrategy>();\n    const checkoutRequestSender = new CheckoutRequestSender(requestSender);\n    const consignmentRequestSender = new ConsignmentRequestSender(requestSender);\n\n    registry.register('amazon', () =>\n        new AmazonPayShippingStrategy(\n            store,\n            new ConsignmentActionCreator(consignmentRequestSender, checkoutRequestSender),\n            new PaymentMethodActionCreator(new PaymentMethodRequestSender(requestSender)),\n            new RemoteCheckoutActionCreator(new RemoteCheckoutRequestSender(requestSender)),\n            new AmazonPayScriptLoader(getScriptLoader())\n        )\n    );\n\n    registry.register('default', () =>\n        new DefaultShippingStrategy(\n            store,\n            new ConsignmentActionCreator(consignmentRequestSender, checkoutRequestSender)\n        )\n    );\n\n    return registry;\n}\n","import isPrivate from './is-private';\nimport omitDeep from './omit-deep';\n\nexport default function omitPrivate(object: any): any {\n    return omitDeep(object, (value: any, key: string) => isPrivate(key));\n}\n","import { omitBy, transform } from 'lodash';\n\nexport default function omitDeep(object: any, predicate: (value: any, key: string) => boolean): any {\n    if (Array.isArray(object)) {\n        return object.map(value => omitDeep(value, predicate));\n    }\n\n    if (typeof object === 'object') {\n        return transform(omitBy(object, predicate), (result, value, key) => {\n            result[key] = omitDeep(value, predicate);\n        }, {});\n    }\n\n    return object;\n}\n","import { isEqual } from 'lodash';\n\nimport { omitPrivate } from '../common/utility';\n\nimport InternalAddress from './internal-address';\n\nexport default function isInternalAddressEqual(addressA: Partial<InternalAddress>, addressB: Partial<InternalAddress>): boolean {\n    return isEqual(normalize(addressA), normalize(addressB));\n}\n\nfunction normalize(address: Partial<InternalAddress>): Partial<InternalAddress> {\n    const ignoredKeys = ['id', 'provinceCode'];\n\n    return (Object.keys(omitPrivate(address) || {}) as Array<keyof InternalAddress>)\n        .reduce(\n            (result, key) => ignoredKeys.indexOf(key) === -1 && address[key] ?\n                { ...result, [key]: address[key] } :\n                result,\n            {}\n        );\n}\n","export const INTERNAL_USE_ONLY = 'This API endpoint is for internal use only and may change in the future';\n","module.exports = require(\"@bigcommerce/bigpay-client\");","module.exports = require(\"rxjs/observable/empty\");","module.exports = require(\"rxjs\");","module.exports = require(\"messageformat\");","import { Response } from '@bigcommerce/request-sender';\n\nimport RequestError from './request-error';\n\n/**\n * @todo Convert this file into TypeScript properly\n */\nexport default class TimeoutError extends RequestError {\n    constructor(response?: Response) {\n        super(response, 'The request has timed out or aborted.');\n\n        this.type = 'timeout';\n    }\n}\n","enum ContentType {\n    Json = 'application/json',\n    JsonV1 = 'application/vnd.bc.v1+json',\n}\n\nexport default ContentType;\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { Observable } from 'rxjs/Observable';\nimport { Observer } from 'rxjs/Observer';\n\nimport { RequestOptions } from '../common/http-request';\n\nimport { ConfigRequestSender } from '.';\nimport { ConfigActionType, LoadConfigAction } from './config-actions';\n\nexport default class ConfigActionCreator {\n    constructor(\n        private _configRequestSender: ConfigRequestSender\n    ) {}\n\n    loadConfig(options?: RequestOptions): ThunkAction<LoadConfigAction> {\n        return store => Observable.create((observer: Observer<LoadConfigAction>) => {\n            const state = store.getState();\n            const config = state.config.getConfig();\n\n            if (config) {\n                return observer.complete();\n            }\n\n            observer.next(createAction(ConfigActionType.LoadConfigRequested));\n\n            this._configRequestSender.loadConfig(options)\n                .then(response => {\n                    observer.next(createAction(ConfigActionType.LoadConfigSucceeded, response.body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(ConfigActionType.LoadConfigFailed, response));\n                });\n        });\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { ContentType, INTERNAL_USE_ONLY, RequestOptions } from '../common/http-request';\n\nimport Config from './config';\n\nexport default class ConfigRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    loadConfig({ timeout }: RequestOptions = {}): Promise<Response<Config>> {\n        const url = '/api/storefront/checkout-settings';\n\n        return this._requestSender.get(url, {\n            timeout,\n            headers: {\n                Accept: ContentType.JsonV1,\n                'X-API-INTERNAL': INTERNAL_USE_ONLY,\n            },\n        });\n    }\n}\n","import StandardError from './standard-error';\n\nexport enum MissingDataErrorType {\n    MissingCart,\n    MissingCheckout,\n    MissingConsignments,\n    MissingCheckoutConfig,\n    MissingOrder,\n    MissingOrderConfig,\n    MissingOrderId,\n    MissingPayment,\n    MissingPaymentMethod,\n}\n\nexport default class MissingDataError extends StandardError {\n    constructor(\n        public subtype: MissingDataErrorType\n    ) {\n        super(getErrorMessage(subtype));\n\n        this.type = 'missing_data';\n    }\n}\n\nfunction getErrorMessage(type: MissingDataErrorType): string {\n    switch (type) {\n    case MissingDataErrorType.MissingCart:\n        return 'Unable to proceed because cart data is unavailable.';\n\n    case MissingDataErrorType.MissingConsignments:\n        return 'Unable to proceed because consignments data is unavailable.';\n\n    case MissingDataErrorType.MissingCheckout:\n        return 'Unable to proceed because checkout data is unavailable.';\n\n    case MissingDataErrorType.MissingCheckoutConfig:\n    case MissingDataErrorType.MissingOrderConfig:\n        return 'Unable to proceed because configuration data is unavailable.';\n\n    case MissingDataErrorType.MissingOrder:\n        return 'Unable to proceed because order data is unavailable.';\n\n    case MissingDataErrorType.MissingOrderId:\n        return 'Unable to proceed because order ID is unavailable or not generated yet.';\n\n    case MissingDataErrorType.MissingPayment:\n        return 'Unable to proceed because payment data is unavailable.';\n\n    case MissingDataErrorType.MissingPaymentMethod:\n        return 'Unable to proceed because payment method data is unavailable or not properly configured.';\n\n    default:\n        return 'Unable to proceed because the required data is unavailable.';\n    }\n}\n","import { createErrorAction, Action } from '@bigcommerce/data-store';\nimport { concat } from 'rxjs/observable/concat';\nimport { of } from 'rxjs/observable/of';\nimport { _throw } from 'rxjs/observable/throw';\nimport { Observable } from 'rxjs/Observable';\n\nexport default function throwErrorAction<TPayload, TMeta, TType extends string>(\n    type: TType,\n    error?: TPayload,\n    meta?: TMeta\n): Observable<Action<TPayload, TMeta, TType>> {\n    if (isErrorAction(error)) {\n        return concat(of(error), _throw(createErrorAction(type, error.payload, meta)));\n    }\n\n    return _throw(createErrorAction(type, error, meta));\n}\n\nfunction isErrorAction(action: any): action is Action {\n    return action && action.type && action.error;\n}\n","import StandardError from './standard-error';\n\nexport enum NotInitializedErrorType {\n    CheckoutButtonNotInitialized,\n    CustomerNotInitialized,\n    PaymentNotInitialized,\n    ShippingNotInitialized,\n}\n\nexport default class NotInitializedError extends StandardError {\n    constructor(\n        public subtype: NotInitializedErrorType\n    ) {\n        super(getErrorMessage(subtype));\n\n        this.type = 'not_initialized';\n    }\n}\n\nfunction getErrorMessage(type: NotInitializedErrorType): string {\n    switch (type) {\n    case NotInitializedErrorType.CustomerNotInitialized:\n        return 'Unable to proceed because the customer step of checkout has not been initialized.';\n\n    case NotInitializedErrorType.PaymentNotInitialized:\n        return 'Unable to proceed because the payment step of checkout has not been initialized.';\n\n    case NotInitializedErrorType.ShippingNotInitialized:\n        return 'Unable to proceed because the shipping step of checkout has not been initialized.';\n\n    default:\n        return 'Unable to proceed because the required component has not been initialized.';\n    }\n}\n","import { InvalidArgumentError } from '../error/errors';\n\nexport default class Registry<T> {\n    private _factories: { [key: string]: Factory<T> };\n    private _instances: { [key: string]: T };\n    private _options: RegistryOptions;\n\n    constructor(options?: RegistryOptions) {\n        this._factories = {};\n        this._instances = {};\n        this._options = { defaultToken: 'default', ...options };\n    }\n\n    get(token: string = this._options.defaultToken, cacheToken: string = token): T {\n        try {\n            return this._getInstance(token, cacheToken);\n        } catch (error) {\n            return this._getInstance(this._options.defaultToken, cacheToken);\n        }\n    }\n\n    register(token: string, factory: Factory<T>): void {\n        if (this.hasFactory(token)) {\n            throw new InvalidArgumentError(`'${token}' is already registered.`);\n        }\n\n        this._factories[token] = factory;\n    }\n\n    hasFactory(token: string): boolean {\n        return !!this._factories[token];\n    }\n\n    hasInstance(token: string): boolean {\n        return !!this._instances[token];\n    }\n\n    private _getInstance(token: string, cacheToken: string): T {\n        if (!this.hasInstance(cacheToken)) {\n            const factory = this._factories[token];\n\n            if (!factory) {\n                throw new InvalidArgumentError(`'${token}' is not registered.`);\n            }\n\n            this._instances[cacheToken] = factory();\n        }\n\n        return this._instances[cacheToken];\n    }\n}\n\nexport type Factory<T> = () => T;\n\nexport interface RegistryOptions {\n    defaultToken: string;\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { StandardError } from '../../../common/error/errors';\n\nimport { PaypalHostWindow, PaypalSDK } from './paypal-sdk';\n\nexport default class PaypalScriptLoader {\n    private _window: PaypalHostWindow;\n\n    constructor(\n        private _scriptLoader: ScriptLoader\n    ) {\n        this._window = window;\n    }\n\n    loadPaypal(): Promise<PaypalSDK> {\n        return this._scriptLoader\n            .loadScript('//www.paypalobjects.com/api/checkout.min.js')\n            .then(() => {\n                if (!this._window.paypal) {\n                    throw new StandardError();\n                }\n\n                return this._window.paypal;\n            });\n    }\n}\n","module.exports = require(\"iframe-resizer/js/iframeResizer.contentWindow\");","export default interface CustomError extends Error {\n    message: string;\n    type: string;\n    subtype?: string;\n}\n\nexport function isCustomError(error: any): error is CustomError {\n    return (\n        typeof error.message === 'string' &&\n        typeof error.type === 'string' &&\n        (typeof error.subtype === 'string' || !error.subtype) &&\n        error instanceof Error\n    );\n}\n","import { isCustomError, CustomError } from '../../common/error/errors';\nimport {\n    EmbeddedCheckoutCompleteEvent,\n    EmbeddedCheckoutError,\n    EmbeddedCheckoutErrorEvent,\n    EmbeddedCheckoutEvent,\n    EmbeddedCheckoutEventType,\n    EmbeddedCheckoutFrameErrorEvent,\n    EmbeddedCheckoutFrameLoadedEvent,\n    EmbeddedCheckoutLoadedEvent,\n} from '../embedded-checkout-events';\nimport EmbeddedCheckoutStyles from '../embedded-checkout-styles';\nimport IframeEventListener from '../iframe-event-listener';\nimport IframeEventPoster from '../iframe-event-poster';\n\nimport EmbeddedCheckoutMessenger from './embedded-checkout-messenger';\nimport { EmbeddedContentEventMap, EmbeddedContentEventType } from './embedded-content-events';\n\nexport default class IframeEmbeddedCheckoutMessenger implements EmbeddedCheckoutMessenger {\n    /**\n     * @internal\n     */\n    constructor(\n        private _messageListener: IframeEventListener<EmbeddedContentEventMap>,\n        private _messagePoster: IframeEventPoster<EmbeddedCheckoutEvent>\n    ) {\n        this._messageListener.listen();\n    }\n\n    postComplete(): void {\n        const message: EmbeddedCheckoutCompleteEvent = {\n            type: EmbeddedCheckoutEventType.CheckoutComplete,\n        };\n\n        this._messagePoster.post(message);\n    }\n\n    postError(payload: Error | CustomError): void {\n        const message: EmbeddedCheckoutErrorEvent = {\n            type: EmbeddedCheckoutEventType.CheckoutError,\n            payload: this._transformError(payload),\n        };\n\n        this._messagePoster.post(message);\n    }\n\n    postFrameError(payload: Error | CustomError): void {\n        const message: EmbeddedCheckoutFrameErrorEvent = {\n            type: EmbeddedCheckoutEventType.FrameError,\n            payload: this._transformError(payload),\n        };\n\n        this._messagePoster.post(message);\n    }\n\n    postFrameLoaded(): void {\n        const message: EmbeddedCheckoutFrameLoadedEvent = {\n            type: EmbeddedCheckoutEventType.FrameLoaded,\n        };\n\n        this._messagePoster.post(message);\n    }\n\n    postLoaded(): void {\n        const message: EmbeddedCheckoutLoadedEvent = {\n            type: EmbeddedCheckoutEventType.CheckoutLoaded,\n        };\n\n        this._messagePoster.post(message);\n    }\n\n    receiveStyles(handler: (styles: EmbeddedCheckoutStyles) => void): void {\n        this._messageListener.addListener(EmbeddedContentEventType.StyleConfigured, ({ payload }) => {\n            handler(payload);\n        });\n    }\n\n    private _transformError(error: Error | CustomError): EmbeddedCheckoutError {\n        return {\n            message: error.message,\n            type: isCustomError(error) ? error.type : undefined,\n            subtype: isCustomError(error) ? error.subtype : undefined,\n        };\n    }\n}\n","import EmbeddedCheckoutMessenger from './embedded-checkout-messenger';\n\nexport default class NoopEmbeddedCheckoutMessenger implements EmbeddedCheckoutMessenger {\n    postComplete(): void {}\n\n    postError(): void {}\n\n    postFrameError(): void {}\n\n    postFrameLoaded(): void {}\n\n    postLoaded(): void {}\n\n    receiveStyles(): void {}\n}\n","import { EmbeddedCheckoutEvent } from '../embedded-checkout-events';\nimport IframeEventListener from '../iframe-event-listener';\nimport IframeEventPoster from '../iframe-event-poster';\n\nimport EmbeddedCheckoutMessenger from './embedded-checkout-messenger';\nimport EmbeddedCheckoutMessengerOptions from './embedded-checkout-messenger-options';\nimport { EmbeddedContentEventMap } from './embedded-content-events';\nimport IframeEmbeddedCheckoutMessenger from './iframe-embedded-checkout-messenger';\nimport NoopEmbeddedCheckoutMessenger from './noop-embedded-checkout-messenger';\n\n/**\n * Create an instance of `EmbeddedCheckoutMessenger`.\n *\n * The object is responsible for posting messages to the parent window from the\n * iframe when certain events have occurred. For example, when the checkout\n * form is first loaded, you should notify the parent window about it.\n *\n * The iframe can only be embedded in domains that are allowed by the store.\n *\n * ```ts\n * const messenger = createEmbeddedCheckoutMessenger({\n *     parentOrigin: 'https://some/website',\n * });\n *\n * messenger.postFrameLoaded();\n * ```\n *\n * Please note that this feature is currently in an early stage of development.\n * Therefore the API is unstable and not ready for public consumption.\n *\n * @alpha\n * @param options - Options for creating `EmbeddedCheckoutMessenger`\n * @returns - An instance of `EmbeddedCheckoutMessenger`\n */\nexport default function createEmbeddedCheckoutMessenger(options: EmbeddedCheckoutMessengerOptions): EmbeddedCheckoutMessenger {\n    const parentWindow = options.parentWindow || window.parent;\n\n    // Return a No-op messenger if it is not called inside an iframe\n    if (window === parentWindow) {\n        return new NoopEmbeddedCheckoutMessenger();\n    }\n\n    return new IframeEmbeddedCheckoutMessenger(\n        new IframeEventListener<EmbeddedContentEventMap>(options.parentOrigin),\n        new IframeEventPoster<EmbeddedCheckoutEvent>(options.parentOrigin, parentWindow)\n    );\n}\n","/// <reference path=\"./messageformat.d.ts\" />\nimport { isObject, union } from 'lodash';\nimport * as MessageFormat from 'messageformat';\n\nimport Logger from '../common/log/logger';\n\nimport LanguageConfig, { Locales, Translations } from './language-config';\n\nconst DEFAULT_LOCALE = 'en';\nconst KEY_PREFIX = 'optimized_checkout';\n\n/**\n * Responsible for getting language strings.\n *\n * This object can be used to retrieve language strings that are most\n * appropriate for a given locale.\n *\n * The language strings provided to the object should follow [ICU\n * MessageFormat](http://userguide.icu-project.org/formatparse/messages) syntax.\n */\nexport default class LanguageService {\n    private _locale: string;\n    private _locales: Locales;\n    private _translations: Translations;\n    private _formatters: { [key: string]: any };\n\n    /**\n     * @internal\n     */\n    constructor(\n        config: Partial<LanguageConfig>,\n        private _logger: Logger\n    ) {\n        const { locale, locales, translations } = this._transformConfig(config);\n\n        this._locale = locale;\n        this._locales = locales;\n        this._translations = translations;\n        this._formatters = {};\n    }\n\n    /**\n     * Remaps a set of language strings with a different set of keys.\n     *\n     * ```js\n     * service.mapKeys({\n     *     'new_key': 'existing_key',\n     * });\n     *\n     * console.log(service.translate('new_key'));\n     * ```\n     *\n     * @param maps - The set of language strings.\n     */\n    mapKeys(maps: { [key: string]: string }): void {\n        Object.keys(maps).forEach(key => {\n            const translationKey = `${KEY_PREFIX}.${maps[key]}`;\n\n            this._translations[`${KEY_PREFIX}.${key}`] = this._translations[translationKey];\n        });\n    }\n\n    /**\n     * Gets the preferred locale of the current customer.\n     *\n     * @returns The preferred locale code.\n     */\n    getLocale(): string {\n        return this._hasTranslations() ? this._locale : DEFAULT_LOCALE;\n    }\n\n    /**\n     * Gets a language string by a key.\n     *\n     * ```js\n     * service.translate('language_key');\n     * ```\n     *\n     * If the language string contains a placeholder, you can replace it by\n     * providing a second argument.\n     *\n     * ```js\n     * service.translate('language_key', { placeholder: 'Hello' });\n     * ```\n     *\n     * @param key - The language key.\n     * @param data - Data for replacing placeholders in the language string.\n     * @returns The translated language string.\n     */\n    translate(key: string, data: TranslationData = {}): string {\n        const prefixedKey = `${KEY_PREFIX}.${key}`;\n\n        if (typeof this._translations[prefixedKey] !== 'string') {\n            this._logger.warn(`Translation key \"${prefixedKey}\" is missing`);\n\n            return prefixedKey;\n        }\n\n        if (!this._formatters[prefixedKey]) {\n            const messageFormat = new MessageFormat(this._locales[prefixedKey]);\n\n            this._formatters[prefixedKey] = messageFormat.compile(this._translations[prefixedKey] || '');\n        }\n\n        return this._formatters[prefixedKey](this._transformData(data));\n    }\n\n    private _transformConfig(config: Partial<LanguageConfig> = {}): LanguageConfig {\n        const output: LanguageConfig = {\n            defaultTranslations: {},\n            translations: {},\n            locales: {},\n            locale: config.locale || DEFAULT_LOCALE,\n        };\n\n        const locales = config.locales || {};\n        const translations = this._flattenObject(config.translations || {});\n        const defaultTranslations = this._flattenObject(config.defaultTranslations || {});\n        const translationKeys = union(Object.keys(defaultTranslations), Object.keys(translations));\n\n        translationKeys.forEach(key => {\n            if (translations && translations[key]) {\n                output.translations[key] = translations[key];\n                output.locales[key] = locales[key] || output.locale;\n            } else {\n                output.translations[key] = defaultTranslations[key];\n                output.locales[key] = DEFAULT_LOCALE;\n            }\n        });\n\n        return output;\n    }\n\n    private _flattenObject(object: Translations, result: Translations = {}, parentKey: string = ''): Translations {\n        try {\n            Object.keys(object).forEach(key => {\n                const value = object[key];\n                const resultKey = parentKey ? `${parentKey}.${key}` : key;\n\n                if (isObject(value)) {\n                    return this._flattenObject(value as Translations, result, resultKey);\n                }\n\n                result[resultKey] = value;\n            });\n        } catch (err) {\n            this._logger.warn(`Unable to parse object: ${err}`);\n        }\n\n        return result;\n    }\n\n    private _transformData(data: TranslationData): TranslationData {\n        return Object.keys(data).reduce((result, key) => {\n            const value = data[key];\n\n            result[key] = value === null || value === undefined ? '' : value;\n\n            return result;\n        }, {} as TranslationData);\n    }\n\n    private _hasTranslations(): boolean {\n        return Object.keys(this._locales).map(key => this._locales[key])\n            .filter(code => code.split('-')[0] === this._locale.split('-')[0])\n            .length > 0;\n    }\n}\n\nexport interface TranslationData {\n    [key: string]: string | number;\n}\n","import { getDefaultLogger } from '../common/log';\n\nimport LanguageConfig from './language-config';\nimport LanguageService from './language-service';\n\n/**\n * Creates an instance of `LanguageService`.\n *\n * ```js\n * const language = {{{langJson 'optimized_checkout'}}}; // `langJson` is a Handlebars helper provided by BigCommerce's Stencil template engine.\n * const service = createLanguageService(language);\n *\n * console.log(service.translate('address.city_label'));\n * ```\n *\n * @param config - A configuration object.\n * @returns An instance of `LanguageService`.\n */\nexport default function createLanguageService(config: Partial<LanguageConfig> = {}): LanguageService {\n    return new LanguageService(\n        config,\n        getDefaultLogger()\n    );\n}\n","import { InvalidArgumentError } from '../common/error/errors';\n\nimport { CurrencyConfig } from './currency';\n\nexport default class CurrencyFormatter {\n    private _decimalPlaces: number;\n    private _symbolLocation: string;\n    private _symbol: string;\n    private _thousandsSeparator: string;\n    private _decimalSeparator: string;\n\n    constructor(\n        currencySettings: CurrencyConfig\n    ) {\n        if (!currencySettings) {\n            throw new Error('Currency settings missing');\n        }\n\n        const {\n            decimalPlaces,\n            symbolLocation,\n            symbol,\n            thousandsSeparator,\n            decimalSeparator,\n        } = currencySettings;\n\n        if (\n            typeof symbolLocation !== 'string' ||\n            typeof symbol !== 'string' ||\n            typeof thousandsSeparator !== 'string' ||\n            typeof decimalSeparator !== 'string' ||\n            typeof decimalPlaces !== 'string'\n        ) {\n            throw new InvalidArgumentError('Invalid currency settings provided');\n        }\n\n        this._decimalPlaces = parseInt(decimalPlaces, 10);\n        this._symbolLocation = symbolLocation;\n        this._symbol = symbol;\n        this._thousandsSeparator = thousandsSeparator;\n        this._decimalSeparator = decimalSeparator;\n    }\n\n    format(amount?: number): string {\n        if (typeof amount !== 'number') {\n            throw new InvalidArgumentError('Invalid amount provided');\n        }\n\n        const formattedNumber = this._formatNumber(amount);\n\n        const formattedCurrency = this._formatCurrency(formattedNumber);\n\n        return amount < 0 ?\n            `-${formattedCurrency}` :\n            formattedCurrency;\n    }\n\n    private _formatNumber(amount: number): string {\n        const positiveAmount = Math.abs(amount);\n        const [ integerAmount, decimalAmount = '' ] = positiveAmount.toString().split('.');\n        const parsedIntegerAmount = integerAmount.replace(/\\B(?=(\\d{3})+(?!\\d))/g, this._thousandsSeparator);\n\n        if (this._decimalPlaces < 1) {\n            return parsedIntegerAmount;\n        }\n\n        let decimalPadding = '';\n\n        for (let i = 0; i < this._decimalPlaces; i += 1) {\n            decimalPadding += '0';\n        }\n\n        return [\n            parsedIntegerAmount,\n            `${decimalAmount}${decimalPadding}`.slice(0, this._decimalPlaces),\n        ].join(this._decimalSeparator);\n    }\n\n    private _formatCurrency(formattedNumber: string): string {\n        return (this._symbolLocation.toLowerCase() === 'left') ?\n            `${this._symbol}${formattedNumber}` :\n            `${formattedNumber}${this._symbol}`;\n    }\n}\n","import { StoreConfig } from '../config';\n\nimport CurrencyFormatter from './currency-formatter';\n\n/**\n * Responsible for formatting and converting currencies.\n */\nexport default class CurrencyService {\n    private _customerFormatter: CurrencyFormatter;\n    private _storeFormatter: CurrencyFormatter;\n\n    /**\n     * @internal\n     */\n    constructor(\n        private _storeConfig: StoreConfig\n    ) {\n        this._customerFormatter = new CurrencyFormatter(this._storeConfig.shopperCurrency);\n        this._storeFormatter = new CurrencyFormatter(this._storeConfig.currency);\n    }\n\n    toCustomerCurrency(amount: number): string {\n        const exchangeRate = parseFloat(this._storeConfig.shopperCurrency.exchangeRate);\n        return this._customerFormatter.format(amount * exchangeRate);\n    }\n\n    toStoreCurrency(amount: number): string {\n        return this._storeFormatter.format(amount);\n    }\n}\n","import { StoreConfig } from '../config';\n\nimport CurrencyService from './currency-service';\n\n/**\n * Creates an instance of `CurrencyService`.\n *\n * ```js\n * const { data } = checkoutService.getState();\n * const config = data.getConfig();\n * const checkout = data.getCheckout();\n * const currencyService = createCurrencyService(config);\n *\n * currencyService.toStoreCurrency(checkout.grandTotal);\n * currencyService.toCustomerCurrency(checkout.grandTotal);\n * ```\n *\n * Please note that `CurrencyService` is currently in an early stage\n * of development. Therefore the API is unstable and not ready for public\n * consumption.\n *\n * @alpha\n * @param config - The config object containing the currency configuration\n * @returns an instance of `CurrencyService`.\n */\nexport default function createCurrencyService(\n    config: StoreConfig\n): CurrencyService {\n    return new CurrencyService(config);\n}\n","export default function getEnvironment(): string {\n    try {\n        return process.env.NODE_ENV || 'development';\n    } catch (e) {\n        return 'development';\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { RequestOptions } from '../common/http-request';\n\n/**\n * @todo Convert this file into TypeScript properly\n */\nexport default class RemoteCheckoutRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    initializeBilling(methodName: string, params: { referenceId: string }, { timeout }: RequestOptions = {}): Promise<Response> {\n        const url = `/remote-checkout/${methodName}/billing`;\n\n        return this._requestSender.get(url, { params, timeout });\n    }\n\n    initializeShipping(methodName: string, params: { referenceId: string }, { timeout }: RequestOptions = {}): Promise<Response> {\n        const url = `/remote-checkout/${methodName}/shipping`;\n\n        return this._requestSender.get(url, { params, timeout });\n    }\n\n    initializePayment(methodName: string, params: InitializePaymentOptions, { timeout }: RequestOptions = {}): Promise<Response> {\n        const url = `/remote-checkout/${methodName}/payment`;\n\n        return this._requestSender.get(url, { params, timeout });\n    }\n\n    loadSettings(methodName: string, { timeout }: RequestOptions = {}): Promise<Response> {\n        const url = `/remote-checkout/${methodName}/settings`;\n\n        return this._requestSender.get(url, { timeout });\n    }\n\n    signOut(methodName: string, { timeout }: RequestOptions = {}): Promise<Response> {\n        const url = `/remote-checkout/${methodName}/signout`;\n\n        return this._requestSender.get(url, { timeout });\n    }\n\n    generateToken({ timeout }: RequestOptions = {}): Promise<Response> {\n        const url = '/remote-checkout-token';\n\n        return this._requestSender.get(url, { timeout });\n    }\n\n    trackAuthorizationEvent({ timeout }: RequestOptions = {}): Promise<Response> {\n        const url = '/remote-checkout/events/shopper-checkout-service-provider-authorization-requested';\n\n        return this._requestSender.post(url, { timeout });\n    }\n}\n\nexport interface InitializePaymentOptions {\n    authorizationToken?: string;\n    customerMessage?: string;\n    referenceId?: string;\n    useStoreCredit?: boolean;\n}\n","import { createAction, createErrorAction, Action } from '@bigcommerce/data-store';\nimport { Observable } from 'rxjs/Observable';\nimport { Observer } from 'rxjs/Observer';\n\nimport { RequestOptions } from '../common/http-request';\n\nimport * as actionTypes from './remote-checkout-action-types';\nimport RemoteCheckoutRequestSender, { InitializePaymentOptions } from './remote-checkout-request-sender';\nimport { RemoteCheckoutStateData } from './remote-checkout-state';\n\n/**\n * @todo Convert this file into TypeScript properly\n * i.e.: Action<T>\n */\nexport default class RemoteCheckoutActionCreator {\n    constructor(\n        private _remoteCheckoutRequestSender: RemoteCheckoutRequestSender\n    ) {}\n\n    initializeBilling(methodId: string, params: { referenceId: string }, options?: RequestOptions): Observable<Action> {\n        return Observable.create((observer: Observer<Action>) => {\n            observer.next(createAction(actionTypes.INITIALIZE_REMOTE_BILLING_REQUESTED, undefined, { methodId }));\n\n            this._remoteCheckoutRequestSender.initializeBilling(methodId, params, options)\n                .then(({ body = {} }) => {\n                    observer.next(createAction(actionTypes.INITIALIZE_REMOTE_BILLING_SUCCEEDED, body, { methodId }));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(actionTypes.INITIALIZE_REMOTE_BILLING_FAILED, response, { methodId }));\n                });\n        });\n    }\n\n    initializeShipping(methodId: string, params: { referenceId: string }, options?: RequestOptions): Observable<Action> {\n        return Observable.create((observer: Observer<Action>) => {\n            observer.next(createAction(actionTypes.INITIALIZE_REMOTE_SHIPPING_REQUESTED, undefined, { methodId }));\n\n            this._remoteCheckoutRequestSender.initializeShipping(methodId, params, options)\n                .then(({ body = {} }) => {\n                    observer.next(createAction(actionTypes.INITIALIZE_REMOTE_SHIPPING_SUCCEEDED, body, { methodId }));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(actionTypes.INITIALIZE_REMOTE_SHIPPING_FAILED, response, { methodId }));\n                });\n        });\n    }\n\n    initializePayment(methodId: string, params: InitializePaymentOptions, options?: RequestOptions): Observable<Action> {\n        return Observable.create((observer: Observer<Action>) => {\n            observer.next(createAction(actionTypes.INITIALIZE_REMOTE_PAYMENT_REQUESTED, undefined, { methodId }));\n\n            this._remoteCheckoutRequestSender.initializePayment(methodId, params, options)\n                .then(({ body = {} }) => {\n                    observer.next(createAction(actionTypes.INITIALIZE_REMOTE_PAYMENT_SUCCEEDED, body, { methodId }));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(actionTypes.INITIALIZE_REMOTE_PAYMENT_FAILED, response, { methodId }));\n                });\n        });\n    }\n\n    loadSettings(methodId: string, options?: RequestOptions): Observable<Action> {\n        return Observable.create((observer: Observer<Action>) => {\n            observer.next(createAction(actionTypes.LOAD_REMOTE_SETTINGS_REQUESTED, undefined, { methodId }));\n\n            this._remoteCheckoutRequestSender.loadSettings(methodId, options)\n                .then(({ body }) => {\n                    observer.next(createAction(actionTypes.LOAD_REMOTE_SETTINGS_SUCCEEDED, body, { methodId }));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(actionTypes.LOAD_REMOTE_SETTINGS_FAILED, response, { methodId }));\n                });\n        });\n    }\n\n    signOut(methodId: string, options?: RequestOptions): Observable<Action> {\n        return Observable.create((observer: Observer<Action>) => {\n            observer.next(createAction(actionTypes.SIGN_OUT_REMOTE_CUSTOMER_REQUESTED, undefined, { methodId }));\n\n            this._remoteCheckoutRequestSender.signOut(methodId, options)\n                .then(() => {\n                    observer.next(createAction(actionTypes.SIGN_OUT_REMOTE_CUSTOMER_SUCCEEDED, undefined, { methodId }));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(actionTypes.SIGN_OUT_REMOTE_CUSTOMER_FAILED, response, { methodId }));\n                });\n        });\n    }\n\n    updateCheckout<K extends keyof RemoteCheckoutStateData>(methodId: K, data: Partial<RemoteCheckoutStateData[K]>): Action {\n        return createAction(actionTypes.UPDATE_REMOTE_CHECKOUT, data, { methodId });\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport PaymentMethod from '../../payment-method';\n\nimport AmazonPayWindow from './amazon-pay-window';\n\nexport default class AmazonPayScriptLoader {\n    private _window: AmazonPayWindow;\n\n    constructor(\n        private _scriptLoader: ScriptLoader\n    ) {\n        this._window = window;\n    }\n\n    loadWidget(method: PaymentMethod, onPaymentReady?: () => void): Promise<Event> {\n        const {\n            config: { merchantId, testMode },\n            initializationData: { region = 'us' } = {},\n        } = method;\n\n        const url = 'https://' +\n            (region.toLowerCase() !== 'us' ? 'static-eu.' : 'static-na.') +\n            'payments-amazon.com/OffAmazonPayments/' +\n            `${region.toLowerCase()}/` +\n            (testMode ? 'sandbox/' : '') +\n            (region.toLowerCase() !== 'us' ? 'lpa/' : '') +\n            `js/Widgets.js?sellerId=${merchantId}`;\n\n        this._configureWidget(method, onPaymentReady);\n\n        return this._scriptLoader.loadScript(url);\n    }\n\n    private _configureWidget(method: PaymentMethod, onPaymentReady?: () => void): void {\n        const onLoginReady = () => {\n            if (!this._window.amazon) {\n                return;\n            }\n\n            this._window.amazon.Login.setClientId(method.initializationData.clientId);\n            this._window.amazon.Login.setUseCookie(true);\n        };\n\n        if (this._window.amazon && this._window.amazon.Login) {\n            onLoginReady();\n        } else {\n            this._window.onAmazonLoginReady = onLoginReady;\n        }\n\n        if (this._window.OffAmazonPayments && onPaymentReady) {\n            onPaymentReady();\n        } else {\n            this._window.onAmazonPaymentsReady = onPaymentReady;\n        }\n    }\n}\n","export default function toFormUrlEncoded(data: { [key: string]: object | string | undefined }): string {\n    return Object.keys(data)\n        .filter(key => data[key] !== undefined)\n        .map(key => {\n            const value = data[key];\n\n            if (typeof value === 'string') {\n                return `${key}=${encodeURIComponent(value)}`;\n            }\n\n            return `${key}=${encodeURIComponent(JSON.stringify(value) || '')}`;\n        })\n        .join('&');\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { StandardError } from '../../../common/error/errors';\n\nimport { VisaCheckoutHostWindow, VisaCheckoutSDK } from './visacheckout';\n\nexport default class VisaCheckoutScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        private _window: VisaCheckoutHostWindow = window\n    ) {}\n\n    load(testMode?: boolean): Promise<VisaCheckoutSDK> {\n        return this._scriptLoader\n            .loadScript(`//${testMode ? 'sandbox-' : ''}assets.secure.checkout.visa.com/checkout-widget/resources/js/integration/v1/sdk.js`)\n            .then(() => {\n                if (!this._window.V) {\n                    throw new StandardError();\n                }\n\n                return this._window.V;\n            });\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { StandardError } from '../../../common/error/errors';\n\nimport { ChasePayHostWindow, JPMC } from '../chasepay/chasepay';\n\nexport default class ChasePayScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        public _window: ChasePayHostWindow = window\n    ) {}\n\n    load(testMode?: boolean): Promise<JPMC> {\n        return this._scriptLoader\n            .loadScript(`//pwc${testMode ? 'psb' : ''}.chase.com/pwc/checkout/js/v20170521/list.action?type=raw&applId=PWC&channelId=CWC&version=1`)\n            .then(() => {\n                if (!this._window.JPMC) {\n                    throw new StandardError();\n                }\n\n                return this._window.JPMC;\n            });\n    }\n}\n","import { StandardError } from '../../common/error/errors';\n\nexport default class RemoteCheckoutSynchronizationError extends StandardError {\n    constructor(\n        public error?: Error\n    ) {\n        super('Unable to synchronize your checkout details with a third party provider. Please try again later.');\n\n        this.type = 'remote_checkout_synchronization';\n    }\n}\n","import Logger from './logger';\n\nexport default class ConsoleLogger implements Logger {\n    constructor(\n        private _console: Console\n    ) {}\n\n    log(...messages: any[]): void {\n        this._logToConsole('log', ...messages);\n    }\n\n    info(...messages: any[]): void {\n        this._logToConsole('info', ...messages);\n    }\n\n    warn(...messages: any[]): void {\n        this._logToConsole('warn', ...messages);\n    }\n\n    error(...messages: any[]): void {\n        this._logToConsole('error', ...messages);\n    }\n\n    debug(...messages: any[]): void {\n        this._logToConsole('debug', ...messages);\n    }\n\n    private _logToConsole(type: keyof Console, ...messages: any[]): void {\n        if (!this._console || !this._console[type]) {\n            return;\n        }\n\n        this._console[type].call(this._console, ...messages);\n    }\n}\n","import Logger from './logger';\n\nexport default class NoopLogger implements Logger {\n    log(): void {}\n\n    info(): void {}\n\n    warn(): void {}\n\n    error(): void {}\n\n    debug(): void {}\n}\n","import { getEnvironment } from '../utility';\n\nimport createLogger from './create-logger';\nimport Logger from './logger';\n\nconst logger = createLogger(getEnvironment() !== 'test');\n\nexport default function getDefaultLogger(): Logger {\n    return logger;\n}\n","import ConsoleLogger from './console-logger';\nimport Logger from './logger';\nimport NoopLogger from './noop-logger';\n\nexport default function createLogger(isEnabled = true): Logger {\n    if (!isEnabled) {\n        return new NoopLogger();\n    }\n\n    return new ConsoleLogger(console);\n}\n","import { RequestSender } from '@bigcommerce/request-sender';\n\nimport { Address, LegacyAddress } from '../../../address';\nimport { toFormUrlEncoded } from '../../../common/http-request';\n\nimport { BraintreeDataCollector } from './braintree';\nimport BraintreeSDKCreator from './braintree-sdk-creator';\nimport {\n    VisaCheckoutAddress,\n    VisaCheckoutInitOptions,\n    VisaCheckoutPaymentSuccessPayload,\n    VisaCheckoutTokenizedPayload,\n} from './visacheckout';\n\nexport default class BraintreeVisaCheckoutPaymentProcessor {\n    constructor(\n        private _braintreeSDKCreator: BraintreeSDKCreator,\n        private _requestSender: RequestSender\n    ) {}\n\n    initialize(clientToken: string, options: VisaCheckoutInitializeOptions): Promise<VisaCheckoutInitOptions> {\n        this._braintreeSDKCreator.initialize(clientToken);\n\n        return this._braintreeSDKCreator.getVisaCheckout()\n            .then(visaCheckout => visaCheckout.createInitOptions({\n                settings: {\n                    locale: options.locale,\n                    shipping: {\n                        collectShipping: options.collectShipping,\n                    },\n                },\n                paymentRequest: {\n                    currencyCode: options.currencyCode,\n                    subtotal: String(options.subtotal),\n                },\n            }));\n    }\n\n    deinitialize(): Promise<void> {\n        return this._braintreeSDKCreator.teardown();\n    }\n\n    handleSuccess(payment: VisaCheckoutPaymentSuccessPayload, shipping?: Address, billing?: Address): Promise<any> {\n        return this._braintreeSDKCreator.getVisaCheckout()\n            .then(braintreeVisaCheckout => Promise.all([\n                braintreeVisaCheckout.tokenize(payment),\n                this._braintreeSDKCreator.getDataCollector(),\n            ])\n            .then(([tokenizedPayload, dataCollector]) => {\n                const {\n                    shippingAddress = this._toVisaCheckoutAddress(shipping),\n                    billingAddress = this._toVisaCheckoutAddress(billing),\n                } = tokenizedPayload;\n\n                return this._postForm({\n                    ...tokenizedPayload,\n                    shippingAddress,\n                    billingAddress,\n                }, dataCollector);\n            }));\n    }\n\n    private _postForm(paymentData: VisaCheckoutTokenizedPayload, dataCollector: BraintreeDataCollector) {\n        const {\n            userData,\n            billingAddress,\n            shippingAddress,\n            details: cardInformation,\n        } = paymentData;\n        const { userEmail } = userData;\n        const { deviceData } = dataCollector;\n\n        return this._requestSender.post('/checkout.php', {\n            headers: {\n                Accept: 'text/html',\n                'Content-Type': 'application/x-www-form-urlencoded',\n            },\n            body: toFormUrlEncoded({\n                payment_type: paymentData.type,\n                nonce: paymentData.nonce,\n                provider: 'braintreevisacheckout',\n                action: 'set_external_checkout',\n                device_data: deviceData,\n                card_information: this._getCardInformation(cardInformation),\n                billing_address: this._getAddress(userEmail, billingAddress),\n                shipping_address: this._getAddress(userEmail, shippingAddress),\n            }),\n        });\n    }\n\n    private _toVisaCheckoutAddress(address?: Address): VisaCheckoutAddress {\n        if (!address) {\n            return {};\n        }\n\n        return {\n            firstName: address.firstName,\n            lastName: address.lastName,\n            phoneNumber: address.phone,\n            streetAddress: address.address1,\n            extendedAddress: address.address2,\n            locality: address.city,\n            region: address.stateOrProvinceCode,\n            countryCode: address.countryCode,\n            postalCode: address.postalCode,\n        };\n    }\n\n    private _getAddress(email: string, address: VisaCheckoutAddress = {}): Partial<LegacyAddress> {\n        return {\n            email,\n            first_name: address.firstName,\n            last_name: address.lastName,\n            phone_number: address.phoneNumber,\n            address_line_1: address.streetAddress,\n            address_line_2: address.extendedAddress,\n            city: address.locality,\n            state: address.region,\n            country_code: address.countryCode,\n            postal_code: address.postalCode,\n        };\n    }\n\n    private _getCardInformation(cardInformation: { cardType: string, lastTwo: string }) {\n        return {\n            type: cardInformation.cardType,\n            number: cardInformation.lastTwo,\n        };\n    }\n}\n\nexport interface VisaCheckoutInitializeOptions {\n    locale?: string;\n    collectShipping?: boolean;\n    subtotal?: number;\n    currencyCode?: string;\n}\n","import { RequestSender } from '@bigcommerce/request-sender';\nimport { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport BraintreeScriptLoader from './braintree-script-loader';\nimport BraintreeSDKCreator from './braintree-sdk-creator';\nimport BraintreeVisaCheckoutPaymentProcessor from './braintree-visacheckout-payment-processor';\n\nexport default function createBraintreeVisaCheckoutPaymentProcessor(\n    scriptLoader: ScriptLoader,\n    requestSender: RequestSender\n) {\n    const braintreeScriptLoader = new BraintreeScriptLoader(scriptLoader);\n    const braintreeSDKCreator = new BraintreeSDKCreator(braintreeScriptLoader);\n\n    return new BraintreeVisaCheckoutPaymentProcessor(braintreeSDKCreator, requestSender);\n}\n"],"sourceRoot":""}